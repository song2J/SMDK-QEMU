/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_MISC_GENERATED_TRACERS_H
#define TRACE_HW_MISC_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_ALLWINNER_CPUCFG_CPU_RESET_EVENT;
extern TraceEvent _TRACE_ALLWINNER_CPUCFG_READ_EVENT;
extern TraceEvent _TRACE_ALLWINNER_CPUCFG_WRITE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_DISABLE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_ENABLE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_H3_DRAMCOM_READ_EVENT;
extern TraceEvent _TRACE_ALLWINNER_H3_DRAMCOM_WRITE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_H3_DRAMCTL_READ_EVENT;
extern TraceEvent _TRACE_ALLWINNER_H3_DRAMCTL_WRITE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_H3_DRAMPHY_READ_EVENT;
extern TraceEvent _TRACE_ALLWINNER_H3_DRAMPHY_WRITE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_R40_DRAMC_DETECT_CELLS_DISABLE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_R40_DRAMC_DETECT_CELLS_ENABLE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_R40_DRAMC_MAP_ROWS_EVENT;
extern TraceEvent _TRACE_ALLWINNER_R40_DRAMC_OFFSET_TO_CELL_EVENT;
extern TraceEvent _TRACE_ALLWINNER_R40_DRAMC_DETECT_CELL_WRITE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_R40_DRAMC_DETECT_CELL_READ_EVENT;
extern TraceEvent _TRACE_ALLWINNER_R40_DRAMCOM_READ_EVENT;
extern TraceEvent _TRACE_ALLWINNER_R40_DRAMCOM_WRITE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_R40_DRAMCTL_READ_EVENT;
extern TraceEvent _TRACE_ALLWINNER_R40_DRAMCTL_WRITE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_R40_DRAMPHY_READ_EVENT;
extern TraceEvent _TRACE_ALLWINNER_R40_DRAMPHY_WRITE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_SID_READ_EVENT;
extern TraceEvent _TRACE_ALLWINNER_SID_WRITE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_SRAMC_READ_EVENT;
extern TraceEvent _TRACE_ALLWINNER_SRAMC_WRITE_EVENT;
extern TraceEvent _TRACE_AVR_POWER_READ_EVENT;
extern TraceEvent _TRACE_AVR_POWER_WRITE_EVENT;
extern TraceEvent _TRACE_AXP2XX_RX_EVENT;
extern TraceEvent _TRACE_AXP2XX_SELECT_EVENT;
extern TraceEvent _TRACE_AXP2XX_TX_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_MER_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_MDR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_MFSR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_VCR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_DR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_ECR0_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_ECR1_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_MER_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_MDR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_MFSR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_VCR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_MFAR0_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_MFAR1_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_DR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_ECR0_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_ECR1_EVENT;
extern TraceEvent _TRACE_ECC_DIAG_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_ECC_DIAG_MEM_READB_EVENT;
extern TraceEvent _TRACE_EMPTY_SLOT_WRITE_EVENT;
extern TraceEvent _TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE_EVENT;
extern TraceEvent _TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER_EVENT;
extern TraceEvent _TRACE_SLAVIO_SET_POWER_FAIL_EVENT;
extern TraceEvent _TRACE_SLAVIO_CFG_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_SLAVIO_CFG_MEM_READB_EVENT;
extern TraceEvent _TRACE_SLAVIO_DIAG_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_SLAVIO_DIAG_MEM_READB_EVENT;
extern TraceEvent _TRACE_SLAVIO_MDM_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_SLAVIO_MDM_MEM_READB_EVENT;
extern TraceEvent _TRACE_SLAVIO_AUX1_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_SLAVIO_AUX1_MEM_READB_EVENT;
extern TraceEvent _TRACE_SLAVIO_AUX2_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_SLAVIO_AUX2_MEM_READB_EVENT;
extern TraceEvent _TRACE_APC_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_APC_MEM_READB_EVENT;
extern TraceEvent _TRACE_SLAVIO_SYSCTRL_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_SLAVIO_SYSCTRL_MEM_READL_EVENT;
extern TraceEvent _TRACE_SLAVIO_LED_MEM_WRITEW_EVENT;
extern TraceEvent _TRACE_SLAVIO_LED_MEM_READW_EVENT;
extern TraceEvent _TRACE_ASPEED_SCU_WRITE_EVENT;
extern TraceEvent _TRACE_ASPEED_SCU_READ_EVENT;
extern TraceEvent _TRACE_MPS2_SCC_READ_EVENT;
extern TraceEvent _TRACE_MPS2_SCC_WRITE_EVENT;
extern TraceEvent _TRACE_MPS2_SCC_RESET_EVENT;
extern TraceEvent _TRACE_MPS2_SCC_CFG_WRITE_EVENT;
extern TraceEvent _TRACE_MPS2_SCC_CFG_READ_EVENT;
extern TraceEvent _TRACE_MPS2_FPGAIO_READ_EVENT;
extern TraceEvent _TRACE_MPS2_FPGAIO_WRITE_EVENT;
extern TraceEvent _TRACE_MPS2_FPGAIO_RESET_EVENT;
extern TraceEvent _TRACE_MSF2_SYSREG_WRITE_EVENT;
extern TraceEvent _TRACE_MSF2_SYSREG_READ_EVENT;
extern TraceEvent _TRACE_MSF2_SYSREG_WRITE_PLL_STATUS_EVENT;
extern TraceEvent _TRACE_IMX7_GPR_READ_EVENT;
extern TraceEvent _TRACE_IMX7_GPR_WRITE_EVENT;
extern TraceEvent _TRACE_MOS6522_SET_COUNTER_EVENT;
extern TraceEvent _TRACE_MOS6522_GET_NEXT_IRQ_TIME_EVENT;
extern TraceEvent _TRACE_MOS6522_SET_SR_INT_EVENT;
extern TraceEvent _TRACE_MOS6522_WRITE_EVENT;
extern TraceEvent _TRACE_MOS6522_READ_EVENT;
extern TraceEvent _TRACE_NPCM7XX_CLK_READ_EVENT;
extern TraceEvent _TRACE_NPCM7XX_CLK_WRITE_EVENT;
extern TraceEvent _TRACE_NPCM7XX_GCR_READ_EVENT;
extern TraceEvent _TRACE_NPCM7XX_GCR_WRITE_EVENT;
extern TraceEvent _TRACE_NPCM7XX_MFT_READ_EVENT;
extern TraceEvent _TRACE_NPCM7XX_MFT_WRITE_EVENT;
extern TraceEvent _TRACE_NPCM7XX_MFT_RPM_EVENT;
extern TraceEvent _TRACE_NPCM7XX_MFT_CAPTURE_EVENT;
extern TraceEvent _TRACE_NPCM7XX_MFT_UPDATE_CLOCK_EVENT;
extern TraceEvent _TRACE_NPCM7XX_MFT_SET_DUTY_EVENT;
extern TraceEvent _TRACE_NPCM7XX_RNG_READ_EVENT;
extern TraceEvent _TRACE_NPCM7XX_RNG_WRITE_EVENT;
extern TraceEvent _TRACE_NPCM7XX_PWM_READ_EVENT;
extern TraceEvent _TRACE_NPCM7XX_PWM_WRITE_EVENT;
extern TraceEvent _TRACE_NPCM7XX_PWM_UPDATE_FREQ_EVENT;
extern TraceEvent _TRACE_NPCM7XX_PWM_UPDATE_DUTY_EVENT;
extern TraceEvent _TRACE_STM32F4XX_SYSCFG_SET_IRQ_EVENT;
extern TraceEvent _TRACE_STM32F4XX_PULSE_EXTI_EVENT;
extern TraceEvent _TRACE_STM32F4XX_SYSCFG_READ_EVENT;
extern TraceEvent _TRACE_STM32F4XX_SYSCFG_WRITE_EVENT;
extern TraceEvent _TRACE_STM32F4XX_EXTI_SET_IRQ_EVENT;
extern TraceEvent _TRACE_STM32F4XX_EXTI_READ_EVENT;
extern TraceEvent _TRACE_STM32F4XX_EXTI_WRITE_EVENT;
extern TraceEvent _TRACE_TZ_MPC_REG_READ_EVENT;
extern TraceEvent _TRACE_TZ_MPC_REG_WRITE_EVENT;
extern TraceEvent _TRACE_TZ_MPC_MEM_BLOCKED_READ_EVENT;
extern TraceEvent _TRACE_TZ_MPC_MEM_BLOCKED_WRITE_EVENT;
extern TraceEvent _TRACE_TZ_MPC_TRANSLATE_EVENT;
extern TraceEvent _TRACE_TZ_MPC_IOMMU_NOTIFY_EVENT;
extern TraceEvent _TRACE_TZ_MSC_RESET_EVENT;
extern TraceEvent _TRACE_TZ_MSC_CFG_NONSEC_EVENT;
extern TraceEvent _TRACE_TZ_MSC_CFG_SEC_RESP_EVENT;
extern TraceEvent _TRACE_TZ_MSC_IRQ_CLEAR_EVENT;
extern TraceEvent _TRACE_TZ_MSC_UPDATE_IRQ_EVENT;
extern TraceEvent _TRACE_TZ_MSC_ACCESS_BLOCKED_EVENT;
extern TraceEvent _TRACE_TZ_PPC_RESET_EVENT;
extern TraceEvent _TRACE_TZ_PPC_CFG_NONSEC_EVENT;
extern TraceEvent _TRACE_TZ_PPC_CFG_AP_EVENT;
extern TraceEvent _TRACE_TZ_PPC_CFG_SEC_RESP_EVENT;
extern TraceEvent _TRACE_TZ_PPC_IRQ_ENABLE_EVENT;
extern TraceEvent _TRACE_TZ_PPC_IRQ_CLEAR_EVENT;
extern TraceEvent _TRACE_TZ_PPC_UPDATE_IRQ_EVENT;
extern TraceEvent _TRACE_TZ_PPC_READ_BLOCKED_EVENT;
extern TraceEvent _TRACE_TZ_PPC_WRITE_BLOCKED_EVENT;
extern TraceEvent _TRACE_IOTKIT_SECCTL_S_READ_EVENT;
extern TraceEvent _TRACE_IOTKIT_SECCTL_S_WRITE_EVENT;
extern TraceEvent _TRACE_IOTKIT_SECCTL_NS_READ_EVENT;
extern TraceEvent _TRACE_IOTKIT_SECCTL_NS_WRITE_EVENT;
extern TraceEvent _TRACE_CCM_ENTRY_EVENT;
extern TraceEvent _TRACE_CCM_FREQ_EVENT;
extern TraceEvent _TRACE_CCM_CLOCK_FREQ_EVENT;
extern TraceEvent _TRACE_CCM_READ_REG_EVENT;
extern TraceEvent _TRACE_CCM_WRITE_REG_EVENT;
extern TraceEvent _TRACE_IMX7_SRC_READ_EVENT;
extern TraceEvent _TRACE_IMX7_SRC_WRITE_EVENT;
extern TraceEvent _TRACE_IOTKIT_SYSINFO_READ_EVENT;
extern TraceEvent _TRACE_IOTKIT_SYSINFO_WRITE_EVENT;
extern TraceEvent _TRACE_IOTKIT_SYSCTL_READ_EVENT;
extern TraceEvent _TRACE_IOTKIT_SYSCTL_WRITE_EVENT;
extern TraceEvent _TRACE_IOTKIT_SYSCTL_RESET_EVENT;
extern TraceEvent _TRACE_ARMSSE_CPU_PWRCTRL_READ_EVENT;
extern TraceEvent _TRACE_ARMSSE_CPU_PWRCTRL_WRITE_EVENT;
extern TraceEvent _TRACE_ARMSSE_CPUID_READ_EVENT;
extern TraceEvent _TRACE_ARMSSE_CPUID_WRITE_EVENT;
extern TraceEvent _TRACE_ARMSSE_MHU_READ_EVENT;
extern TraceEvent _TRACE_ARMSSE_MHU_WRITE_EVENT;
extern TraceEvent _TRACE_ASPEED_XDMA_WRITE_EVENT;
extern TraceEvent _TRACE_ASPEED_I3C_READ_EVENT;
extern TraceEvent _TRACE_ASPEED_I3C_WRITE_EVENT;
extern TraceEvent _TRACE_ASPEED_I3C_DEVICE_READ_EVENT;
extern TraceEvent _TRACE_ASPEED_I3C_DEVICE_WRITE_EVENT;
extern TraceEvent _TRACE_ASPEED_SDMC_WRITE_EVENT;
extern TraceEvent _TRACE_ASPEED_SDMC_READ_EVENT;
extern TraceEvent _TRACE_ASPEED_PECI_READ_EVENT;
extern TraceEvent _TRACE_ASPEED_PECI_WRITE_EVENT;
extern TraceEvent _TRACE_ASPEED_PECI_RAISE_INTERRUPT_EVENT;
extern TraceEvent _TRACE_BCM2835_MBOX_PROPERTY_EVENT;
extern TraceEvent _TRACE_BCM2835_MBOX_WRITE_EVENT;
extern TraceEvent _TRACE_BCM2835_MBOX_READ_EVENT;
extern TraceEvent _TRACE_BCM2835_MBOX_IRQ_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_UPDATE_DATA_OUT_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_UPDATE_DATA_IN_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_INTERNAL_STATUS_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_INTERNAL_CMD_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_CMD_INVALID_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_INTERNAL_TIME_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_INTERNAL_SET_CMD_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_INTERNAL_IGNORE_CMD_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_INTERNAL_SET_ALT_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_CMD_SECONDS_READ_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_CMD_SECONDS_WRITE_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_CMD_TEST_WRITE_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_CMD_WPROTECT_WRITE_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_CMD_PRAM_READ_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_CMD_PRAM_WRITE_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_CMD_PRAM_SECT_READ_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_CMD_PRAM_SECT_WRITE_EVENT;
extern TraceEvent _TRACE_VIA1_ADB_SEND_EVENT;
extern TraceEvent _TRACE_VIA1_ADB_RECEIVE_EVENT;
extern TraceEvent _TRACE_VIA1_ADB_POLL_EVENT;
extern TraceEvent _TRACE_VIA1_AUXMODE_EVENT;
extern TraceEvent _TRACE_GRLIB_AHB_PNP_READ_EVENT;
extern TraceEvent _TRACE_GRLIB_APB_PNP_READ_EVENT;
extern TraceEvent _TRACE_LED_SET_INTENSITY_EVENT;
extern TraceEvent _TRACE_LED_CHANGE_INTENSITY_EVENT;
extern TraceEvent _TRACE_PCA955X_GPIO_STATUS_EVENT;
extern TraceEvent _TRACE_PCA955X_GPIO_CHANGE_EVENT;
extern TraceEvent _TRACE_BCM2835_CPRMAN_READ_EVENT;
extern TraceEvent _TRACE_BCM2835_CPRMAN_WRITE_EVENT;
extern TraceEvent _TRACE_BCM2835_CPRMAN_WRITE_INVALID_MAGIC_EVENT;
extern TraceEvent _TRACE_VIRT_CTRL_READ_EVENT;
extern TraceEvent _TRACE_VIRT_CTRL_WRITE_EVENT;
extern TraceEvent _TRACE_VIRT_CTRL_RESET_EVENT;
extern TraceEvent _TRACE_VIRT_CTRL_REALIZE_EVENT;
extern TraceEvent _TRACE_VIRT_CTRL_INSTANCE_INIT_EVENT;
extern TraceEvent _TRACE_LASI_CHIP_MEM_VALID_EVENT;
extern TraceEvent _TRACE_LASI_CHIP_READ_EVENT;
extern TraceEvent _TRACE_LASI_CHIP_WRITE_EVENT;
extern uint16_t _TRACE_ALLWINNER_CPUCFG_CPU_RESET_DSTATE;
extern uint16_t _TRACE_ALLWINNER_CPUCFG_READ_DSTATE;
extern uint16_t _TRACE_ALLWINNER_CPUCFG_WRITE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_DISABLE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_ENABLE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_H3_DRAMCOM_READ_DSTATE;
extern uint16_t _TRACE_ALLWINNER_H3_DRAMCOM_WRITE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_H3_DRAMCTL_READ_DSTATE;
extern uint16_t _TRACE_ALLWINNER_H3_DRAMCTL_WRITE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_H3_DRAMPHY_READ_DSTATE;
extern uint16_t _TRACE_ALLWINNER_H3_DRAMPHY_WRITE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_R40_DRAMC_DETECT_CELLS_DISABLE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_R40_DRAMC_DETECT_CELLS_ENABLE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_R40_DRAMC_MAP_ROWS_DSTATE;
extern uint16_t _TRACE_ALLWINNER_R40_DRAMC_OFFSET_TO_CELL_DSTATE;
extern uint16_t _TRACE_ALLWINNER_R40_DRAMC_DETECT_CELL_WRITE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_R40_DRAMC_DETECT_CELL_READ_DSTATE;
extern uint16_t _TRACE_ALLWINNER_R40_DRAMCOM_READ_DSTATE;
extern uint16_t _TRACE_ALLWINNER_R40_DRAMCOM_WRITE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_R40_DRAMCTL_READ_DSTATE;
extern uint16_t _TRACE_ALLWINNER_R40_DRAMCTL_WRITE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_R40_DRAMPHY_READ_DSTATE;
extern uint16_t _TRACE_ALLWINNER_R40_DRAMPHY_WRITE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_SID_READ_DSTATE;
extern uint16_t _TRACE_ALLWINNER_SID_WRITE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_SRAMC_READ_DSTATE;
extern uint16_t _TRACE_ALLWINNER_SRAMC_WRITE_DSTATE;
extern uint16_t _TRACE_AVR_POWER_READ_DSTATE;
extern uint16_t _TRACE_AVR_POWER_WRITE_DSTATE;
extern uint16_t _TRACE_AXP2XX_RX_DSTATE;
extern uint16_t _TRACE_AXP2XX_SELECT_DSTATE;
extern uint16_t _TRACE_AXP2XX_TX_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_MER_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_MDR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_MFSR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_VCR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_DR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_ECR0_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_ECR1_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_MER_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_MDR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_MFSR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_VCR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_MFAR0_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_MFAR1_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_DR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_ECR0_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_ECR1_DSTATE;
extern uint16_t _TRACE_ECC_DIAG_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_ECC_DIAG_MEM_READB_DSTATE;
extern uint16_t _TRACE_EMPTY_SLOT_WRITE_DSTATE;
extern uint16_t _TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE_DSTATE;
extern uint16_t _TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER_DSTATE;
extern uint16_t _TRACE_SLAVIO_SET_POWER_FAIL_DSTATE;
extern uint16_t _TRACE_SLAVIO_CFG_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_SLAVIO_CFG_MEM_READB_DSTATE;
extern uint16_t _TRACE_SLAVIO_DIAG_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_SLAVIO_DIAG_MEM_READB_DSTATE;
extern uint16_t _TRACE_SLAVIO_MDM_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_SLAVIO_MDM_MEM_READB_DSTATE;
extern uint16_t _TRACE_SLAVIO_AUX1_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_SLAVIO_AUX1_MEM_READB_DSTATE;
extern uint16_t _TRACE_SLAVIO_AUX2_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_SLAVIO_AUX2_MEM_READB_DSTATE;
extern uint16_t _TRACE_APC_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_APC_MEM_READB_DSTATE;
extern uint16_t _TRACE_SLAVIO_SYSCTRL_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_SLAVIO_SYSCTRL_MEM_READL_DSTATE;
extern uint16_t _TRACE_SLAVIO_LED_MEM_WRITEW_DSTATE;
extern uint16_t _TRACE_SLAVIO_LED_MEM_READW_DSTATE;
extern uint16_t _TRACE_ASPEED_SCU_WRITE_DSTATE;
extern uint16_t _TRACE_ASPEED_SCU_READ_DSTATE;
extern uint16_t _TRACE_MPS2_SCC_READ_DSTATE;
extern uint16_t _TRACE_MPS2_SCC_WRITE_DSTATE;
extern uint16_t _TRACE_MPS2_SCC_RESET_DSTATE;
extern uint16_t _TRACE_MPS2_SCC_CFG_WRITE_DSTATE;
extern uint16_t _TRACE_MPS2_SCC_CFG_READ_DSTATE;
extern uint16_t _TRACE_MPS2_FPGAIO_READ_DSTATE;
extern uint16_t _TRACE_MPS2_FPGAIO_WRITE_DSTATE;
extern uint16_t _TRACE_MPS2_FPGAIO_RESET_DSTATE;
extern uint16_t _TRACE_MSF2_SYSREG_WRITE_DSTATE;
extern uint16_t _TRACE_MSF2_SYSREG_READ_DSTATE;
extern uint16_t _TRACE_MSF2_SYSREG_WRITE_PLL_STATUS_DSTATE;
extern uint16_t _TRACE_IMX7_GPR_READ_DSTATE;
extern uint16_t _TRACE_IMX7_GPR_WRITE_DSTATE;
extern uint16_t _TRACE_MOS6522_SET_COUNTER_DSTATE;
extern uint16_t _TRACE_MOS6522_GET_NEXT_IRQ_TIME_DSTATE;
extern uint16_t _TRACE_MOS6522_SET_SR_INT_DSTATE;
extern uint16_t _TRACE_MOS6522_WRITE_DSTATE;
extern uint16_t _TRACE_MOS6522_READ_DSTATE;
extern uint16_t _TRACE_NPCM7XX_CLK_READ_DSTATE;
extern uint16_t _TRACE_NPCM7XX_CLK_WRITE_DSTATE;
extern uint16_t _TRACE_NPCM7XX_GCR_READ_DSTATE;
extern uint16_t _TRACE_NPCM7XX_GCR_WRITE_DSTATE;
extern uint16_t _TRACE_NPCM7XX_MFT_READ_DSTATE;
extern uint16_t _TRACE_NPCM7XX_MFT_WRITE_DSTATE;
extern uint16_t _TRACE_NPCM7XX_MFT_RPM_DSTATE;
extern uint16_t _TRACE_NPCM7XX_MFT_CAPTURE_DSTATE;
extern uint16_t _TRACE_NPCM7XX_MFT_UPDATE_CLOCK_DSTATE;
extern uint16_t _TRACE_NPCM7XX_MFT_SET_DUTY_DSTATE;
extern uint16_t _TRACE_NPCM7XX_RNG_READ_DSTATE;
extern uint16_t _TRACE_NPCM7XX_RNG_WRITE_DSTATE;
extern uint16_t _TRACE_NPCM7XX_PWM_READ_DSTATE;
extern uint16_t _TRACE_NPCM7XX_PWM_WRITE_DSTATE;
extern uint16_t _TRACE_NPCM7XX_PWM_UPDATE_FREQ_DSTATE;
extern uint16_t _TRACE_NPCM7XX_PWM_UPDATE_DUTY_DSTATE;
extern uint16_t _TRACE_STM32F4XX_SYSCFG_SET_IRQ_DSTATE;
extern uint16_t _TRACE_STM32F4XX_PULSE_EXTI_DSTATE;
extern uint16_t _TRACE_STM32F4XX_SYSCFG_READ_DSTATE;
extern uint16_t _TRACE_STM32F4XX_SYSCFG_WRITE_DSTATE;
extern uint16_t _TRACE_STM32F4XX_EXTI_SET_IRQ_DSTATE;
extern uint16_t _TRACE_STM32F4XX_EXTI_READ_DSTATE;
extern uint16_t _TRACE_STM32F4XX_EXTI_WRITE_DSTATE;
extern uint16_t _TRACE_TZ_MPC_REG_READ_DSTATE;
extern uint16_t _TRACE_TZ_MPC_REG_WRITE_DSTATE;
extern uint16_t _TRACE_TZ_MPC_MEM_BLOCKED_READ_DSTATE;
extern uint16_t _TRACE_TZ_MPC_MEM_BLOCKED_WRITE_DSTATE;
extern uint16_t _TRACE_TZ_MPC_TRANSLATE_DSTATE;
extern uint16_t _TRACE_TZ_MPC_IOMMU_NOTIFY_DSTATE;
extern uint16_t _TRACE_TZ_MSC_RESET_DSTATE;
extern uint16_t _TRACE_TZ_MSC_CFG_NONSEC_DSTATE;
extern uint16_t _TRACE_TZ_MSC_CFG_SEC_RESP_DSTATE;
extern uint16_t _TRACE_TZ_MSC_IRQ_CLEAR_DSTATE;
extern uint16_t _TRACE_TZ_MSC_UPDATE_IRQ_DSTATE;
extern uint16_t _TRACE_TZ_MSC_ACCESS_BLOCKED_DSTATE;
extern uint16_t _TRACE_TZ_PPC_RESET_DSTATE;
extern uint16_t _TRACE_TZ_PPC_CFG_NONSEC_DSTATE;
extern uint16_t _TRACE_TZ_PPC_CFG_AP_DSTATE;
extern uint16_t _TRACE_TZ_PPC_CFG_SEC_RESP_DSTATE;
extern uint16_t _TRACE_TZ_PPC_IRQ_ENABLE_DSTATE;
extern uint16_t _TRACE_TZ_PPC_IRQ_CLEAR_DSTATE;
extern uint16_t _TRACE_TZ_PPC_UPDATE_IRQ_DSTATE;
extern uint16_t _TRACE_TZ_PPC_READ_BLOCKED_DSTATE;
extern uint16_t _TRACE_TZ_PPC_WRITE_BLOCKED_DSTATE;
extern uint16_t _TRACE_IOTKIT_SECCTL_S_READ_DSTATE;
extern uint16_t _TRACE_IOTKIT_SECCTL_S_WRITE_DSTATE;
extern uint16_t _TRACE_IOTKIT_SECCTL_NS_READ_DSTATE;
extern uint16_t _TRACE_IOTKIT_SECCTL_NS_WRITE_DSTATE;
extern uint16_t _TRACE_CCM_ENTRY_DSTATE;
extern uint16_t _TRACE_CCM_FREQ_DSTATE;
extern uint16_t _TRACE_CCM_CLOCK_FREQ_DSTATE;
extern uint16_t _TRACE_CCM_READ_REG_DSTATE;
extern uint16_t _TRACE_CCM_WRITE_REG_DSTATE;
extern uint16_t _TRACE_IMX7_SRC_READ_DSTATE;
extern uint16_t _TRACE_IMX7_SRC_WRITE_DSTATE;
extern uint16_t _TRACE_IOTKIT_SYSINFO_READ_DSTATE;
extern uint16_t _TRACE_IOTKIT_SYSINFO_WRITE_DSTATE;
extern uint16_t _TRACE_IOTKIT_SYSCTL_READ_DSTATE;
extern uint16_t _TRACE_IOTKIT_SYSCTL_WRITE_DSTATE;
extern uint16_t _TRACE_IOTKIT_SYSCTL_RESET_DSTATE;
extern uint16_t _TRACE_ARMSSE_CPU_PWRCTRL_READ_DSTATE;
extern uint16_t _TRACE_ARMSSE_CPU_PWRCTRL_WRITE_DSTATE;
extern uint16_t _TRACE_ARMSSE_CPUID_READ_DSTATE;
extern uint16_t _TRACE_ARMSSE_CPUID_WRITE_DSTATE;
extern uint16_t _TRACE_ARMSSE_MHU_READ_DSTATE;
extern uint16_t _TRACE_ARMSSE_MHU_WRITE_DSTATE;
extern uint16_t _TRACE_ASPEED_XDMA_WRITE_DSTATE;
extern uint16_t _TRACE_ASPEED_I3C_READ_DSTATE;
extern uint16_t _TRACE_ASPEED_I3C_WRITE_DSTATE;
extern uint16_t _TRACE_ASPEED_I3C_DEVICE_READ_DSTATE;
extern uint16_t _TRACE_ASPEED_I3C_DEVICE_WRITE_DSTATE;
extern uint16_t _TRACE_ASPEED_SDMC_WRITE_DSTATE;
extern uint16_t _TRACE_ASPEED_SDMC_READ_DSTATE;
extern uint16_t _TRACE_ASPEED_PECI_READ_DSTATE;
extern uint16_t _TRACE_ASPEED_PECI_WRITE_DSTATE;
extern uint16_t _TRACE_ASPEED_PECI_RAISE_INTERRUPT_DSTATE;
extern uint16_t _TRACE_BCM2835_MBOX_PROPERTY_DSTATE;
extern uint16_t _TRACE_BCM2835_MBOX_WRITE_DSTATE;
extern uint16_t _TRACE_BCM2835_MBOX_READ_DSTATE;
extern uint16_t _TRACE_BCM2835_MBOX_IRQ_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_UPDATE_DATA_OUT_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_UPDATE_DATA_IN_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_INTERNAL_STATUS_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_INTERNAL_CMD_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_CMD_INVALID_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_INTERNAL_TIME_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_INTERNAL_SET_CMD_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_INTERNAL_IGNORE_CMD_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_INTERNAL_SET_ALT_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_CMD_SECONDS_READ_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_CMD_SECONDS_WRITE_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_CMD_TEST_WRITE_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_CMD_WPROTECT_WRITE_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_CMD_PRAM_READ_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_CMD_PRAM_WRITE_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_CMD_PRAM_SECT_READ_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_CMD_PRAM_SECT_WRITE_DSTATE;
extern uint16_t _TRACE_VIA1_ADB_SEND_DSTATE;
extern uint16_t _TRACE_VIA1_ADB_RECEIVE_DSTATE;
extern uint16_t _TRACE_VIA1_ADB_POLL_DSTATE;
extern uint16_t _TRACE_VIA1_AUXMODE_DSTATE;
extern uint16_t _TRACE_GRLIB_AHB_PNP_READ_DSTATE;
extern uint16_t _TRACE_GRLIB_APB_PNP_READ_DSTATE;
extern uint16_t _TRACE_LED_SET_INTENSITY_DSTATE;
extern uint16_t _TRACE_LED_CHANGE_INTENSITY_DSTATE;
extern uint16_t _TRACE_PCA955X_GPIO_STATUS_DSTATE;
extern uint16_t _TRACE_PCA955X_GPIO_CHANGE_DSTATE;
extern uint16_t _TRACE_BCM2835_CPRMAN_READ_DSTATE;
extern uint16_t _TRACE_BCM2835_CPRMAN_WRITE_DSTATE;
extern uint16_t _TRACE_BCM2835_CPRMAN_WRITE_INVALID_MAGIC_DSTATE;
extern uint16_t _TRACE_VIRT_CTRL_READ_DSTATE;
extern uint16_t _TRACE_VIRT_CTRL_WRITE_DSTATE;
extern uint16_t _TRACE_VIRT_CTRL_RESET_DSTATE;
extern uint16_t _TRACE_VIRT_CTRL_REALIZE_DSTATE;
extern uint16_t _TRACE_VIRT_CTRL_INSTANCE_INIT_DSTATE;
extern uint16_t _TRACE_LASI_CHIP_MEM_VALID_DSTATE;
extern uint16_t _TRACE_LASI_CHIP_READ_DSTATE;
extern uint16_t _TRACE_LASI_CHIP_WRITE_DSTATE;
#define TRACE_ALLWINNER_CPUCFG_CPU_RESET_ENABLED 1
#define TRACE_ALLWINNER_CPUCFG_READ_ENABLED 1
#define TRACE_ALLWINNER_CPUCFG_WRITE_ENABLED 1
#define TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_DISABLE_ENABLED 1
#define TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_ENABLE_ENABLED 1
#define TRACE_ALLWINNER_H3_DRAMCOM_READ_ENABLED 1
#define TRACE_ALLWINNER_H3_DRAMCOM_WRITE_ENABLED 1
#define TRACE_ALLWINNER_H3_DRAMCTL_READ_ENABLED 1
#define TRACE_ALLWINNER_H3_DRAMCTL_WRITE_ENABLED 1
#define TRACE_ALLWINNER_H3_DRAMPHY_READ_ENABLED 1
#define TRACE_ALLWINNER_H3_DRAMPHY_WRITE_ENABLED 1
#define TRACE_ALLWINNER_R40_DRAMC_DETECT_CELLS_DISABLE_ENABLED 1
#define TRACE_ALLWINNER_R40_DRAMC_DETECT_CELLS_ENABLE_ENABLED 1
#define TRACE_ALLWINNER_R40_DRAMC_MAP_ROWS_ENABLED 1
#define TRACE_ALLWINNER_R40_DRAMC_OFFSET_TO_CELL_ENABLED 1
#define TRACE_ALLWINNER_R40_DRAMC_DETECT_CELL_WRITE_ENABLED 1
#define TRACE_ALLWINNER_R40_DRAMC_DETECT_CELL_READ_ENABLED 1
#define TRACE_ALLWINNER_R40_DRAMCOM_READ_ENABLED 1
#define TRACE_ALLWINNER_R40_DRAMCOM_WRITE_ENABLED 1
#define TRACE_ALLWINNER_R40_DRAMCTL_READ_ENABLED 1
#define TRACE_ALLWINNER_R40_DRAMCTL_WRITE_ENABLED 1
#define TRACE_ALLWINNER_R40_DRAMPHY_READ_ENABLED 1
#define TRACE_ALLWINNER_R40_DRAMPHY_WRITE_ENABLED 1
#define TRACE_ALLWINNER_SID_READ_ENABLED 1
#define TRACE_ALLWINNER_SID_WRITE_ENABLED 1
#define TRACE_ALLWINNER_SRAMC_READ_ENABLED 1
#define TRACE_ALLWINNER_SRAMC_WRITE_ENABLED 1
#define TRACE_AVR_POWER_READ_ENABLED 1
#define TRACE_AVR_POWER_WRITE_ENABLED 1
#define TRACE_AXP2XX_RX_ENABLED 1
#define TRACE_AXP2XX_SELECT_ENABLED 1
#define TRACE_AXP2XX_TX_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_MER_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_MDR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_MFSR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_VCR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_DR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_ECR0_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_ECR1_ENABLED 1
#define TRACE_ECC_MEM_READL_MER_ENABLED 1
#define TRACE_ECC_MEM_READL_MDR_ENABLED 1
#define TRACE_ECC_MEM_READL_MFSR_ENABLED 1
#define TRACE_ECC_MEM_READL_VCR_ENABLED 1
#define TRACE_ECC_MEM_READL_MFAR0_ENABLED 1
#define TRACE_ECC_MEM_READL_MFAR1_ENABLED 1
#define TRACE_ECC_MEM_READL_DR_ENABLED 1
#define TRACE_ECC_MEM_READL_ECR0_ENABLED 1
#define TRACE_ECC_MEM_READL_ECR1_ENABLED 1
#define TRACE_ECC_DIAG_MEM_WRITEB_ENABLED 1
#define TRACE_ECC_DIAG_MEM_READB_ENABLED 1
#define TRACE_EMPTY_SLOT_WRITE_ENABLED 1
#define TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE_ENABLED 1
#define TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER_ENABLED 1
#define TRACE_SLAVIO_SET_POWER_FAIL_ENABLED 1
#define TRACE_SLAVIO_CFG_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_CFG_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_DIAG_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_DIAG_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_MDM_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_MDM_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_AUX1_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_AUX1_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_AUX2_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_AUX2_MEM_READB_ENABLED 1
#define TRACE_APC_MEM_WRITEB_ENABLED 1
#define TRACE_APC_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_SYSCTRL_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_SYSCTRL_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_LED_MEM_WRITEW_ENABLED 1
#define TRACE_SLAVIO_LED_MEM_READW_ENABLED 1
#define TRACE_ASPEED_SCU_WRITE_ENABLED 1
#define TRACE_ASPEED_SCU_READ_ENABLED 1
#define TRACE_MPS2_SCC_READ_ENABLED 1
#define TRACE_MPS2_SCC_WRITE_ENABLED 1
#define TRACE_MPS2_SCC_RESET_ENABLED 1
#define TRACE_MPS2_SCC_CFG_WRITE_ENABLED 1
#define TRACE_MPS2_SCC_CFG_READ_ENABLED 1
#define TRACE_MPS2_FPGAIO_READ_ENABLED 1
#define TRACE_MPS2_FPGAIO_WRITE_ENABLED 1
#define TRACE_MPS2_FPGAIO_RESET_ENABLED 1
#define TRACE_MSF2_SYSREG_WRITE_ENABLED 1
#define TRACE_MSF2_SYSREG_READ_ENABLED 1
#define TRACE_MSF2_SYSREG_WRITE_PLL_STATUS_ENABLED 1
#define TRACE_IMX7_GPR_READ_ENABLED 1
#define TRACE_IMX7_GPR_WRITE_ENABLED 1
#define TRACE_MOS6522_SET_COUNTER_ENABLED 1
#define TRACE_MOS6522_GET_NEXT_IRQ_TIME_ENABLED 1
#define TRACE_MOS6522_SET_SR_INT_ENABLED 1
#define TRACE_MOS6522_WRITE_ENABLED 1
#define TRACE_MOS6522_READ_ENABLED 1
#define TRACE_NPCM7XX_CLK_READ_ENABLED 1
#define TRACE_NPCM7XX_CLK_WRITE_ENABLED 1
#define TRACE_NPCM7XX_GCR_READ_ENABLED 1
#define TRACE_NPCM7XX_GCR_WRITE_ENABLED 1
#define TRACE_NPCM7XX_MFT_READ_ENABLED 1
#define TRACE_NPCM7XX_MFT_WRITE_ENABLED 1
#define TRACE_NPCM7XX_MFT_RPM_ENABLED 1
#define TRACE_NPCM7XX_MFT_CAPTURE_ENABLED 1
#define TRACE_NPCM7XX_MFT_UPDATE_CLOCK_ENABLED 1
#define TRACE_NPCM7XX_MFT_SET_DUTY_ENABLED 1
#define TRACE_NPCM7XX_RNG_READ_ENABLED 1
#define TRACE_NPCM7XX_RNG_WRITE_ENABLED 1
#define TRACE_NPCM7XX_PWM_READ_ENABLED 1
#define TRACE_NPCM7XX_PWM_WRITE_ENABLED 1
#define TRACE_NPCM7XX_PWM_UPDATE_FREQ_ENABLED 1
#define TRACE_NPCM7XX_PWM_UPDATE_DUTY_ENABLED 1
#define TRACE_STM32F4XX_SYSCFG_SET_IRQ_ENABLED 1
#define TRACE_STM32F4XX_PULSE_EXTI_ENABLED 1
#define TRACE_STM32F4XX_SYSCFG_READ_ENABLED 1
#define TRACE_STM32F4XX_SYSCFG_WRITE_ENABLED 1
#define TRACE_STM32F4XX_EXTI_SET_IRQ_ENABLED 1
#define TRACE_STM32F4XX_EXTI_READ_ENABLED 1
#define TRACE_STM32F4XX_EXTI_WRITE_ENABLED 1
#define TRACE_TZ_MPC_REG_READ_ENABLED 1
#define TRACE_TZ_MPC_REG_WRITE_ENABLED 1
#define TRACE_TZ_MPC_MEM_BLOCKED_READ_ENABLED 1
#define TRACE_TZ_MPC_MEM_BLOCKED_WRITE_ENABLED 1
#define TRACE_TZ_MPC_TRANSLATE_ENABLED 1
#define TRACE_TZ_MPC_IOMMU_NOTIFY_ENABLED 1
#define TRACE_TZ_MSC_RESET_ENABLED 1
#define TRACE_TZ_MSC_CFG_NONSEC_ENABLED 1
#define TRACE_TZ_MSC_CFG_SEC_RESP_ENABLED 1
#define TRACE_TZ_MSC_IRQ_CLEAR_ENABLED 1
#define TRACE_TZ_MSC_UPDATE_IRQ_ENABLED 1
#define TRACE_TZ_MSC_ACCESS_BLOCKED_ENABLED 1
#define TRACE_TZ_PPC_RESET_ENABLED 1
#define TRACE_TZ_PPC_CFG_NONSEC_ENABLED 1
#define TRACE_TZ_PPC_CFG_AP_ENABLED 1
#define TRACE_TZ_PPC_CFG_SEC_RESP_ENABLED 1
#define TRACE_TZ_PPC_IRQ_ENABLE_ENABLED 1
#define TRACE_TZ_PPC_IRQ_CLEAR_ENABLED 1
#define TRACE_TZ_PPC_UPDATE_IRQ_ENABLED 1
#define TRACE_TZ_PPC_READ_BLOCKED_ENABLED 1
#define TRACE_TZ_PPC_WRITE_BLOCKED_ENABLED 1
#define TRACE_IOTKIT_SECCTL_S_READ_ENABLED 1
#define TRACE_IOTKIT_SECCTL_S_WRITE_ENABLED 1
#define TRACE_IOTKIT_SECCTL_NS_READ_ENABLED 1
#define TRACE_IOTKIT_SECCTL_NS_WRITE_ENABLED 1
#define TRACE_CCM_ENTRY_ENABLED 1
#define TRACE_CCM_FREQ_ENABLED 1
#define TRACE_CCM_CLOCK_FREQ_ENABLED 1
#define TRACE_CCM_READ_REG_ENABLED 1
#define TRACE_CCM_WRITE_REG_ENABLED 1
#define TRACE_IMX7_SRC_READ_ENABLED 1
#define TRACE_IMX7_SRC_WRITE_ENABLED 1
#define TRACE_IOTKIT_SYSINFO_READ_ENABLED 1
#define TRACE_IOTKIT_SYSINFO_WRITE_ENABLED 1
#define TRACE_IOTKIT_SYSCTL_READ_ENABLED 1
#define TRACE_IOTKIT_SYSCTL_WRITE_ENABLED 1
#define TRACE_IOTKIT_SYSCTL_RESET_ENABLED 1
#define TRACE_ARMSSE_CPU_PWRCTRL_READ_ENABLED 1
#define TRACE_ARMSSE_CPU_PWRCTRL_WRITE_ENABLED 1
#define TRACE_ARMSSE_CPUID_READ_ENABLED 1
#define TRACE_ARMSSE_CPUID_WRITE_ENABLED 1
#define TRACE_ARMSSE_MHU_READ_ENABLED 1
#define TRACE_ARMSSE_MHU_WRITE_ENABLED 1
#define TRACE_ASPEED_XDMA_WRITE_ENABLED 1
#define TRACE_ASPEED_I3C_READ_ENABLED 1
#define TRACE_ASPEED_I3C_WRITE_ENABLED 1
#define TRACE_ASPEED_I3C_DEVICE_READ_ENABLED 1
#define TRACE_ASPEED_I3C_DEVICE_WRITE_ENABLED 1
#define TRACE_ASPEED_SDMC_WRITE_ENABLED 1
#define TRACE_ASPEED_SDMC_READ_ENABLED 1
#define TRACE_ASPEED_PECI_READ_ENABLED 1
#define TRACE_ASPEED_PECI_WRITE_ENABLED 1
#define TRACE_ASPEED_PECI_RAISE_INTERRUPT_ENABLED 1
#define TRACE_BCM2835_MBOX_PROPERTY_ENABLED 1
#define TRACE_BCM2835_MBOX_WRITE_ENABLED 1
#define TRACE_BCM2835_MBOX_READ_ENABLED 1
#define TRACE_BCM2835_MBOX_IRQ_ENABLED 1
#define TRACE_VIA1_RTC_UPDATE_DATA_OUT_ENABLED 1
#define TRACE_VIA1_RTC_UPDATE_DATA_IN_ENABLED 1
#define TRACE_VIA1_RTC_INTERNAL_STATUS_ENABLED 1
#define TRACE_VIA1_RTC_INTERNAL_CMD_ENABLED 1
#define TRACE_VIA1_RTC_CMD_INVALID_ENABLED 1
#define TRACE_VIA1_RTC_INTERNAL_TIME_ENABLED 1
#define TRACE_VIA1_RTC_INTERNAL_SET_CMD_ENABLED 1
#define TRACE_VIA1_RTC_INTERNAL_IGNORE_CMD_ENABLED 1
#define TRACE_VIA1_RTC_INTERNAL_SET_ALT_ENABLED 1
#define TRACE_VIA1_RTC_CMD_SECONDS_READ_ENABLED 1
#define TRACE_VIA1_RTC_CMD_SECONDS_WRITE_ENABLED 1
#define TRACE_VIA1_RTC_CMD_TEST_WRITE_ENABLED 1
#define TRACE_VIA1_RTC_CMD_WPROTECT_WRITE_ENABLED 1
#define TRACE_VIA1_RTC_CMD_PRAM_READ_ENABLED 1
#define TRACE_VIA1_RTC_CMD_PRAM_WRITE_ENABLED 1
#define TRACE_VIA1_RTC_CMD_PRAM_SECT_READ_ENABLED 1
#define TRACE_VIA1_RTC_CMD_PRAM_SECT_WRITE_ENABLED 1
#define TRACE_VIA1_ADB_SEND_ENABLED 1
#define TRACE_VIA1_ADB_RECEIVE_ENABLED 1
#define TRACE_VIA1_ADB_POLL_ENABLED 1
#define TRACE_VIA1_AUXMODE_ENABLED 1
#define TRACE_GRLIB_AHB_PNP_READ_ENABLED 1
#define TRACE_GRLIB_APB_PNP_READ_ENABLED 1
#define TRACE_LED_SET_INTENSITY_ENABLED 1
#define TRACE_LED_CHANGE_INTENSITY_ENABLED 1
#define TRACE_PCA955X_GPIO_STATUS_ENABLED 1
#define TRACE_PCA955X_GPIO_CHANGE_ENABLED 1
#define TRACE_BCM2835_CPRMAN_READ_ENABLED 1
#define TRACE_BCM2835_CPRMAN_WRITE_ENABLED 1
#define TRACE_BCM2835_CPRMAN_WRITE_INVALID_MAGIC_ENABLED 1
#define TRACE_VIRT_CTRL_READ_ENABLED 1
#define TRACE_VIRT_CTRL_WRITE_ENABLED 1
#define TRACE_VIRT_CTRL_RESET_ENABLED 1
#define TRACE_VIRT_CTRL_REALIZE_ENABLED 1
#define TRACE_VIRT_CTRL_INSTANCE_INIT_ENABLED 1
#define TRACE_LASI_CHIP_MEM_VALID_ENABLED 1
#define TRACE_LASI_CHIP_READ_ENABLED 1
#define TRACE_LASI_CHIP_WRITE_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_ALLWINNER_CPUCFG_CPU_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_CPUCFG_CPU_RESET) || \
    false)

static inline void _nocheck__trace_allwinner_cpucfg_cpu_reset(uint8_t cpu_id, uint32_t reset_addr)
{
    if (trace_event_get_state(TRACE_ALLWINNER_CPUCFG_CPU_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_cpucfg_cpu_reset " "id %u, reset_addr 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu_id, reset_addr);
#line 652 "trace/trace-hw_misc.h"
        } else {
#line 4 "../hw/misc/trace-events"
            qemu_log("allwinner_cpucfg_cpu_reset " "id %u, reset_addr 0x%" PRIx32 "\n", cpu_id, reset_addr);
#line 656 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_cpucfg_cpu_reset(uint8_t cpu_id, uint32_t reset_addr)
{
    if (true) {
        _nocheck__trace_allwinner_cpucfg_cpu_reset(cpu_id, reset_addr);
    }
}

#define TRACE_ALLWINNER_CPUCFG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_CPUCFG_READ) || \
    false)

static inline void _nocheck__trace_allwinner_cpucfg_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_CPUCFG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_cpucfg_read " "offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 683 "trace/trace-hw_misc.h"
        } else {
#line 5 "../hw/misc/trace-events"
            qemu_log("allwinner_cpucfg_read " "offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 687 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_cpucfg_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_cpucfg_read(offset, data, size);
    }
}

#define TRACE_ALLWINNER_CPUCFG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_CPUCFG_WRITE) || \
    false)

static inline void _nocheck__trace_allwinner_cpucfg_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_CPUCFG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_cpucfg_write " "offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 714 "trace/trace-hw_misc.h"
        } else {
#line 6 "../hw/misc/trace-events"
            qemu_log("allwinner_cpucfg_write " "offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 718 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_cpucfg_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_cpucfg_write(offset, data, size);
    }
}

#define TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_DISABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_DISABLE) || \
    false)

static inline void _nocheck__trace_allwinner_h3_dramc_rowmirror_disable(void)
{
    if (trace_event_get_state(TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_DISABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_h3_dramc_rowmirror_disable " "Disable row mirror" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 745 "trace/trace-hw_misc.h"
        } else {
#line 9 "../hw/misc/trace-events"
            qemu_log("allwinner_h3_dramc_rowmirror_disable " "Disable row mirror" "\n");
#line 749 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_h3_dramc_rowmirror_disable(void)
{
    if (true) {
        _nocheck__trace_allwinner_h3_dramc_rowmirror_disable();
    }
}

#define TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_ENABLE) || \
    false)

static inline void _nocheck__trace_allwinner_h3_dramc_rowmirror_enable(uint64_t addr)
{
    if (trace_event_get_state(TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_h3_dramc_rowmirror_enable " "Enable row mirror: addr 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr);
#line 776 "trace/trace-hw_misc.h"
        } else {
#line 10 "../hw/misc/trace-events"
            qemu_log("allwinner_h3_dramc_rowmirror_enable " "Enable row mirror: addr 0x%" PRIx64 "\n", addr);
#line 780 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_h3_dramc_rowmirror_enable(uint64_t addr)
{
    if (true) {
        _nocheck__trace_allwinner_h3_dramc_rowmirror_enable(addr);
    }
}

#define TRACE_ALLWINNER_H3_DRAMCOM_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_H3_DRAMCOM_READ) || \
    false)

static inline void _nocheck__trace_allwinner_h3_dramcom_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_H3_DRAMCOM_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_h3_dramcom_read " "Read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 807 "trace/trace-hw_misc.h"
        } else {
#line 11 "../hw/misc/trace-events"
            qemu_log("allwinner_h3_dramcom_read " "Read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 811 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_h3_dramcom_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_h3_dramcom_read(offset, data, size);
    }
}

#define TRACE_ALLWINNER_H3_DRAMCOM_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_H3_DRAMCOM_WRITE) || \
    false)

static inline void _nocheck__trace_allwinner_h3_dramcom_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_H3_DRAMCOM_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_h3_dramcom_write " "Write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 838 "trace/trace-hw_misc.h"
        } else {
#line 12 "../hw/misc/trace-events"
            qemu_log("allwinner_h3_dramcom_write " "Write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 842 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_h3_dramcom_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_h3_dramcom_write(offset, data, size);
    }
}

#define TRACE_ALLWINNER_H3_DRAMCTL_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_H3_DRAMCTL_READ) || \
    false)

static inline void _nocheck__trace_allwinner_h3_dramctl_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_H3_DRAMCTL_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_h3_dramctl_read " "Read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 869 "trace/trace-hw_misc.h"
        } else {
#line 13 "../hw/misc/trace-events"
            qemu_log("allwinner_h3_dramctl_read " "Read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 873 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_h3_dramctl_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_h3_dramctl_read(offset, data, size);
    }
}

#define TRACE_ALLWINNER_H3_DRAMCTL_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_H3_DRAMCTL_WRITE) || \
    false)

static inline void _nocheck__trace_allwinner_h3_dramctl_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_H3_DRAMCTL_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_h3_dramctl_write " "Write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 900 "trace/trace-hw_misc.h"
        } else {
#line 14 "../hw/misc/trace-events"
            qemu_log("allwinner_h3_dramctl_write " "Write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 904 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_h3_dramctl_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_h3_dramctl_write(offset, data, size);
    }
}

#define TRACE_ALLWINNER_H3_DRAMPHY_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_H3_DRAMPHY_READ) || \
    false)

static inline void _nocheck__trace_allwinner_h3_dramphy_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_H3_DRAMPHY_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_h3_dramphy_read " "Read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 931 "trace/trace-hw_misc.h"
        } else {
#line 15 "../hw/misc/trace-events"
            qemu_log("allwinner_h3_dramphy_read " "Read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 935 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_h3_dramphy_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_h3_dramphy_read(offset, data, size);
    }
}

#define TRACE_ALLWINNER_H3_DRAMPHY_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_H3_DRAMPHY_WRITE) || \
    false)

static inline void _nocheck__trace_allwinner_h3_dramphy_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_H3_DRAMPHY_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_h3_dramphy_write " "write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 962 "trace/trace-hw_misc.h"
        } else {
#line 16 "../hw/misc/trace-events"
            qemu_log("allwinner_h3_dramphy_write " "write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 966 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_h3_dramphy_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_h3_dramphy_write(offset, data, size);
    }
}

#define TRACE_ALLWINNER_R40_DRAMC_DETECT_CELLS_DISABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_R40_DRAMC_DETECT_CELLS_DISABLE) || \
    false)

static inline void _nocheck__trace_allwinner_r40_dramc_detect_cells_disable(void)
{
    if (trace_event_get_state(TRACE_ALLWINNER_R40_DRAMC_DETECT_CELLS_DISABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_r40_dramc_detect_cells_disable " "Disable detect cells" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 993 "trace/trace-hw_misc.h"
        } else {
#line 19 "../hw/misc/trace-events"
            qemu_log("allwinner_r40_dramc_detect_cells_disable " "Disable detect cells" "\n");
#line 997 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_r40_dramc_detect_cells_disable(void)
{
    if (true) {
        _nocheck__trace_allwinner_r40_dramc_detect_cells_disable();
    }
}

#define TRACE_ALLWINNER_R40_DRAMC_DETECT_CELLS_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_R40_DRAMC_DETECT_CELLS_ENABLE) || \
    false)

static inline void _nocheck__trace_allwinner_r40_dramc_detect_cells_enable(void)
{
    if (trace_event_get_state(TRACE_ALLWINNER_R40_DRAMC_DETECT_CELLS_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 20 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_r40_dramc_detect_cells_enable " "Enable detect cells" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1024 "trace/trace-hw_misc.h"
        } else {
#line 20 "../hw/misc/trace-events"
            qemu_log("allwinner_r40_dramc_detect_cells_enable " "Enable detect cells" "\n");
#line 1028 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_r40_dramc_detect_cells_enable(void)
{
    if (true) {
        _nocheck__trace_allwinner_r40_dramc_detect_cells_enable();
    }
}

#define TRACE_ALLWINNER_R40_DRAMC_MAP_ROWS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_R40_DRAMC_MAP_ROWS) || \
    false)

static inline void _nocheck__trace_allwinner_r40_dramc_map_rows(uint8_t row_bits, uint8_t bank_bits, uint8_t col_bits)
{
    if (trace_event_get_state(TRACE_ALLWINNER_R40_DRAMC_MAP_ROWS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 21 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_r40_dramc_map_rows " "DRAM layout: row_bits %d, bank_bits %d, col_bits %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , row_bits, bank_bits, col_bits);
#line 1055 "trace/trace-hw_misc.h"
        } else {
#line 21 "../hw/misc/trace-events"
            qemu_log("allwinner_r40_dramc_map_rows " "DRAM layout: row_bits %d, bank_bits %d, col_bits %d" "\n", row_bits, bank_bits, col_bits);
#line 1059 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_r40_dramc_map_rows(uint8_t row_bits, uint8_t bank_bits, uint8_t col_bits)
{
    if (true) {
        _nocheck__trace_allwinner_r40_dramc_map_rows(row_bits, bank_bits, col_bits);
    }
}

#define TRACE_ALLWINNER_R40_DRAMC_OFFSET_TO_CELL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_R40_DRAMC_OFFSET_TO_CELL) || \
    false)

static inline void _nocheck__trace_allwinner_r40_dramc_offset_to_cell(uint64_t offset, int row, int bank, int col)
{
    if (trace_event_get_state(TRACE_ALLWINNER_R40_DRAMC_OFFSET_TO_CELL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_r40_dramc_offset_to_cell " "offset 0x%" PRIx64 " row %d bank %d col %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, row, bank, col);
#line 1086 "trace/trace-hw_misc.h"
        } else {
#line 22 "../hw/misc/trace-events"
            qemu_log("allwinner_r40_dramc_offset_to_cell " "offset 0x%" PRIx64 " row %d bank %d col %d" "\n", offset, row, bank, col);
#line 1090 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_r40_dramc_offset_to_cell(uint64_t offset, int row, int bank, int col)
{
    if (true) {
        _nocheck__trace_allwinner_r40_dramc_offset_to_cell(offset, row, bank, col);
    }
}

#define TRACE_ALLWINNER_R40_DRAMC_DETECT_CELL_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_R40_DRAMC_DETECT_CELL_WRITE) || \
    false)

static inline void _nocheck__trace_allwinner_r40_dramc_detect_cell_write(uint64_t offset, uint64_t data)
{
    if (trace_event_get_state(TRACE_ALLWINNER_R40_DRAMC_DETECT_CELL_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 23 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_r40_dramc_detect_cell_write " "offset 0x%" PRIx64 " data 0x%" PRIx64 "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data);
#line 1117 "trace/trace-hw_misc.h"
        } else {
#line 23 "../hw/misc/trace-events"
            qemu_log("allwinner_r40_dramc_detect_cell_write " "offset 0x%" PRIx64 " data 0x%" PRIx64 "" "\n", offset, data);
#line 1121 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_r40_dramc_detect_cell_write(uint64_t offset, uint64_t data)
{
    if (true) {
        _nocheck__trace_allwinner_r40_dramc_detect_cell_write(offset, data);
    }
}

#define TRACE_ALLWINNER_R40_DRAMC_DETECT_CELL_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_R40_DRAMC_DETECT_CELL_READ) || \
    false)

static inline void _nocheck__trace_allwinner_r40_dramc_detect_cell_read(uint64_t offset, uint64_t data)
{
    if (trace_event_get_state(TRACE_ALLWINNER_R40_DRAMC_DETECT_CELL_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 24 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_r40_dramc_detect_cell_read " "offset 0x%" PRIx64 " data 0x%" PRIx64 "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data);
#line 1148 "trace/trace-hw_misc.h"
        } else {
#line 24 "../hw/misc/trace-events"
            qemu_log("allwinner_r40_dramc_detect_cell_read " "offset 0x%" PRIx64 " data 0x%" PRIx64 "" "\n", offset, data);
#line 1152 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_r40_dramc_detect_cell_read(uint64_t offset, uint64_t data)
{
    if (true) {
        _nocheck__trace_allwinner_r40_dramc_detect_cell_read(offset, data);
    }
}

#define TRACE_ALLWINNER_R40_DRAMCOM_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_R40_DRAMCOM_READ) || \
    false)

static inline void _nocheck__trace_allwinner_r40_dramcom_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_R40_DRAMCOM_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 25 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_r40_dramcom_read " "Read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 1179 "trace/trace-hw_misc.h"
        } else {
#line 25 "../hw/misc/trace-events"
            qemu_log("allwinner_r40_dramcom_read " "Read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 1183 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_r40_dramcom_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_r40_dramcom_read(offset, data, size);
    }
}

#define TRACE_ALLWINNER_R40_DRAMCOM_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_R40_DRAMCOM_WRITE) || \
    false)

static inline void _nocheck__trace_allwinner_r40_dramcom_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_R40_DRAMCOM_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 26 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_r40_dramcom_write " "Write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 1210 "trace/trace-hw_misc.h"
        } else {
#line 26 "../hw/misc/trace-events"
            qemu_log("allwinner_r40_dramcom_write " "Write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 1214 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_r40_dramcom_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_r40_dramcom_write(offset, data, size);
    }
}

#define TRACE_ALLWINNER_R40_DRAMCTL_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_R40_DRAMCTL_READ) || \
    false)

static inline void _nocheck__trace_allwinner_r40_dramctl_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_R40_DRAMCTL_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 27 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_r40_dramctl_read " "Read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 1241 "trace/trace-hw_misc.h"
        } else {
#line 27 "../hw/misc/trace-events"
            qemu_log("allwinner_r40_dramctl_read " "Read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 1245 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_r40_dramctl_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_r40_dramctl_read(offset, data, size);
    }
}

#define TRACE_ALLWINNER_R40_DRAMCTL_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_R40_DRAMCTL_WRITE) || \
    false)

static inline void _nocheck__trace_allwinner_r40_dramctl_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_R40_DRAMCTL_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 28 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_r40_dramctl_write " "Write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 1272 "trace/trace-hw_misc.h"
        } else {
#line 28 "../hw/misc/trace-events"
            qemu_log("allwinner_r40_dramctl_write " "Write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 1276 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_r40_dramctl_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_r40_dramctl_write(offset, data, size);
    }
}

#define TRACE_ALLWINNER_R40_DRAMPHY_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_R40_DRAMPHY_READ) || \
    false)

static inline void _nocheck__trace_allwinner_r40_dramphy_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_R40_DRAMPHY_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 29 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_r40_dramphy_read " "Read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 1303 "trace/trace-hw_misc.h"
        } else {
#line 29 "../hw/misc/trace-events"
            qemu_log("allwinner_r40_dramphy_read " "Read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 1307 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_r40_dramphy_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_r40_dramphy_read(offset, data, size);
    }
}

#define TRACE_ALLWINNER_R40_DRAMPHY_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_R40_DRAMPHY_WRITE) || \
    false)

static inline void _nocheck__trace_allwinner_r40_dramphy_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_R40_DRAMPHY_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 30 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_r40_dramphy_write " "write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 1334 "trace/trace-hw_misc.h"
        } else {
#line 30 "../hw/misc/trace-events"
            qemu_log("allwinner_r40_dramphy_write " "write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 1338 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_r40_dramphy_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_r40_dramphy_write(offset, data, size);
    }
}

#define TRACE_ALLWINNER_SID_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_SID_READ) || \
    false)

static inline void _nocheck__trace_allwinner_sid_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_SID_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 33 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_sid_read " "offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 1365 "trace/trace-hw_misc.h"
        } else {
#line 33 "../hw/misc/trace-events"
            qemu_log("allwinner_sid_read " "offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 1369 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_sid_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_sid_read(offset, data, size);
    }
}

#define TRACE_ALLWINNER_SID_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_SID_WRITE) || \
    false)

static inline void _nocheck__trace_allwinner_sid_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_SID_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 34 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_sid_write " "offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 1396 "trace/trace-hw_misc.h"
        } else {
#line 34 "../hw/misc/trace-events"
            qemu_log("allwinner_sid_write " "offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 1400 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_sid_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_sid_write(offset, data, size);
    }
}

#define TRACE_ALLWINNER_SRAMC_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_SRAMC_READ) || \
    false)

static inline void _nocheck__trace_allwinner_sramc_read(uint64_t offset, uint64_t data)
{
    if (trace_event_get_state(TRACE_ALLWINNER_SRAMC_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 37 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_sramc_read " "offset 0x%" PRIx64 " data 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data);
#line 1427 "trace/trace-hw_misc.h"
        } else {
#line 37 "../hw/misc/trace-events"
            qemu_log("allwinner_sramc_read " "offset 0x%" PRIx64 " data 0x%" PRIx64 "\n", offset, data);
#line 1431 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_sramc_read(uint64_t offset, uint64_t data)
{
    if (true) {
        _nocheck__trace_allwinner_sramc_read(offset, data);
    }
}

#define TRACE_ALLWINNER_SRAMC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_SRAMC_WRITE) || \
    false)

static inline void _nocheck__trace_allwinner_sramc_write(uint64_t offset, uint64_t data)
{
    if (trace_event_get_state(TRACE_ALLWINNER_SRAMC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 38 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_sramc_write " "offset 0x%" PRIx64 " data 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data);
#line 1458 "trace/trace-hw_misc.h"
        } else {
#line 38 "../hw/misc/trace-events"
            qemu_log("allwinner_sramc_write " "offset 0x%" PRIx64 " data 0x%" PRIx64 "\n", offset, data);
#line 1462 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_sramc_write(uint64_t offset, uint64_t data)
{
    if (true) {
        _nocheck__trace_allwinner_sramc_write(offset, data);
    }
}

#define TRACE_AVR_POWER_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_POWER_READ) || \
    false)

static inline void _nocheck__trace_avr_power_read(uint8_t value)
{
    if (trace_event_get_state(TRACE_AVR_POWER_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 41 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:avr_power_read " "power_reduc read value:%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , value);
#line 1489 "trace/trace-hw_misc.h"
        } else {
#line 41 "../hw/misc/trace-events"
            qemu_log("avr_power_read " "power_reduc read value:%u" "\n", value);
#line 1493 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_avr_power_read(uint8_t value)
{
    if (true) {
        _nocheck__trace_avr_power_read(value);
    }
}

#define TRACE_AVR_POWER_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_POWER_WRITE) || \
    false)

static inline void _nocheck__trace_avr_power_write(uint8_t value)
{
    if (trace_event_get_state(TRACE_AVR_POWER_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 42 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:avr_power_write " "power_reduc write value:%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , value);
#line 1520 "trace/trace-hw_misc.h"
        } else {
#line 42 "../hw/misc/trace-events"
            qemu_log("avr_power_write " "power_reduc write value:%u" "\n", value);
#line 1524 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_avr_power_write(uint8_t value)
{
    if (true) {
        _nocheck__trace_avr_power_write(value);
    }
}

#define TRACE_AXP2XX_RX_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AXP2XX_RX) || \
    false)

static inline void _nocheck__trace_axp2xx_rx(uint8_t reg, uint8_t data)
{
    if (trace_event_get_state(TRACE_AXP2XX_RX) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 45 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:axp2xx_rx " "Read reg 0x%" PRIx8 " : 0x%" PRIx8 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, data);
#line 1551 "trace/trace-hw_misc.h"
        } else {
#line 45 "../hw/misc/trace-events"
            qemu_log("axp2xx_rx " "Read reg 0x%" PRIx8 " : 0x%" PRIx8 "\n", reg, data);
#line 1555 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_axp2xx_rx(uint8_t reg, uint8_t data)
{
    if (true) {
        _nocheck__trace_axp2xx_rx(reg, data);
    }
}

#define TRACE_AXP2XX_SELECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AXP2XX_SELECT) || \
    false)

static inline void _nocheck__trace_axp2xx_select(uint8_t reg)
{
    if (trace_event_get_state(TRACE_AXP2XX_SELECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 46 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:axp2xx_select " "Accessing reg 0x%" PRIx8 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg);
#line 1582 "trace/trace-hw_misc.h"
        } else {
#line 46 "../hw/misc/trace-events"
            qemu_log("axp2xx_select " "Accessing reg 0x%" PRIx8 "\n", reg);
#line 1586 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_axp2xx_select(uint8_t reg)
{
    if (true) {
        _nocheck__trace_axp2xx_select(reg);
    }
}

#define TRACE_AXP2XX_TX_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AXP2XX_TX) || \
    false)

static inline void _nocheck__trace_axp2xx_tx(uint8_t reg, uint8_t data)
{
    if (trace_event_get_state(TRACE_AXP2XX_TX) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 47 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:axp2xx_tx " "Write reg 0x%" PRIx8 " : 0x%" PRIx8 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, data);
#line 1613 "trace/trace-hw_misc.h"
        } else {
#line 47 "../hw/misc/trace-events"
            qemu_log("axp2xx_tx " "Write reg 0x%" PRIx8 " : 0x%" PRIx8 "\n", reg, data);
#line 1617 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_axp2xx_tx(uint8_t reg, uint8_t data)
{
    if (true) {
        _nocheck__trace_axp2xx_tx(reg, data);
    }
}

#define TRACE_ECC_MEM_WRITEL_MER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_MER) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_mer(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_MER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 50 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_writel_mer " "Write memory enable 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1644 "trace/trace-hw_misc.h"
        } else {
#line 50 "../hw/misc/trace-events"
            qemu_log("ecc_mem_writel_mer " "Write memory enable 0x%08x" "\n", val);
#line 1648 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_writel_mer(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_mer(val);
    }
}

#define TRACE_ECC_MEM_WRITEL_MDR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_MDR) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_mdr(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_MDR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 51 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_writel_mdr " "Write memory delay 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1675 "trace/trace-hw_misc.h"
        } else {
#line 51 "../hw/misc/trace-events"
            qemu_log("ecc_mem_writel_mdr " "Write memory delay 0x%08x" "\n", val);
#line 1679 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_writel_mdr(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_mdr(val);
    }
}

#define TRACE_ECC_MEM_WRITEL_MFSR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_MFSR) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_mfsr(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_MFSR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 52 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_writel_mfsr " "Write memory fault status 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1706 "trace/trace-hw_misc.h"
        } else {
#line 52 "../hw/misc/trace-events"
            qemu_log("ecc_mem_writel_mfsr " "Write memory fault status 0x%08x" "\n", val);
#line 1710 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_writel_mfsr(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_mfsr(val);
    }
}

#define TRACE_ECC_MEM_WRITEL_VCR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_VCR) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_vcr(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_VCR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 53 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_writel_vcr " "Write slot configuration 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1737 "trace/trace-hw_misc.h"
        } else {
#line 53 "../hw/misc/trace-events"
            qemu_log("ecc_mem_writel_vcr " "Write slot configuration 0x%08x" "\n", val);
#line 1741 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_writel_vcr(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_vcr(val);
    }
}

#define TRACE_ECC_MEM_WRITEL_DR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_DR) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_dr(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_DR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 54 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_writel_dr " "Write diagnostic 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1768 "trace/trace-hw_misc.h"
        } else {
#line 54 "../hw/misc/trace-events"
            qemu_log("ecc_mem_writel_dr " "Write diagnostic 0x%08x" "\n", val);
#line 1772 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_writel_dr(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_dr(val);
    }
}

#define TRACE_ECC_MEM_WRITEL_ECR0_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_ECR0) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_ecr0(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_ECR0) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 55 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_writel_ecr0 " "Write event count 1 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1799 "trace/trace-hw_misc.h"
        } else {
#line 55 "../hw/misc/trace-events"
            qemu_log("ecc_mem_writel_ecr0 " "Write event count 1 0x%08x" "\n", val);
#line 1803 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_writel_ecr0(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_ecr0(val);
    }
}

#define TRACE_ECC_MEM_WRITEL_ECR1_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_ECR1) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_ecr1(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_ECR1) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 56 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_writel_ecr1 " "Write event count 2 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1830 "trace/trace-hw_misc.h"
        } else {
#line 56 "../hw/misc/trace-events"
            qemu_log("ecc_mem_writel_ecr1 " "Write event count 2 0x%08x" "\n", val);
#line 1834 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_writel_ecr1(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_ecr1(val);
    }
}

#define TRACE_ECC_MEM_READL_MER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_MER) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_mer(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_MER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 57 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_readl_mer " "Read memory enable 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1861 "trace/trace-hw_misc.h"
        } else {
#line 57 "../hw/misc/trace-events"
            qemu_log("ecc_mem_readl_mer " "Read memory enable 0x%08x" "\n", ret);
#line 1865 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_readl_mer(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_mer(ret);
    }
}

#define TRACE_ECC_MEM_READL_MDR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_MDR) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_mdr(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_MDR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 58 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_readl_mdr " "Read memory delay 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1892 "trace/trace-hw_misc.h"
        } else {
#line 58 "../hw/misc/trace-events"
            qemu_log("ecc_mem_readl_mdr " "Read memory delay 0x%08x" "\n", ret);
#line 1896 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_readl_mdr(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_mdr(ret);
    }
}

#define TRACE_ECC_MEM_READL_MFSR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_MFSR) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_mfsr(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_MFSR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 59 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_readl_mfsr " "Read memory fault status 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1923 "trace/trace-hw_misc.h"
        } else {
#line 59 "../hw/misc/trace-events"
            qemu_log("ecc_mem_readl_mfsr " "Read memory fault status 0x%08x" "\n", ret);
#line 1927 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_readl_mfsr(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_mfsr(ret);
    }
}

#define TRACE_ECC_MEM_READL_VCR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_VCR) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_vcr(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_VCR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 60 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_readl_vcr " "Read slot configuration 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1954 "trace/trace-hw_misc.h"
        } else {
#line 60 "../hw/misc/trace-events"
            qemu_log("ecc_mem_readl_vcr " "Read slot configuration 0x%08x" "\n", ret);
#line 1958 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_readl_vcr(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_vcr(ret);
    }
}

#define TRACE_ECC_MEM_READL_MFAR0_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_MFAR0) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_mfar0(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_MFAR0) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 61 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_readl_mfar0 " "Read memory fault address 0 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1985 "trace/trace-hw_misc.h"
        } else {
#line 61 "../hw/misc/trace-events"
            qemu_log("ecc_mem_readl_mfar0 " "Read memory fault address 0 0x%08x" "\n", ret);
#line 1989 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_readl_mfar0(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_mfar0(ret);
    }
}

#define TRACE_ECC_MEM_READL_MFAR1_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_MFAR1) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_mfar1(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_MFAR1) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 62 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_readl_mfar1 " "Read memory fault address 1 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 2016 "trace/trace-hw_misc.h"
        } else {
#line 62 "../hw/misc/trace-events"
            qemu_log("ecc_mem_readl_mfar1 " "Read memory fault address 1 0x%08x" "\n", ret);
#line 2020 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_readl_mfar1(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_mfar1(ret);
    }
}

#define TRACE_ECC_MEM_READL_DR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_DR) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_dr(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_DR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 63 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_readl_dr " "Read diagnostic 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 2047 "trace/trace-hw_misc.h"
        } else {
#line 63 "../hw/misc/trace-events"
            qemu_log("ecc_mem_readl_dr " "Read diagnostic 0x%08x" "\n", ret);
#line 2051 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_readl_dr(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_dr(ret);
    }
}

#define TRACE_ECC_MEM_READL_ECR0_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_ECR0) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_ecr0(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_ECR0) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 64 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_readl_ecr0 " "Read event count 1 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 2078 "trace/trace-hw_misc.h"
        } else {
#line 64 "../hw/misc/trace-events"
            qemu_log("ecc_mem_readl_ecr0 " "Read event count 1 0x%08x" "\n", ret);
#line 2082 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_readl_ecr0(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_ecr0(ret);
    }
}

#define TRACE_ECC_MEM_READL_ECR1_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_ECR1) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_ecr1(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_ECR1) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 65 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_readl_ecr1 " "Read event count 2 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 2109 "trace/trace-hw_misc.h"
        } else {
#line 65 "../hw/misc/trace-events"
            qemu_log("ecc_mem_readl_ecr1 " "Read event count 2 0x%08x" "\n", ret);
#line 2113 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_readl_ecr1(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_ecr1(ret);
    }
}

#define TRACE_ECC_DIAG_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_DIAG_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_ecc_diag_mem_writeb(uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_DIAG_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 66 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_diag_mem_writeb " "Write diagnostic %"PRId64" = 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 2140 "trace/trace-hw_misc.h"
        } else {
#line 66 "../hw/misc/trace-events"
            qemu_log("ecc_diag_mem_writeb " "Write diagnostic %"PRId64" = 0x%02x" "\n", addr, val);
#line 2144 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_diag_mem_writeb(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_diag_mem_writeb(addr, val);
    }
}

#define TRACE_ECC_DIAG_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_DIAG_MEM_READB) || \
    false)

static inline void _nocheck__trace_ecc_diag_mem_readb(uint64_t addr, uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_DIAG_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 67 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_diag_mem_readb " "Read diagnostic %"PRId64"= 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, ret);
#line 2171 "trace/trace-hw_misc.h"
        } else {
#line 67 "../hw/misc/trace-events"
            qemu_log("ecc_diag_mem_readb " "Read diagnostic %"PRId64"= 0x%02x" "\n", addr, ret);
#line 2175 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_diag_mem_readb(uint64_t addr, uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_diag_mem_readb(addr, ret);
    }
}

#define TRACE_EMPTY_SLOT_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_EMPTY_SLOT_WRITE) || \
    false)

static inline void _nocheck__trace_empty_slot_write(uint64_t addr, unsigned width, uint64_t value, unsigned size, const char * name)
{
    if (trace_event_get_state(TRACE_EMPTY_SLOT_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 70 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:empty_slot_write " "wr addr:0x%04"PRIx64" data:0x%0*"PRIx64" size %u [%s]" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, width, value, size, name);
#line 2202 "trace/trace-hw_misc.h"
        } else {
#line 70 "../hw/misc/trace-events"
            qemu_log("empty_slot_write " "wr addr:0x%04"PRIx64" data:0x%0*"PRIx64" size %u [%s]" "\n", addr, width, value, size, name);
#line 2206 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_empty_slot_write(uint64_t addr, unsigned width, uint64_t value, unsigned size, const char * name)
{
    if (true) {
        _nocheck__trace_empty_slot_write(addr, width, value, size, name);
    }
}

#define TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE) || \
    false)

static inline void _nocheck__trace_slavio_misc_update_irq_raise(void)
{
    if (trace_event_get_state(TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 73 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_misc_update_irq_raise " "Raise IRQ" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2233 "trace/trace-hw_misc.h"
        } else {
#line 73 "../hw/misc/trace-events"
            qemu_log("slavio_misc_update_irq_raise " "Raise IRQ" "\n");
#line 2237 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_misc_update_irq_raise(void)
{
    if (true) {
        _nocheck__trace_slavio_misc_update_irq_raise();
    }
}

#define TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER) || \
    false)

static inline void _nocheck__trace_slavio_misc_update_irq_lower(void)
{
    if (trace_event_get_state(TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 74 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_misc_update_irq_lower " "Lower IRQ" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2264 "trace/trace-hw_misc.h"
        } else {
#line 74 "../hw/misc/trace-events"
            qemu_log("slavio_misc_update_irq_lower " "Lower IRQ" "\n");
#line 2268 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_misc_update_irq_lower(void)
{
    if (true) {
        _nocheck__trace_slavio_misc_update_irq_lower();
    }
}

#define TRACE_SLAVIO_SET_POWER_FAIL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_SET_POWER_FAIL) || \
    false)

static inline void _nocheck__trace_slavio_set_power_fail(int power_failing, uint8_t config)
{
    if (trace_event_get_state(TRACE_SLAVIO_SET_POWER_FAIL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 75 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_set_power_fail " "Power fail: %d, config: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , power_failing, config);
#line 2295 "trace/trace-hw_misc.h"
        } else {
#line 75 "../hw/misc/trace-events"
            qemu_log("slavio_set_power_fail " "Power fail: %d, config: %d" "\n", power_failing, config);
#line 2299 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_set_power_fail(int power_failing, uint8_t config)
{
    if (true) {
        _nocheck__trace_slavio_set_power_fail(power_failing, config);
    }
}

#define TRACE_SLAVIO_CFG_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_CFG_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_slavio_cfg_mem_writeb(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_CFG_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 76 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_cfg_mem_writeb " "Write config 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 2326 "trace/trace-hw_misc.h"
        } else {
#line 76 "../hw/misc/trace-events"
            qemu_log("slavio_cfg_mem_writeb " "Write config 0x%02x" "\n", val);
#line 2330 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_cfg_mem_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_cfg_mem_writeb(val);
    }
}

#define TRACE_SLAVIO_CFG_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_CFG_MEM_READB) || \
    false)

static inline void _nocheck__trace_slavio_cfg_mem_readb(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_CFG_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 77 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_cfg_mem_readb " "Read config 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 2357 "trace/trace-hw_misc.h"
        } else {
#line 77 "../hw/misc/trace-events"
            qemu_log("slavio_cfg_mem_readb " "Read config 0x%02x" "\n", ret);
#line 2361 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_cfg_mem_readb(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_cfg_mem_readb(ret);
    }
}

#define TRACE_SLAVIO_DIAG_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_DIAG_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_slavio_diag_mem_writeb(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_DIAG_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 78 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_diag_mem_writeb " "Write diag 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 2388 "trace/trace-hw_misc.h"
        } else {
#line 78 "../hw/misc/trace-events"
            qemu_log("slavio_diag_mem_writeb " "Write diag 0x%02x" "\n", val);
#line 2392 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_diag_mem_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_diag_mem_writeb(val);
    }
}

#define TRACE_SLAVIO_DIAG_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_DIAG_MEM_READB) || \
    false)

static inline void _nocheck__trace_slavio_diag_mem_readb(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_DIAG_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 79 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_diag_mem_readb " "Read diag 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 2419 "trace/trace-hw_misc.h"
        } else {
#line 79 "../hw/misc/trace-events"
            qemu_log("slavio_diag_mem_readb " "Read diag 0x%02x" "\n", ret);
#line 2423 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_diag_mem_readb(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_diag_mem_readb(ret);
    }
}

#define TRACE_SLAVIO_MDM_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_MDM_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_slavio_mdm_mem_writeb(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_MDM_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 80 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_mdm_mem_writeb " "Write modem control 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 2450 "trace/trace-hw_misc.h"
        } else {
#line 80 "../hw/misc/trace-events"
            qemu_log("slavio_mdm_mem_writeb " "Write modem control 0x%02x" "\n", val);
#line 2454 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_mdm_mem_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_mdm_mem_writeb(val);
    }
}

#define TRACE_SLAVIO_MDM_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_MDM_MEM_READB) || \
    false)

static inline void _nocheck__trace_slavio_mdm_mem_readb(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_MDM_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 81 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_mdm_mem_readb " "Read modem control 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 2481 "trace/trace-hw_misc.h"
        } else {
#line 81 "../hw/misc/trace-events"
            qemu_log("slavio_mdm_mem_readb " "Read modem control 0x%02x" "\n", ret);
#line 2485 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_mdm_mem_readb(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_mdm_mem_readb(ret);
    }
}

#define TRACE_SLAVIO_AUX1_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_AUX1_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_slavio_aux1_mem_writeb(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_AUX1_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 82 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_aux1_mem_writeb " "Write aux1 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 2512 "trace/trace-hw_misc.h"
        } else {
#line 82 "../hw/misc/trace-events"
            qemu_log("slavio_aux1_mem_writeb " "Write aux1 0x%02x" "\n", val);
#line 2516 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_aux1_mem_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_aux1_mem_writeb(val);
    }
}

#define TRACE_SLAVIO_AUX1_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_AUX1_MEM_READB) || \
    false)

static inline void _nocheck__trace_slavio_aux1_mem_readb(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_AUX1_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 83 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_aux1_mem_readb " "Read aux1 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 2543 "trace/trace-hw_misc.h"
        } else {
#line 83 "../hw/misc/trace-events"
            qemu_log("slavio_aux1_mem_readb " "Read aux1 0x%02x" "\n", ret);
#line 2547 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_aux1_mem_readb(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_aux1_mem_readb(ret);
    }
}

#define TRACE_SLAVIO_AUX2_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_AUX2_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_slavio_aux2_mem_writeb(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_AUX2_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 84 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_aux2_mem_writeb " "Write aux2 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 2574 "trace/trace-hw_misc.h"
        } else {
#line 84 "../hw/misc/trace-events"
            qemu_log("slavio_aux2_mem_writeb " "Write aux2 0x%02x" "\n", val);
#line 2578 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_aux2_mem_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_aux2_mem_writeb(val);
    }
}

#define TRACE_SLAVIO_AUX2_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_AUX2_MEM_READB) || \
    false)

static inline void _nocheck__trace_slavio_aux2_mem_readb(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_AUX2_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 85 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_aux2_mem_readb " "Read aux2 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 2605 "trace/trace-hw_misc.h"
        } else {
#line 85 "../hw/misc/trace-events"
            qemu_log("slavio_aux2_mem_readb " "Read aux2 0x%02x" "\n", ret);
#line 2609 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_aux2_mem_readb(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_aux2_mem_readb(ret);
    }
}

#define TRACE_APC_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APC_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_apc_mem_writeb(uint32_t val)
{
    if (trace_event_get_state(TRACE_APC_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 86 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:apc_mem_writeb " "Write power management 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 2636 "trace/trace-hw_misc.h"
        } else {
#line 86 "../hw/misc/trace-events"
            qemu_log("apc_mem_writeb " "Write power management 0x%02x" "\n", val);
#line 2640 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_apc_mem_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_apc_mem_writeb(val);
    }
}

#define TRACE_APC_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APC_MEM_READB) || \
    false)

static inline void _nocheck__trace_apc_mem_readb(uint32_t ret)
{
    if (trace_event_get_state(TRACE_APC_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 87 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:apc_mem_readb " "Read power management 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 2667 "trace/trace-hw_misc.h"
        } else {
#line 87 "../hw/misc/trace-events"
            qemu_log("apc_mem_readb " "Read power management 0x%02x" "\n", ret);
#line 2671 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_apc_mem_readb(uint32_t ret)
{
    if (true) {
        _nocheck__trace_apc_mem_readb(ret);
    }
}

#define TRACE_SLAVIO_SYSCTRL_MEM_WRITEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_SYSCTRL_MEM_WRITEL) || \
    false)

static inline void _nocheck__trace_slavio_sysctrl_mem_writel(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_SYSCTRL_MEM_WRITEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 88 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_sysctrl_mem_writel " "Write system control 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 2698 "trace/trace-hw_misc.h"
        } else {
#line 88 "../hw/misc/trace-events"
            qemu_log("slavio_sysctrl_mem_writel " "Write system control 0x%08x" "\n", val);
#line 2702 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_sysctrl_mem_writel(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_sysctrl_mem_writel(val);
    }
}

#define TRACE_SLAVIO_SYSCTRL_MEM_READL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_SYSCTRL_MEM_READL) || \
    false)

static inline void _nocheck__trace_slavio_sysctrl_mem_readl(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_SYSCTRL_MEM_READL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 89 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_sysctrl_mem_readl " "Read system control 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 2729 "trace/trace-hw_misc.h"
        } else {
#line 89 "../hw/misc/trace-events"
            qemu_log("slavio_sysctrl_mem_readl " "Read system control 0x%08x" "\n", ret);
#line 2733 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_sysctrl_mem_readl(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_sysctrl_mem_readl(ret);
    }
}

#define TRACE_SLAVIO_LED_MEM_WRITEW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_LED_MEM_WRITEW) || \
    false)

static inline void _nocheck__trace_slavio_led_mem_writew(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_LED_MEM_WRITEW) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 90 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_led_mem_writew " "Write diagnostic LED 0x%04x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 2760 "trace/trace-hw_misc.h"
        } else {
#line 90 "../hw/misc/trace-events"
            qemu_log("slavio_led_mem_writew " "Write diagnostic LED 0x%04x" "\n", val);
#line 2764 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_led_mem_writew(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_led_mem_writew(val);
    }
}

#define TRACE_SLAVIO_LED_MEM_READW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_LED_MEM_READW) || \
    false)

static inline void _nocheck__trace_slavio_led_mem_readw(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_LED_MEM_READW) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 91 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_led_mem_readw " "Read diagnostic LED 0x%04x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 2791 "trace/trace-hw_misc.h"
        } else {
#line 91 "../hw/misc/trace-events"
            qemu_log("slavio_led_mem_readw " "Read diagnostic LED 0x%04x" "\n", ret);
#line 2795 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_led_mem_readw(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_led_mem_readw(ret);
    }
}

#define TRACE_ASPEED_SCU_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_SCU_WRITE) || \
    false)

static inline void _nocheck__trace_aspeed_scu_write(uint64_t offset, unsigned size, uint32_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_SCU_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 94 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_scu_write " "To 0x%" PRIx64 " of size %u: 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, size, data);
#line 2822 "trace/trace-hw_misc.h"
        } else {
#line 94 "../hw/misc/trace-events"
            qemu_log("aspeed_scu_write " "To 0x%" PRIx64 " of size %u: 0x%" PRIx32 "\n", offset, size, data);
#line 2826 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_aspeed_scu_write(uint64_t offset, unsigned size, uint32_t data)
{
    if (true) {
        _nocheck__trace_aspeed_scu_write(offset, size, data);
    }
}

#define TRACE_ASPEED_SCU_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_SCU_READ) || \
    false)

static inline void _nocheck__trace_aspeed_scu_read(uint64_t offset, unsigned size, uint32_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_SCU_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 95 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_scu_read " "To 0x%" PRIx64 " of size %u: 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, size, data);
#line 2853 "trace/trace-hw_misc.h"
        } else {
#line 95 "../hw/misc/trace-events"
            qemu_log("aspeed_scu_read " "To 0x%" PRIx64 " of size %u: 0x%" PRIx32 "\n", offset, size, data);
#line 2857 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_aspeed_scu_read(uint64_t offset, unsigned size, uint32_t data)
{
    if (true) {
        _nocheck__trace_aspeed_scu_read(offset, size, data);
    }
}

#define TRACE_MPS2_SCC_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_SCC_READ) || \
    false)

static inline void _nocheck__trace_mps2_scc_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_MPS2_SCC_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 98 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mps2_scc_read " "MPS2 SCC read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 2884 "trace/trace-hw_misc.h"
        } else {
#line 98 "../hw/misc/trace-events"
            qemu_log("mps2_scc_read " "MPS2 SCC read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 2888 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mps2_scc_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_mps2_scc_read(offset, data, size);
    }
}

#define TRACE_MPS2_SCC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_SCC_WRITE) || \
    false)

static inline void _nocheck__trace_mps2_scc_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_MPS2_SCC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 99 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mps2_scc_write " "MPS2 SCC write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 2915 "trace/trace-hw_misc.h"
        } else {
#line 99 "../hw/misc/trace-events"
            qemu_log("mps2_scc_write " "MPS2 SCC write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 2919 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mps2_scc_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_mps2_scc_write(offset, data, size);
    }
}

#define TRACE_MPS2_SCC_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_SCC_RESET) || \
    false)

static inline void _nocheck__trace_mps2_scc_reset(void)
{
    if (trace_event_get_state(TRACE_MPS2_SCC_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 100 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mps2_scc_reset " "MPS2 SCC: reset" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2946 "trace/trace-hw_misc.h"
        } else {
#line 100 "../hw/misc/trace-events"
            qemu_log("mps2_scc_reset " "MPS2 SCC: reset" "\n");
#line 2950 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mps2_scc_reset(void)
{
    if (true) {
        _nocheck__trace_mps2_scc_reset();
    }
}

#define TRACE_MPS2_SCC_CFG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_SCC_CFG_WRITE) || \
    false)

static inline void _nocheck__trace_mps2_scc_cfg_write(unsigned function, unsigned device, uint32_t value)
{
    if (trace_event_get_state(TRACE_MPS2_SCC_CFG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 101 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mps2_scc_cfg_write " "MPS2 SCC config write: function %d device %d data 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , function, device, value);
#line 2977 "trace/trace-hw_misc.h"
        } else {
#line 101 "../hw/misc/trace-events"
            qemu_log("mps2_scc_cfg_write " "MPS2 SCC config write: function %d device %d data 0x%" PRIx32 "\n", function, device, value);
#line 2981 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mps2_scc_cfg_write(unsigned function, unsigned device, uint32_t value)
{
    if (true) {
        _nocheck__trace_mps2_scc_cfg_write(function, device, value);
    }
}

#define TRACE_MPS2_SCC_CFG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_SCC_CFG_READ) || \
    false)

static inline void _nocheck__trace_mps2_scc_cfg_read(unsigned function, unsigned device, uint32_t value)
{
    if (trace_event_get_state(TRACE_MPS2_SCC_CFG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 102 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mps2_scc_cfg_read " "MPS2 SCC config read: function %d device %d data 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , function, device, value);
#line 3008 "trace/trace-hw_misc.h"
        } else {
#line 102 "../hw/misc/trace-events"
            qemu_log("mps2_scc_cfg_read " "MPS2 SCC config read: function %d device %d data 0x%" PRIx32 "\n", function, device, value);
#line 3012 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mps2_scc_cfg_read(unsigned function, unsigned device, uint32_t value)
{
    if (true) {
        _nocheck__trace_mps2_scc_cfg_read(function, device, value);
    }
}

#define TRACE_MPS2_FPGAIO_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_FPGAIO_READ) || \
    false)

static inline void _nocheck__trace_mps2_fpgaio_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_MPS2_FPGAIO_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 105 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mps2_fpgaio_read " "MPS2 FPGAIO read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 3039 "trace/trace-hw_misc.h"
        } else {
#line 105 "../hw/misc/trace-events"
            qemu_log("mps2_fpgaio_read " "MPS2 FPGAIO read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 3043 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mps2_fpgaio_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_mps2_fpgaio_read(offset, data, size);
    }
}

#define TRACE_MPS2_FPGAIO_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_FPGAIO_WRITE) || \
    false)

static inline void _nocheck__trace_mps2_fpgaio_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_MPS2_FPGAIO_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 106 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mps2_fpgaio_write " "MPS2 FPGAIO write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 3070 "trace/trace-hw_misc.h"
        } else {
#line 106 "../hw/misc/trace-events"
            qemu_log("mps2_fpgaio_write " "MPS2 FPGAIO write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 3074 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mps2_fpgaio_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_mps2_fpgaio_write(offset, data, size);
    }
}

#define TRACE_MPS2_FPGAIO_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_FPGAIO_RESET) || \
    false)

static inline void _nocheck__trace_mps2_fpgaio_reset(void)
{
    if (trace_event_get_state(TRACE_MPS2_FPGAIO_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 107 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mps2_fpgaio_reset " "MPS2 FPGAIO: reset" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3101 "trace/trace-hw_misc.h"
        } else {
#line 107 "../hw/misc/trace-events"
            qemu_log("mps2_fpgaio_reset " "MPS2 FPGAIO: reset" "\n");
#line 3105 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mps2_fpgaio_reset(void)
{
    if (true) {
        _nocheck__trace_mps2_fpgaio_reset();
    }
}

#define TRACE_MSF2_SYSREG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MSF2_SYSREG_WRITE) || \
    false)

static inline void _nocheck__trace_msf2_sysreg_write(uint64_t offset, uint32_t val, uint32_t prev)
{
    if (trace_event_get_state(TRACE_MSF2_SYSREG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 110 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:msf2_sysreg_write " "msf2-sysreg write: addr 0x%08" PRIx64 " data 0x%" PRIx32 " prev 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, val, prev);
#line 3132 "trace/trace-hw_misc.h"
        } else {
#line 110 "../hw/misc/trace-events"
            qemu_log("msf2_sysreg_write " "msf2-sysreg write: addr 0x%08" PRIx64 " data 0x%" PRIx32 " prev 0x%" PRIx32 "\n", offset, val, prev);
#line 3136 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_msf2_sysreg_write(uint64_t offset, uint32_t val, uint32_t prev)
{
    if (true) {
        _nocheck__trace_msf2_sysreg_write(offset, val, prev);
    }
}

#define TRACE_MSF2_SYSREG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MSF2_SYSREG_READ) || \
    false)

static inline void _nocheck__trace_msf2_sysreg_read(uint64_t offset, uint32_t val)
{
    if (trace_event_get_state(TRACE_MSF2_SYSREG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 111 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:msf2_sysreg_read " "msf2-sysreg read: addr 0x%08" PRIx64 " data 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, val);
#line 3163 "trace/trace-hw_misc.h"
        } else {
#line 111 "../hw/misc/trace-events"
            qemu_log("msf2_sysreg_read " "msf2-sysreg read: addr 0x%08" PRIx64 " data 0x%08" PRIx32 "\n", offset, val);
#line 3167 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_msf2_sysreg_read(uint64_t offset, uint32_t val)
{
    if (true) {
        _nocheck__trace_msf2_sysreg_read(offset, val);
    }
}

#define TRACE_MSF2_SYSREG_WRITE_PLL_STATUS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MSF2_SYSREG_WRITE_PLL_STATUS) || \
    false)

static inline void _nocheck__trace_msf2_sysreg_write_pll_status(void)
{
    if (trace_event_get_state(TRACE_MSF2_SYSREG_WRITE_PLL_STATUS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 112 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:msf2_sysreg_write_pll_status " "Invalid write to read only PLL status register" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3194 "trace/trace-hw_misc.h"
        } else {
#line 112 "../hw/misc/trace-events"
            qemu_log("msf2_sysreg_write_pll_status " "Invalid write to read only PLL status register" "\n");
#line 3198 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_msf2_sysreg_write_pll_status(void)
{
    if (true) {
        _nocheck__trace_msf2_sysreg_write_pll_status();
    }
}

#define TRACE_IMX7_GPR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IMX7_GPR_READ) || \
    false)

static inline void _nocheck__trace_imx7_gpr_read(uint64_t offset)
{
    if (trace_event_get_state(TRACE_IMX7_GPR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 115 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:imx7_gpr_read " "addr 0x%08" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset);
#line 3225 "trace/trace-hw_misc.h"
        } else {
#line 115 "../hw/misc/trace-events"
            qemu_log("imx7_gpr_read " "addr 0x%08" PRIx64 "\n", offset);
#line 3229 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_imx7_gpr_read(uint64_t offset)
{
    if (true) {
        _nocheck__trace_imx7_gpr_read(offset);
    }
}

#define TRACE_IMX7_GPR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IMX7_GPR_WRITE) || \
    false)

static inline void _nocheck__trace_imx7_gpr_write(uint64_t offset, uint64_t value)
{
    if (trace_event_get_state(TRACE_IMX7_GPR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 116 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:imx7_gpr_write " "addr 0x%08" PRIx64 "value 0x%08" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value);
#line 3256 "trace/trace-hw_misc.h"
        } else {
#line 116 "../hw/misc/trace-events"
            qemu_log("imx7_gpr_write " "addr 0x%08" PRIx64 "value 0x%08" PRIx64 "\n", offset, value);
#line 3260 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_imx7_gpr_write(uint64_t offset, uint64_t value)
{
    if (true) {
        _nocheck__trace_imx7_gpr_write(offset, value);
    }
}

#define TRACE_MOS6522_SET_COUNTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MOS6522_SET_COUNTER) || \
    false)

static inline void _nocheck__trace_mos6522_set_counter(int index, unsigned int val)
{
    if (trace_event_get_state(TRACE_MOS6522_SET_COUNTER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 119 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mos6522_set_counter " "T%d.counter=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , index, val);
#line 3287 "trace/trace-hw_misc.h"
        } else {
#line 119 "../hw/misc/trace-events"
            qemu_log("mos6522_set_counter " "T%d.counter=%d" "\n", index, val);
#line 3291 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mos6522_set_counter(int index, unsigned int val)
{
    if (true) {
        _nocheck__trace_mos6522_set_counter(index, val);
    }
}

#define TRACE_MOS6522_GET_NEXT_IRQ_TIME_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MOS6522_GET_NEXT_IRQ_TIME) || \
    false)

static inline void _nocheck__trace_mos6522_get_next_irq_time(uint16_t latch, int64_t d, int64_t delta)
{
    if (trace_event_get_state(TRACE_MOS6522_GET_NEXT_IRQ_TIME) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 120 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mos6522_get_next_irq_time " "latch=%d counter=0x%"PRIx64 " delta_next=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , latch, d, delta);
#line 3318 "trace/trace-hw_misc.h"
        } else {
#line 120 "../hw/misc/trace-events"
            qemu_log("mos6522_get_next_irq_time " "latch=%d counter=0x%"PRIx64 " delta_next=0x%"PRIx64 "\n", latch, d, delta);
#line 3322 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mos6522_get_next_irq_time(uint16_t latch, int64_t d, int64_t delta)
{
    if (true) {
        _nocheck__trace_mos6522_get_next_irq_time(latch, d, delta);
    }
}

#define TRACE_MOS6522_SET_SR_INT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MOS6522_SET_SR_INT) || \
    false)

static inline void _nocheck__trace_mos6522_set_sr_int(void)
{
    if (trace_event_get_state(TRACE_MOS6522_SET_SR_INT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 121 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mos6522_set_sr_int " "set sr_int" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3349 "trace/trace-hw_misc.h"
        } else {
#line 121 "../hw/misc/trace-events"
            qemu_log("mos6522_set_sr_int " "set sr_int" "\n");
#line 3353 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mos6522_set_sr_int(void)
{
    if (true) {
        _nocheck__trace_mos6522_set_sr_int();
    }
}

#define TRACE_MOS6522_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MOS6522_WRITE) || \
    false)

static inline void _nocheck__trace_mos6522_write(uint64_t addr, const char * name, uint64_t val)
{
    if (trace_event_get_state(TRACE_MOS6522_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 122 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mos6522_write " "reg=0x%"PRIx64 " [%s] val=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, name, val);
#line 3380 "trace/trace-hw_misc.h"
        } else {
#line 122 "../hw/misc/trace-events"
            qemu_log("mos6522_write " "reg=0x%"PRIx64 " [%s] val=0x%"PRIx64 "\n", addr, name, val);
#line 3384 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mos6522_write(uint64_t addr, const char * name, uint64_t val)
{
    if (true) {
        _nocheck__trace_mos6522_write(addr, name, val);
    }
}

#define TRACE_MOS6522_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MOS6522_READ) || \
    false)

static inline void _nocheck__trace_mos6522_read(uint64_t addr, const char * name, unsigned val)
{
    if (trace_event_get_state(TRACE_MOS6522_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 123 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mos6522_read " "reg=0x%"PRIx64 " [%s] val=0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, name, val);
#line 3411 "trace/trace-hw_misc.h"
        } else {
#line 123 "../hw/misc/trace-events"
            qemu_log("mos6522_read " "reg=0x%"PRIx64 " [%s] val=0x%x" "\n", addr, name, val);
#line 3415 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mos6522_read(uint64_t addr, const char * name, unsigned val)
{
    if (true) {
        _nocheck__trace_mos6522_read(addr, name, val);
    }
}

#define TRACE_NPCM7XX_CLK_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_CLK_READ) || \
    false)

static inline void _nocheck__trace_npcm7xx_clk_read(uint64_t offset, uint32_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_CLK_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 126 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_clk_read " " offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value);
#line 3442 "trace/trace-hw_misc.h"
        } else {
#line 126 "../hw/misc/trace-events"
            qemu_log("npcm7xx_clk_read " " offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n", offset, value);
#line 3446 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_clk_read(uint64_t offset, uint32_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_clk_read(offset, value);
    }
}

#define TRACE_NPCM7XX_CLK_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_CLK_WRITE) || \
    false)

static inline void _nocheck__trace_npcm7xx_clk_write(uint64_t offset, uint32_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_CLK_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 127 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_clk_write " "offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value);
#line 3473 "trace/trace-hw_misc.h"
        } else {
#line 127 "../hw/misc/trace-events"
            qemu_log("npcm7xx_clk_write " "offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n", offset, value);
#line 3477 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_clk_write(uint64_t offset, uint32_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_clk_write(offset, value);
    }
}

#define TRACE_NPCM7XX_GCR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_GCR_READ) || \
    false)

static inline void _nocheck__trace_npcm7xx_gcr_read(uint64_t offset, uint32_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_GCR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 130 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_gcr_read " " offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value);
#line 3504 "trace/trace-hw_misc.h"
        } else {
#line 130 "../hw/misc/trace-events"
            qemu_log("npcm7xx_gcr_read " " offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n", offset, value);
#line 3508 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_gcr_read(uint64_t offset, uint32_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_gcr_read(offset, value);
    }
}

#define TRACE_NPCM7XX_GCR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_GCR_WRITE) || \
    false)

static inline void _nocheck__trace_npcm7xx_gcr_write(uint64_t offset, uint32_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_GCR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 131 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_gcr_write " "offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value);
#line 3535 "trace/trace-hw_misc.h"
        } else {
#line 131 "../hw/misc/trace-events"
            qemu_log("npcm7xx_gcr_write " "offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n", offset, value);
#line 3539 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_gcr_write(uint64_t offset, uint32_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_gcr_write(offset, value);
    }
}

#define TRACE_NPCM7XX_MFT_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_MFT_READ) || \
    false)

static inline void _nocheck__trace_npcm7xx_mft_read(const char * name, uint64_t offset, uint16_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_MFT_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 134 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_mft_read " "%s: offset: 0x%04" PRIx64 " value: 0x%04" PRIx16 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, offset, value);
#line 3566 "trace/trace-hw_misc.h"
        } else {
#line 134 "../hw/misc/trace-events"
            qemu_log("npcm7xx_mft_read " "%s: offset: 0x%04" PRIx64 " value: 0x%04" PRIx16 "\n", name, offset, value);
#line 3570 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_mft_read(const char * name, uint64_t offset, uint16_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_mft_read(name, offset, value);
    }
}

#define TRACE_NPCM7XX_MFT_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_MFT_WRITE) || \
    false)

static inline void _nocheck__trace_npcm7xx_mft_write(const char * name, uint64_t offset, uint16_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_MFT_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 135 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_mft_write " "%s: offset: 0x%04" PRIx64 " value: 0x%04" PRIx16 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, offset, value);
#line 3597 "trace/trace-hw_misc.h"
        } else {
#line 135 "../hw/misc/trace-events"
            qemu_log("npcm7xx_mft_write " "%s: offset: 0x%04" PRIx64 " value: 0x%04" PRIx16 "\n", name, offset, value);
#line 3601 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_mft_write(const char * name, uint64_t offset, uint16_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_mft_write(name, offset, value);
    }
}

#define TRACE_NPCM7XX_MFT_RPM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_MFT_RPM) || \
    false)

static inline void _nocheck__trace_npcm7xx_mft_rpm(const char * clock, uint32_t clock_hz, int state, int32_t cnt, uint32_t rpm, uint32_t duty)
{
    if (trace_event_get_state(TRACE_NPCM7XX_MFT_RPM) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 136 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_mft_rpm " " fan clk: %s clock_hz: %" PRIu32 ", state: %d, cnt: %" PRIi32 ", rpm: %" PRIu32 ", duty: %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , clock, clock_hz, state, cnt, rpm, duty);
#line 3628 "trace/trace-hw_misc.h"
        } else {
#line 136 "../hw/misc/trace-events"
            qemu_log("npcm7xx_mft_rpm " " fan clk: %s clock_hz: %" PRIu32 ", state: %d, cnt: %" PRIi32 ", rpm: %" PRIu32 ", duty: %" PRIu32 "\n", clock, clock_hz, state, cnt, rpm, duty);
#line 3632 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_mft_rpm(const char * clock, uint32_t clock_hz, int state, int32_t cnt, uint32_t rpm, uint32_t duty)
{
    if (true) {
        _nocheck__trace_npcm7xx_mft_rpm(clock, clock_hz, state, cnt, rpm, duty);
    }
}

#define TRACE_NPCM7XX_MFT_CAPTURE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_MFT_CAPTURE) || \
    false)

static inline void _nocheck__trace_npcm7xx_mft_capture(const char * name, int irq_level)
{
    if (trace_event_get_state(TRACE_NPCM7XX_MFT_CAPTURE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 137 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_mft_capture " "%s: level: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, irq_level);
#line 3659 "trace/trace-hw_misc.h"
        } else {
#line 137 "../hw/misc/trace-events"
            qemu_log("npcm7xx_mft_capture " "%s: level: %d" "\n", name, irq_level);
#line 3663 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_mft_capture(const char * name, int irq_level)
{
    if (true) {
        _nocheck__trace_npcm7xx_mft_capture(name, irq_level);
    }
}

#define TRACE_NPCM7XX_MFT_UPDATE_CLOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_MFT_UPDATE_CLOCK) || \
    false)

static inline void _nocheck__trace_npcm7xx_mft_update_clock(const char * name, uint16_t sel, uint64_t clock_period, uint64_t prescaled_clock_period)
{
    if (trace_event_get_state(TRACE_NPCM7XX_MFT_UPDATE_CLOCK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 138 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_mft_update_clock " "%s: sel: 0x%02" PRIx16 ", period: %" PRIu64 ", prescaled: %" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, sel, clock_period, prescaled_clock_period);
#line 3690 "trace/trace-hw_misc.h"
        } else {
#line 138 "../hw/misc/trace-events"
            qemu_log("npcm7xx_mft_update_clock " "%s: sel: 0x%02" PRIx16 ", period: %" PRIu64 ", prescaled: %" PRIu64 "\n", name, sel, clock_period, prescaled_clock_period);
#line 3694 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_mft_update_clock(const char * name, uint16_t sel, uint64_t clock_period, uint64_t prescaled_clock_period)
{
    if (true) {
        _nocheck__trace_npcm7xx_mft_update_clock(name, sel, clock_period, prescaled_clock_period);
    }
}

#define TRACE_NPCM7XX_MFT_SET_DUTY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_MFT_SET_DUTY) || \
    false)

static inline void _nocheck__trace_npcm7xx_mft_set_duty(const char * name, int n, int value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_MFT_SET_DUTY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 139 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_mft_set_duty " "%s[%d]: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, n, value);
#line 3721 "trace/trace-hw_misc.h"
        } else {
#line 139 "../hw/misc/trace-events"
            qemu_log("npcm7xx_mft_set_duty " "%s[%d]: %d" "\n", name, n, value);
#line 3725 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_mft_set_duty(const char * name, int n, int value)
{
    if (true) {
        _nocheck__trace_npcm7xx_mft_set_duty(name, n, value);
    }
}

#define TRACE_NPCM7XX_RNG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_RNG_READ) || \
    false)

static inline void _nocheck__trace_npcm7xx_rng_read(uint64_t offset, uint64_t value, unsigned size)
{
    if (trace_event_get_state(TRACE_NPCM7XX_RNG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 142 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_rng_read " "offset: 0x%04" PRIx64 " value: 0x%02" PRIx64 " size: %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value, size);
#line 3752 "trace/trace-hw_misc.h"
        } else {
#line 142 "../hw/misc/trace-events"
            qemu_log("npcm7xx_rng_read " "offset: 0x%04" PRIx64 " value: 0x%02" PRIx64 " size: %u" "\n", offset, value, size);
#line 3756 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_rng_read(uint64_t offset, uint64_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_npcm7xx_rng_read(offset, value, size);
    }
}

#define TRACE_NPCM7XX_RNG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_RNG_WRITE) || \
    false)

static inline void _nocheck__trace_npcm7xx_rng_write(uint64_t offset, uint64_t value, unsigned size)
{
    if (trace_event_get_state(TRACE_NPCM7XX_RNG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 143 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_rng_write " "offset: 0x%04" PRIx64 " value: 0x%02" PRIx64 " size: %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value, size);
#line 3783 "trace/trace-hw_misc.h"
        } else {
#line 143 "../hw/misc/trace-events"
            qemu_log("npcm7xx_rng_write " "offset: 0x%04" PRIx64 " value: 0x%02" PRIx64 " size: %u" "\n", offset, value, size);
#line 3787 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_rng_write(uint64_t offset, uint64_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_npcm7xx_rng_write(offset, value, size);
    }
}

#define TRACE_NPCM7XX_PWM_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_PWM_READ) || \
    false)

static inline void _nocheck__trace_npcm7xx_pwm_read(const char * id, uint64_t offset, uint32_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_PWM_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 146 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_pwm_read " "%s offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, offset, value);
#line 3814 "trace/trace-hw_misc.h"
        } else {
#line 146 "../hw/misc/trace-events"
            qemu_log("npcm7xx_pwm_read " "%s offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n", id, offset, value);
#line 3818 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_pwm_read(const char * id, uint64_t offset, uint32_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_pwm_read(id, offset, value);
    }
}

#define TRACE_NPCM7XX_PWM_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_PWM_WRITE) || \
    false)

static inline void _nocheck__trace_npcm7xx_pwm_write(const char * id, uint64_t offset, uint32_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_PWM_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 147 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_pwm_write " "%s offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, offset, value);
#line 3845 "trace/trace-hw_misc.h"
        } else {
#line 147 "../hw/misc/trace-events"
            qemu_log("npcm7xx_pwm_write " "%s offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n", id, offset, value);
#line 3849 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_pwm_write(const char * id, uint64_t offset, uint32_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_pwm_write(id, offset, value);
    }
}

#define TRACE_NPCM7XX_PWM_UPDATE_FREQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_PWM_UPDATE_FREQ) || \
    false)

static inline void _nocheck__trace_npcm7xx_pwm_update_freq(const char * id, uint8_t index, uint32_t old_value, uint32_t new_value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_PWM_UPDATE_FREQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 148 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_pwm_update_freq " "%s pwm[%u] Update Freq: old_freq: %u, new_freq: %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, index, old_value, new_value);
#line 3876 "trace/trace-hw_misc.h"
        } else {
#line 148 "../hw/misc/trace-events"
            qemu_log("npcm7xx_pwm_update_freq " "%s pwm[%u] Update Freq: old_freq: %u, new_freq: %u" "\n", id, index, old_value, new_value);
#line 3880 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_pwm_update_freq(const char * id, uint8_t index, uint32_t old_value, uint32_t new_value)
{
    if (true) {
        _nocheck__trace_npcm7xx_pwm_update_freq(id, index, old_value, new_value);
    }
}

#define TRACE_NPCM7XX_PWM_UPDATE_DUTY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_PWM_UPDATE_DUTY) || \
    false)

static inline void _nocheck__trace_npcm7xx_pwm_update_duty(const char * id, uint8_t index, uint32_t old_value, uint32_t new_value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_PWM_UPDATE_DUTY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 149 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_pwm_update_duty " "%s pwm[%u] Update Duty: old_duty: %u, new_duty: %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, index, old_value, new_value);
#line 3907 "trace/trace-hw_misc.h"
        } else {
#line 149 "../hw/misc/trace-events"
            qemu_log("npcm7xx_pwm_update_duty " "%s pwm[%u] Update Duty: old_duty: %u, new_duty: %u" "\n", id, index, old_value, new_value);
#line 3911 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_pwm_update_duty(const char * id, uint8_t index, uint32_t old_value, uint32_t new_value)
{
    if (true) {
        _nocheck__trace_npcm7xx_pwm_update_duty(id, index, old_value, new_value);
    }
}

#define TRACE_STM32F4XX_SYSCFG_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_STM32F4XX_SYSCFG_SET_IRQ) || \
    false)

static inline void _nocheck__trace_stm32f4xx_syscfg_set_irq(int gpio, int line, int level)
{
    if (trace_event_get_state(TRACE_STM32F4XX_SYSCFG_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 152 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:stm32f4xx_syscfg_set_irq " "Interrupt: GPIO: %d, Line: %d; Level: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , gpio, line, level);
#line 3938 "trace/trace-hw_misc.h"
        } else {
#line 152 "../hw/misc/trace-events"
            qemu_log("stm32f4xx_syscfg_set_irq " "Interrupt: GPIO: %d, Line: %d; Level: %d" "\n", gpio, line, level);
#line 3942 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_stm32f4xx_syscfg_set_irq(int gpio, int line, int level)
{
    if (true) {
        _nocheck__trace_stm32f4xx_syscfg_set_irq(gpio, line, level);
    }
}

#define TRACE_STM32F4XX_PULSE_EXTI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_STM32F4XX_PULSE_EXTI) || \
    false)

static inline void _nocheck__trace_stm32f4xx_pulse_exti(int irq)
{
    if (trace_event_get_state(TRACE_STM32F4XX_PULSE_EXTI) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 153 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:stm32f4xx_pulse_exti " "Pulse EXTI: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq);
#line 3969 "trace/trace-hw_misc.h"
        } else {
#line 153 "../hw/misc/trace-events"
            qemu_log("stm32f4xx_pulse_exti " "Pulse EXTI: %d" "\n", irq);
#line 3973 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_stm32f4xx_pulse_exti(int irq)
{
    if (true) {
        _nocheck__trace_stm32f4xx_pulse_exti(irq);
    }
}

#define TRACE_STM32F4XX_SYSCFG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_STM32F4XX_SYSCFG_READ) || \
    false)

static inline void _nocheck__trace_stm32f4xx_syscfg_read(uint64_t addr)
{
    if (trace_event_get_state(TRACE_STM32F4XX_SYSCFG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 154 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:stm32f4xx_syscfg_read " "reg read: addr: 0x%" PRIx64 " " "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr);
#line 4000 "trace/trace-hw_misc.h"
        } else {
#line 154 "../hw/misc/trace-events"
            qemu_log("stm32f4xx_syscfg_read " "reg read: addr: 0x%" PRIx64 " " "\n", addr);
#line 4004 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_stm32f4xx_syscfg_read(uint64_t addr)
{
    if (true) {
        _nocheck__trace_stm32f4xx_syscfg_read(addr);
    }
}

#define TRACE_STM32F4XX_SYSCFG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_STM32F4XX_SYSCFG_WRITE) || \
    false)

static inline void _nocheck__trace_stm32f4xx_syscfg_write(uint64_t addr, uint64_t data)
{
    if (trace_event_get_state(TRACE_STM32F4XX_SYSCFG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 155 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:stm32f4xx_syscfg_write " "reg write: addr: 0x%" PRIx64 " val: 0x%" PRIx64 "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, data);
#line 4031 "trace/trace-hw_misc.h"
        } else {
#line 155 "../hw/misc/trace-events"
            qemu_log("stm32f4xx_syscfg_write " "reg write: addr: 0x%" PRIx64 " val: 0x%" PRIx64 "" "\n", addr, data);
#line 4035 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_stm32f4xx_syscfg_write(uint64_t addr, uint64_t data)
{
    if (true) {
        _nocheck__trace_stm32f4xx_syscfg_write(addr, data);
    }
}

#define TRACE_STM32F4XX_EXTI_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_STM32F4XX_EXTI_SET_IRQ) || \
    false)

static inline void _nocheck__trace_stm32f4xx_exti_set_irq(int irq, int leve)
{
    if (trace_event_get_state(TRACE_STM32F4XX_EXTI_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 158 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:stm32f4xx_exti_set_irq " "Set EXTI: %d to %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq, leve);
#line 4062 "trace/trace-hw_misc.h"
        } else {
#line 158 "../hw/misc/trace-events"
            qemu_log("stm32f4xx_exti_set_irq " "Set EXTI: %d to %d" "\n", irq, leve);
#line 4066 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_stm32f4xx_exti_set_irq(int irq, int leve)
{
    if (true) {
        _nocheck__trace_stm32f4xx_exti_set_irq(irq, leve);
    }
}

#define TRACE_STM32F4XX_EXTI_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_STM32F4XX_EXTI_READ) || \
    false)

static inline void _nocheck__trace_stm32f4xx_exti_read(uint64_t addr)
{
    if (trace_event_get_state(TRACE_STM32F4XX_EXTI_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 159 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:stm32f4xx_exti_read " "reg read: addr: 0x%" PRIx64 " " "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr);
#line 4093 "trace/trace-hw_misc.h"
        } else {
#line 159 "../hw/misc/trace-events"
            qemu_log("stm32f4xx_exti_read " "reg read: addr: 0x%" PRIx64 " " "\n", addr);
#line 4097 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_stm32f4xx_exti_read(uint64_t addr)
{
    if (true) {
        _nocheck__trace_stm32f4xx_exti_read(addr);
    }
}

#define TRACE_STM32F4XX_EXTI_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_STM32F4XX_EXTI_WRITE) || \
    false)

static inline void _nocheck__trace_stm32f4xx_exti_write(uint64_t addr, uint64_t data)
{
    if (trace_event_get_state(TRACE_STM32F4XX_EXTI_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 160 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:stm32f4xx_exti_write " "reg write: addr: 0x%" PRIx64 " val: 0x%" PRIx64 "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, data);
#line 4124 "trace/trace-hw_misc.h"
        } else {
#line 160 "../hw/misc/trace-events"
            qemu_log("stm32f4xx_exti_write " "reg write: addr: 0x%" PRIx64 " val: 0x%" PRIx64 "" "\n", addr, data);
#line 4128 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_stm32f4xx_exti_write(uint64_t addr, uint64_t data)
{
    if (true) {
        _nocheck__trace_stm32f4xx_exti_write(addr, data);
    }
}

#define TRACE_TZ_MPC_REG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MPC_REG_READ) || \
    false)

static inline void _nocheck__trace_tz_mpc_reg_read(uint32_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_TZ_MPC_REG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 163 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_mpc_reg_read " "TZ MPC regs read: offset 0x%x data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4155 "trace/trace-hw_misc.h"
        } else {
#line 163 "../hw/misc/trace-events"
            qemu_log("tz_mpc_reg_read " "TZ MPC regs read: offset 0x%x data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4159 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_mpc_reg_read(uint32_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_tz_mpc_reg_read(offset, data, size);
    }
}

#define TRACE_TZ_MPC_REG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MPC_REG_WRITE) || \
    false)

static inline void _nocheck__trace_tz_mpc_reg_write(uint32_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_TZ_MPC_REG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 164 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_mpc_reg_write " "TZ MPC regs write: offset 0x%x data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4186 "trace/trace-hw_misc.h"
        } else {
#line 164 "../hw/misc/trace-events"
            qemu_log("tz_mpc_reg_write " "TZ MPC regs write: offset 0x%x data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4190 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_mpc_reg_write(uint32_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_tz_mpc_reg_write(offset, data, size);
    }
}

#define TRACE_TZ_MPC_MEM_BLOCKED_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MPC_MEM_BLOCKED_READ) || \
    false)

static inline void _nocheck__trace_tz_mpc_mem_blocked_read(uint64_t addr, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_TZ_MPC_MEM_BLOCKED_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 165 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_mpc_mem_blocked_read " "TZ MPC blocked read: offset 0x%" PRIx64 " size %u secure %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, secure);
#line 4217 "trace/trace-hw_misc.h"
        } else {
#line 165 "../hw/misc/trace-events"
            qemu_log("tz_mpc_mem_blocked_read " "TZ MPC blocked read: offset 0x%" PRIx64 " size %u secure %d" "\n", addr, size, secure);
#line 4221 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_mpc_mem_blocked_read(uint64_t addr, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_tz_mpc_mem_blocked_read(addr, size, secure);
    }
}

#define TRACE_TZ_MPC_MEM_BLOCKED_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MPC_MEM_BLOCKED_WRITE) || \
    false)

static inline void _nocheck__trace_tz_mpc_mem_blocked_write(uint64_t addr, uint64_t data, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_TZ_MPC_MEM_BLOCKED_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 166 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_mpc_mem_blocked_write " "TZ MPC blocked write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, data, size, secure);
#line 4248 "trace/trace-hw_misc.h"
        } else {
#line 166 "../hw/misc/trace-events"
            qemu_log("tz_mpc_mem_blocked_write " "TZ MPC blocked write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n", addr, data, size, secure);
#line 4252 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_mpc_mem_blocked_write(uint64_t addr, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_tz_mpc_mem_blocked_write(addr, data, size, secure);
    }
}

#define TRACE_TZ_MPC_TRANSLATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MPC_TRANSLATE) || \
    false)

static inline void _nocheck__trace_tz_mpc_translate(uint64_t addr, int flags, const char * idx, const char * res)
{
    if (trace_event_get_state(TRACE_TZ_MPC_TRANSLATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 167 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_mpc_translate " "TZ MPC translate: addr 0x%" PRIx64 " flags 0x%x iommu_idx %s: %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, flags, idx, res);
#line 4279 "trace/trace-hw_misc.h"
        } else {
#line 167 "../hw/misc/trace-events"
            qemu_log("tz_mpc_translate " "TZ MPC translate: addr 0x%" PRIx64 " flags 0x%x iommu_idx %s: %s" "\n", addr, flags, idx, res);
#line 4283 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_mpc_translate(uint64_t addr, int flags, const char * idx, const char * res)
{
    if (true) {
        _nocheck__trace_tz_mpc_translate(addr, flags, idx, res);
    }
}

#define TRACE_TZ_MPC_IOMMU_NOTIFY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MPC_IOMMU_NOTIFY) || \
    false)

static inline void _nocheck__trace_tz_mpc_iommu_notify(uint64_t addr)
{
    if (trace_event_get_state(TRACE_TZ_MPC_IOMMU_NOTIFY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 168 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_mpc_iommu_notify " "TZ MPC iommu: notifying UNMAP/MAP for 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr);
#line 4310 "trace/trace-hw_misc.h"
        } else {
#line 168 "../hw/misc/trace-events"
            qemu_log("tz_mpc_iommu_notify " "TZ MPC iommu: notifying UNMAP/MAP for 0x%" PRIx64 "\n", addr);
#line 4314 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_mpc_iommu_notify(uint64_t addr)
{
    if (true) {
        _nocheck__trace_tz_mpc_iommu_notify(addr);
    }
}

#define TRACE_TZ_MSC_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MSC_RESET) || \
    false)

static inline void _nocheck__trace_tz_msc_reset(void)
{
    if (trace_event_get_state(TRACE_TZ_MSC_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 171 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_msc_reset " "TZ MSC: reset" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 4341 "trace/trace-hw_misc.h"
        } else {
#line 171 "../hw/misc/trace-events"
            qemu_log("tz_msc_reset " "TZ MSC: reset" "\n");
#line 4345 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_msc_reset(void)
{
    if (true) {
        _nocheck__trace_tz_msc_reset();
    }
}

#define TRACE_TZ_MSC_CFG_NONSEC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MSC_CFG_NONSEC) || \
    false)

static inline void _nocheck__trace_tz_msc_cfg_nonsec(int level)
{
    if (trace_event_get_state(TRACE_TZ_MSC_CFG_NONSEC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 172 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_msc_cfg_nonsec " "TZ MSC: cfg_nonsec = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 4372 "trace/trace-hw_misc.h"
        } else {
#line 172 "../hw/misc/trace-events"
            qemu_log("tz_msc_cfg_nonsec " "TZ MSC: cfg_nonsec = %d" "\n", level);
#line 4376 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_msc_cfg_nonsec(int level)
{
    if (true) {
        _nocheck__trace_tz_msc_cfg_nonsec(level);
    }
}

#define TRACE_TZ_MSC_CFG_SEC_RESP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MSC_CFG_SEC_RESP) || \
    false)

static inline void _nocheck__trace_tz_msc_cfg_sec_resp(int level)
{
    if (trace_event_get_state(TRACE_TZ_MSC_CFG_SEC_RESP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 173 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_msc_cfg_sec_resp " "TZ MSC: cfg_sec_resp = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 4403 "trace/trace-hw_misc.h"
        } else {
#line 173 "../hw/misc/trace-events"
            qemu_log("tz_msc_cfg_sec_resp " "TZ MSC: cfg_sec_resp = %d" "\n", level);
#line 4407 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_msc_cfg_sec_resp(int level)
{
    if (true) {
        _nocheck__trace_tz_msc_cfg_sec_resp(level);
    }
}

#define TRACE_TZ_MSC_IRQ_CLEAR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MSC_IRQ_CLEAR) || \
    false)

static inline void _nocheck__trace_tz_msc_irq_clear(int level)
{
    if (trace_event_get_state(TRACE_TZ_MSC_IRQ_CLEAR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 174 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_msc_irq_clear " "TZ MSC: int_clear = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 4434 "trace/trace-hw_misc.h"
        } else {
#line 174 "../hw/misc/trace-events"
            qemu_log("tz_msc_irq_clear " "TZ MSC: int_clear = %d" "\n", level);
#line 4438 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_msc_irq_clear(int level)
{
    if (true) {
        _nocheck__trace_tz_msc_irq_clear(level);
    }
}

#define TRACE_TZ_MSC_UPDATE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MSC_UPDATE_IRQ) || \
    false)

static inline void _nocheck__trace_tz_msc_update_irq(int level)
{
    if (trace_event_get_state(TRACE_TZ_MSC_UPDATE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 175 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_msc_update_irq " "TZ MSC: setting irq line to %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 4465 "trace/trace-hw_misc.h"
        } else {
#line 175 "../hw/misc/trace-events"
            qemu_log("tz_msc_update_irq " "TZ MSC: setting irq line to %d" "\n", level);
#line 4469 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_msc_update_irq(int level)
{
    if (true) {
        _nocheck__trace_tz_msc_update_irq(level);
    }
}

#define TRACE_TZ_MSC_ACCESS_BLOCKED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MSC_ACCESS_BLOCKED) || \
    false)

static inline void _nocheck__trace_tz_msc_access_blocked(uint64_t offset)
{
    if (trace_event_get_state(TRACE_TZ_MSC_ACCESS_BLOCKED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 176 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_msc_access_blocked " "TZ MSC: offset 0x%" PRIx64 " access blocked" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset);
#line 4496 "trace/trace-hw_misc.h"
        } else {
#line 176 "../hw/misc/trace-events"
            qemu_log("tz_msc_access_blocked " "TZ MSC: offset 0x%" PRIx64 " access blocked" "\n", offset);
#line 4500 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_msc_access_blocked(uint64_t offset)
{
    if (true) {
        _nocheck__trace_tz_msc_access_blocked(offset);
    }
}

#define TRACE_TZ_PPC_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_RESET) || \
    false)

static inline void _nocheck__trace_tz_ppc_reset(void)
{
    if (trace_event_get_state(TRACE_TZ_PPC_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 179 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_ppc_reset " "TZ PPC: reset" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 4527 "trace/trace-hw_misc.h"
        } else {
#line 179 "../hw/misc/trace-events"
            qemu_log("tz_ppc_reset " "TZ PPC: reset" "\n");
#line 4531 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_ppc_reset(void)
{
    if (true) {
        _nocheck__trace_tz_ppc_reset();
    }
}

#define TRACE_TZ_PPC_CFG_NONSEC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_CFG_NONSEC) || \
    false)

static inline void _nocheck__trace_tz_ppc_cfg_nonsec(int n, int level)
{
    if (trace_event_get_state(TRACE_TZ_PPC_CFG_NONSEC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 180 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_ppc_cfg_nonsec " "TZ PPC: cfg_nonsec[%d] = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , n, level);
#line 4558 "trace/trace-hw_misc.h"
        } else {
#line 180 "../hw/misc/trace-events"
            qemu_log("tz_ppc_cfg_nonsec " "TZ PPC: cfg_nonsec[%d] = %d" "\n", n, level);
#line 4562 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_ppc_cfg_nonsec(int n, int level)
{
    if (true) {
        _nocheck__trace_tz_ppc_cfg_nonsec(n, level);
    }
}

#define TRACE_TZ_PPC_CFG_AP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_CFG_AP) || \
    false)

static inline void _nocheck__trace_tz_ppc_cfg_ap(int n, int level)
{
    if (trace_event_get_state(TRACE_TZ_PPC_CFG_AP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 181 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_ppc_cfg_ap " "TZ PPC: cfg_ap[%d] = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , n, level);
#line 4589 "trace/trace-hw_misc.h"
        } else {
#line 181 "../hw/misc/trace-events"
            qemu_log("tz_ppc_cfg_ap " "TZ PPC: cfg_ap[%d] = %d" "\n", n, level);
#line 4593 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_ppc_cfg_ap(int n, int level)
{
    if (true) {
        _nocheck__trace_tz_ppc_cfg_ap(n, level);
    }
}

#define TRACE_TZ_PPC_CFG_SEC_RESP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_CFG_SEC_RESP) || \
    false)

static inline void _nocheck__trace_tz_ppc_cfg_sec_resp(int level)
{
    if (trace_event_get_state(TRACE_TZ_PPC_CFG_SEC_RESP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 182 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_ppc_cfg_sec_resp " "TZ PPC: cfg_sec_resp = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 4620 "trace/trace-hw_misc.h"
        } else {
#line 182 "../hw/misc/trace-events"
            qemu_log("tz_ppc_cfg_sec_resp " "TZ PPC: cfg_sec_resp = %d" "\n", level);
#line 4624 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_ppc_cfg_sec_resp(int level)
{
    if (true) {
        _nocheck__trace_tz_ppc_cfg_sec_resp(level);
    }
}

#define TRACE_TZ_PPC_IRQ_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_IRQ_ENABLE) || \
    false)

static inline void _nocheck__trace_tz_ppc_irq_enable(int level)
{
    if (trace_event_get_state(TRACE_TZ_PPC_IRQ_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 183 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_ppc_irq_enable " "TZ PPC: int_enable = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 4651 "trace/trace-hw_misc.h"
        } else {
#line 183 "../hw/misc/trace-events"
            qemu_log("tz_ppc_irq_enable " "TZ PPC: int_enable = %d" "\n", level);
#line 4655 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_ppc_irq_enable(int level)
{
    if (true) {
        _nocheck__trace_tz_ppc_irq_enable(level);
    }
}

#define TRACE_TZ_PPC_IRQ_CLEAR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_IRQ_CLEAR) || \
    false)

static inline void _nocheck__trace_tz_ppc_irq_clear(int level)
{
    if (trace_event_get_state(TRACE_TZ_PPC_IRQ_CLEAR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 184 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_ppc_irq_clear " "TZ PPC: int_clear = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 4682 "trace/trace-hw_misc.h"
        } else {
#line 184 "../hw/misc/trace-events"
            qemu_log("tz_ppc_irq_clear " "TZ PPC: int_clear = %d" "\n", level);
#line 4686 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_ppc_irq_clear(int level)
{
    if (true) {
        _nocheck__trace_tz_ppc_irq_clear(level);
    }
}

#define TRACE_TZ_PPC_UPDATE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_UPDATE_IRQ) || \
    false)

static inline void _nocheck__trace_tz_ppc_update_irq(int level)
{
    if (trace_event_get_state(TRACE_TZ_PPC_UPDATE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 185 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_ppc_update_irq " "TZ PPC: setting irq line to %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 4713 "trace/trace-hw_misc.h"
        } else {
#line 185 "../hw/misc/trace-events"
            qemu_log("tz_ppc_update_irq " "TZ PPC: setting irq line to %d" "\n", level);
#line 4717 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_ppc_update_irq(int level)
{
    if (true) {
        _nocheck__trace_tz_ppc_update_irq(level);
    }
}

#define TRACE_TZ_PPC_READ_BLOCKED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_READ_BLOCKED) || \
    false)

static inline void _nocheck__trace_tz_ppc_read_blocked(int n, uint64_t offset, bool secure, bool user)
{
    if (trace_event_get_state(TRACE_TZ_PPC_READ_BLOCKED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 186 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_ppc_read_blocked " "TZ PPC: port %d offset 0x%" PRIx64 " read (secure %d user %d) blocked" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , n, offset, secure, user);
#line 4744 "trace/trace-hw_misc.h"
        } else {
#line 186 "../hw/misc/trace-events"
            qemu_log("tz_ppc_read_blocked " "TZ PPC: port %d offset 0x%" PRIx64 " read (secure %d user %d) blocked" "\n", n, offset, secure, user);
#line 4748 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_ppc_read_blocked(int n, uint64_t offset, bool secure, bool user)
{
    if (true) {
        _nocheck__trace_tz_ppc_read_blocked(n, offset, secure, user);
    }
}

#define TRACE_TZ_PPC_WRITE_BLOCKED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_WRITE_BLOCKED) || \
    false)

static inline void _nocheck__trace_tz_ppc_write_blocked(int n, uint64_t offset, bool secure, bool user)
{
    if (trace_event_get_state(TRACE_TZ_PPC_WRITE_BLOCKED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 187 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_ppc_write_blocked " "TZ PPC: port %d offset 0x%" PRIx64 " write (secure %d user %d) blocked" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , n, offset, secure, user);
#line 4775 "trace/trace-hw_misc.h"
        } else {
#line 187 "../hw/misc/trace-events"
            qemu_log("tz_ppc_write_blocked " "TZ PPC: port %d offset 0x%" PRIx64 " write (secure %d user %d) blocked" "\n", n, offset, secure, user);
#line 4779 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_ppc_write_blocked(int n, uint64_t offset, bool secure, bool user)
{
    if (true) {
        _nocheck__trace_tz_ppc_write_blocked(n, offset, secure, user);
    }
}

#define TRACE_IOTKIT_SECCTL_S_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SECCTL_S_READ) || \
    false)

static inline void _nocheck__trace_iotkit_secctl_s_read(uint32_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SECCTL_S_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 190 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:iotkit_secctl_s_read " "IoTKit SecCtl S regs read: offset 0x%x data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4806 "trace/trace-hw_misc.h"
        } else {
#line 190 "../hw/misc/trace-events"
            qemu_log("iotkit_secctl_s_read " "IoTKit SecCtl S regs read: offset 0x%x data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4810 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_iotkit_secctl_s_read(uint32_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_secctl_s_read(offset, data, size);
    }
}

#define TRACE_IOTKIT_SECCTL_S_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SECCTL_S_WRITE) || \
    false)

static inline void _nocheck__trace_iotkit_secctl_s_write(uint32_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SECCTL_S_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 191 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:iotkit_secctl_s_write " "IoTKit SecCtl S regs write: offset 0x%x data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4837 "trace/trace-hw_misc.h"
        } else {
#line 191 "../hw/misc/trace-events"
            qemu_log("iotkit_secctl_s_write " "IoTKit SecCtl S regs write: offset 0x%x data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4841 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_iotkit_secctl_s_write(uint32_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_secctl_s_write(offset, data, size);
    }
}

#define TRACE_IOTKIT_SECCTL_NS_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SECCTL_NS_READ) || \
    false)

static inline void _nocheck__trace_iotkit_secctl_ns_read(uint32_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SECCTL_NS_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 192 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:iotkit_secctl_ns_read " "IoTKit SecCtl NS regs read: offset 0x%x data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4868 "trace/trace-hw_misc.h"
        } else {
#line 192 "../hw/misc/trace-events"
            qemu_log("iotkit_secctl_ns_read " "IoTKit SecCtl NS regs read: offset 0x%x data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4872 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_iotkit_secctl_ns_read(uint32_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_secctl_ns_read(offset, data, size);
    }
}

#define TRACE_IOTKIT_SECCTL_NS_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SECCTL_NS_WRITE) || \
    false)

static inline void _nocheck__trace_iotkit_secctl_ns_write(uint32_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SECCTL_NS_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 193 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:iotkit_secctl_ns_write " "IoTKit SecCtl NS regs write: offset 0x%x data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4899 "trace/trace-hw_misc.h"
        } else {
#line 193 "../hw/misc/trace-events"
            qemu_log("iotkit_secctl_ns_write " "IoTKit SecCtl NS regs write: offset 0x%x data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4903 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_iotkit_secctl_ns_write(uint32_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_secctl_ns_write(offset, data, size);
    }
}

#define TRACE_CCM_ENTRY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CCM_ENTRY) || \
    false)

static inline void _nocheck__trace_ccm_entry(void)
{
    if (trace_event_get_state(TRACE_CCM_ENTRY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 196 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ccm_entry " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 4930 "trace/trace-hw_misc.h"
        } else {
#line 196 "../hw/misc/trace-events"
            qemu_log("ccm_entry " "" "\n");
#line 4934 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ccm_entry(void)
{
    if (true) {
        _nocheck__trace_ccm_entry();
    }
}

#define TRACE_CCM_FREQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CCM_FREQ) || \
    false)

static inline void _nocheck__trace_ccm_freq(uint32_t freq)
{
    if (trace_event_get_state(TRACE_CCM_FREQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 197 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ccm_freq " "freq = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , freq);
#line 4961 "trace/trace-hw_misc.h"
        } else {
#line 197 "../hw/misc/trace-events"
            qemu_log("ccm_freq " "freq = %d" "\n", freq);
#line 4965 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ccm_freq(uint32_t freq)
{
    if (true) {
        _nocheck__trace_ccm_freq(freq);
    }
}

#define TRACE_CCM_CLOCK_FREQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CCM_CLOCK_FREQ) || \
    false)

static inline void _nocheck__trace_ccm_clock_freq(uint32_t clock, uint32_t freq)
{
    if (trace_event_get_state(TRACE_CCM_CLOCK_FREQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 198 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ccm_clock_freq " "(Clock = %d) = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , clock, freq);
#line 4992 "trace/trace-hw_misc.h"
        } else {
#line 198 "../hw/misc/trace-events"
            qemu_log("ccm_clock_freq " "(Clock = %d) = %d" "\n", clock, freq);
#line 4996 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ccm_clock_freq(uint32_t clock, uint32_t freq)
{
    if (true) {
        _nocheck__trace_ccm_clock_freq(clock, freq);
    }
}

#define TRACE_CCM_READ_REG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CCM_READ_REG) || \
    false)

static inline void _nocheck__trace_ccm_read_reg(const char * reg_name, uint32_t value)
{
    if (trace_event_get_state(TRACE_CCM_READ_REG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 199 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ccm_read_reg " "reg[%s] <= 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg_name, value);
#line 5023 "trace/trace-hw_misc.h"
        } else {
#line 199 "../hw/misc/trace-events"
            qemu_log("ccm_read_reg " "reg[%s] <= 0x%" PRIx32 "\n", reg_name, value);
#line 5027 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ccm_read_reg(const char * reg_name, uint32_t value)
{
    if (true) {
        _nocheck__trace_ccm_read_reg(reg_name, value);
    }
}

#define TRACE_CCM_WRITE_REG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CCM_WRITE_REG) || \
    false)

static inline void _nocheck__trace_ccm_write_reg(const char * reg_name, uint32_t value)
{
    if (trace_event_get_state(TRACE_CCM_WRITE_REG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 200 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ccm_write_reg " "reg[%s] => 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg_name, value);
#line 5054 "trace/trace-hw_misc.h"
        } else {
#line 200 "../hw/misc/trace-events"
            qemu_log("ccm_write_reg " "reg[%s] => 0x%" PRIx32 "\n", reg_name, value);
#line 5058 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ccm_write_reg(const char * reg_name, uint32_t value)
{
    if (true) {
        _nocheck__trace_ccm_write_reg(reg_name, value);
    }
}

#define TRACE_IMX7_SRC_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IMX7_SRC_READ) || \
    false)

static inline void _nocheck__trace_imx7_src_read(const char * reg_name, uint32_t value)
{
    if (trace_event_get_state(TRACE_IMX7_SRC_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 203 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:imx7_src_read " "reg[%s] => 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg_name, value);
#line 5085 "trace/trace-hw_misc.h"
        } else {
#line 203 "../hw/misc/trace-events"
            qemu_log("imx7_src_read " "reg[%s] => 0x%" PRIx32 "\n", reg_name, value);
#line 5089 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_imx7_src_read(const char * reg_name, uint32_t value)
{
    if (true) {
        _nocheck__trace_imx7_src_read(reg_name, value);
    }
}

#define TRACE_IMX7_SRC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IMX7_SRC_WRITE) || \
    false)

static inline void _nocheck__trace_imx7_src_write(const char * reg_name, uint32_t value)
{
    if (trace_event_get_state(TRACE_IMX7_SRC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 204 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:imx7_src_write " "reg[%s] <= 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg_name, value);
#line 5116 "trace/trace-hw_misc.h"
        } else {
#line 204 "../hw/misc/trace-events"
            qemu_log("imx7_src_write " "reg[%s] <= 0x%" PRIx32 "\n", reg_name, value);
#line 5120 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_imx7_src_write(const char * reg_name, uint32_t value)
{
    if (true) {
        _nocheck__trace_imx7_src_write(reg_name, value);
    }
}

#define TRACE_IOTKIT_SYSINFO_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SYSINFO_READ) || \
    false)

static inline void _nocheck__trace_iotkit_sysinfo_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SYSINFO_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 207 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:iotkit_sysinfo_read " "IoTKit SysInfo read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 5147 "trace/trace-hw_misc.h"
        } else {
#line 207 "../hw/misc/trace-events"
            qemu_log("iotkit_sysinfo_read " "IoTKit SysInfo read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 5151 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_iotkit_sysinfo_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_sysinfo_read(offset, data, size);
    }
}

#define TRACE_IOTKIT_SYSINFO_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SYSINFO_WRITE) || \
    false)

static inline void _nocheck__trace_iotkit_sysinfo_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SYSINFO_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 208 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:iotkit_sysinfo_write " "IoTKit SysInfo write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 5178 "trace/trace-hw_misc.h"
        } else {
#line 208 "../hw/misc/trace-events"
            qemu_log("iotkit_sysinfo_write " "IoTKit SysInfo write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 5182 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_iotkit_sysinfo_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_sysinfo_write(offset, data, size);
    }
}

#define TRACE_IOTKIT_SYSCTL_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SYSCTL_READ) || \
    false)

static inline void _nocheck__trace_iotkit_sysctl_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SYSCTL_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 211 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:iotkit_sysctl_read " "IoTKit SysCtl read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 5209 "trace/trace-hw_misc.h"
        } else {
#line 211 "../hw/misc/trace-events"
            qemu_log("iotkit_sysctl_read " "IoTKit SysCtl read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 5213 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_iotkit_sysctl_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_sysctl_read(offset, data, size);
    }
}

#define TRACE_IOTKIT_SYSCTL_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SYSCTL_WRITE) || \
    false)

static inline void _nocheck__trace_iotkit_sysctl_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SYSCTL_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 212 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:iotkit_sysctl_write " "IoTKit SysCtl write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 5240 "trace/trace-hw_misc.h"
        } else {
#line 212 "../hw/misc/trace-events"
            qemu_log("iotkit_sysctl_write " "IoTKit SysCtl write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 5244 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_iotkit_sysctl_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_sysctl_write(offset, data, size);
    }
}

#define TRACE_IOTKIT_SYSCTL_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SYSCTL_RESET) || \
    false)

static inline void _nocheck__trace_iotkit_sysctl_reset(void)
{
    if (trace_event_get_state(TRACE_IOTKIT_SYSCTL_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 213 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:iotkit_sysctl_reset " "IoTKit SysCtl: reset" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 5271 "trace/trace-hw_misc.h"
        } else {
#line 213 "../hw/misc/trace-events"
            qemu_log("iotkit_sysctl_reset " "IoTKit SysCtl: reset" "\n");
#line 5275 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_iotkit_sysctl_reset(void)
{
    if (true) {
        _nocheck__trace_iotkit_sysctl_reset();
    }
}

#define TRACE_ARMSSE_CPU_PWRCTRL_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ARMSSE_CPU_PWRCTRL_READ) || \
    false)

static inline void _nocheck__trace_armsse_cpu_pwrctrl_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ARMSSE_CPU_PWRCTRL_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 216 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:armsse_cpu_pwrctrl_read " "SSE-300 CPU_PWRCTRL read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 5302 "trace/trace-hw_misc.h"
        } else {
#line 216 "../hw/misc/trace-events"
            qemu_log("armsse_cpu_pwrctrl_read " "SSE-300 CPU_PWRCTRL read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 5306 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_armsse_cpu_pwrctrl_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_armsse_cpu_pwrctrl_read(offset, data, size);
    }
}

#define TRACE_ARMSSE_CPU_PWRCTRL_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ARMSSE_CPU_PWRCTRL_WRITE) || \
    false)

static inline void _nocheck__trace_armsse_cpu_pwrctrl_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ARMSSE_CPU_PWRCTRL_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 217 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:armsse_cpu_pwrctrl_write " "SSE-300 CPU_PWRCTRL write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 5333 "trace/trace-hw_misc.h"
        } else {
#line 217 "../hw/misc/trace-events"
            qemu_log("armsse_cpu_pwrctrl_write " "SSE-300 CPU_PWRCTRL write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 5337 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_armsse_cpu_pwrctrl_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_armsse_cpu_pwrctrl_write(offset, data, size);
    }
}

#define TRACE_ARMSSE_CPUID_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ARMSSE_CPUID_READ) || \
    false)

static inline void _nocheck__trace_armsse_cpuid_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ARMSSE_CPUID_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 220 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:armsse_cpuid_read " "SSE-200 CPU_IDENTITY read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 5364 "trace/trace-hw_misc.h"
        } else {
#line 220 "../hw/misc/trace-events"
            qemu_log("armsse_cpuid_read " "SSE-200 CPU_IDENTITY read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 5368 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_armsse_cpuid_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_armsse_cpuid_read(offset, data, size);
    }
}

#define TRACE_ARMSSE_CPUID_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ARMSSE_CPUID_WRITE) || \
    false)

static inline void _nocheck__trace_armsse_cpuid_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ARMSSE_CPUID_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 221 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:armsse_cpuid_write " "SSE-200 CPU_IDENTITY write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 5395 "trace/trace-hw_misc.h"
        } else {
#line 221 "../hw/misc/trace-events"
            qemu_log("armsse_cpuid_write " "SSE-200 CPU_IDENTITY write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 5399 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_armsse_cpuid_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_armsse_cpuid_write(offset, data, size);
    }
}

#define TRACE_ARMSSE_MHU_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ARMSSE_MHU_READ) || \
    false)

static inline void _nocheck__trace_armsse_mhu_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ARMSSE_MHU_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 224 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:armsse_mhu_read " "SSE-200 MHU read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 5426 "trace/trace-hw_misc.h"
        } else {
#line 224 "../hw/misc/trace-events"
            qemu_log("armsse_mhu_read " "SSE-200 MHU read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 5430 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_armsse_mhu_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_armsse_mhu_read(offset, data, size);
    }
}

#define TRACE_ARMSSE_MHU_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ARMSSE_MHU_WRITE) || \
    false)

static inline void _nocheck__trace_armsse_mhu_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ARMSSE_MHU_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 225 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:armsse_mhu_write " "SSE-200 MHU write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 5457 "trace/trace-hw_misc.h"
        } else {
#line 225 "../hw/misc/trace-events"
            qemu_log("armsse_mhu_write " "SSE-200 MHU write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 5461 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_armsse_mhu_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_armsse_mhu_write(offset, data, size);
    }
}

#define TRACE_ASPEED_XDMA_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_XDMA_WRITE) || \
    false)

static inline void _nocheck__trace_aspeed_xdma_write(uint64_t offset, uint64_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_XDMA_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 228 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_xdma_write " "XDMA write: offset 0x%" PRIx64 " data 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data);
#line 5488 "trace/trace-hw_misc.h"
        } else {
#line 228 "../hw/misc/trace-events"
            qemu_log("aspeed_xdma_write " "XDMA write: offset 0x%" PRIx64 " data 0x%" PRIx64 "\n", offset, data);
#line 5492 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_aspeed_xdma_write(uint64_t offset, uint64_t data)
{
    if (true) {
        _nocheck__trace_aspeed_xdma_write(offset, data);
    }
}

#define TRACE_ASPEED_I3C_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_I3C_READ) || \
    false)

static inline void _nocheck__trace_aspeed_i3c_read(uint64_t offset, uint64_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_I3C_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 231 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_i3c_read " "I3C read: offset 0x%" PRIx64 " data 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data);
#line 5519 "trace/trace-hw_misc.h"
        } else {
#line 231 "../hw/misc/trace-events"
            qemu_log("aspeed_i3c_read " "I3C read: offset 0x%" PRIx64 " data 0x%" PRIx64 "\n", offset, data);
#line 5523 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_aspeed_i3c_read(uint64_t offset, uint64_t data)
{
    if (true) {
        _nocheck__trace_aspeed_i3c_read(offset, data);
    }
}

#define TRACE_ASPEED_I3C_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_I3C_WRITE) || \
    false)

static inline void _nocheck__trace_aspeed_i3c_write(uint64_t offset, uint64_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_I3C_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 232 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_i3c_write " "I3C write: offset 0x%" PRIx64 " data 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data);
#line 5550 "trace/trace-hw_misc.h"
        } else {
#line 232 "../hw/misc/trace-events"
            qemu_log("aspeed_i3c_write " "I3C write: offset 0x%" PRIx64 " data 0x%" PRIx64 "\n", offset, data);
#line 5554 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_aspeed_i3c_write(uint64_t offset, uint64_t data)
{
    if (true) {
        _nocheck__trace_aspeed_i3c_write(offset, data);
    }
}

#define TRACE_ASPEED_I3C_DEVICE_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_I3C_DEVICE_READ) || \
    false)

static inline void _nocheck__trace_aspeed_i3c_device_read(uint32_t deviceid, uint64_t offset, uint64_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_I3C_DEVICE_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 233 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_i3c_device_read " "I3C Dev[%u] read: offset 0x%" PRIx64 " data 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , deviceid, offset, data);
#line 5581 "trace/trace-hw_misc.h"
        } else {
#line 233 "../hw/misc/trace-events"
            qemu_log("aspeed_i3c_device_read " "I3C Dev[%u] read: offset 0x%" PRIx64 " data 0x%" PRIx64 "\n", deviceid, offset, data);
#line 5585 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_aspeed_i3c_device_read(uint32_t deviceid, uint64_t offset, uint64_t data)
{
    if (true) {
        _nocheck__trace_aspeed_i3c_device_read(deviceid, offset, data);
    }
}

#define TRACE_ASPEED_I3C_DEVICE_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_I3C_DEVICE_WRITE) || \
    false)

static inline void _nocheck__trace_aspeed_i3c_device_write(uint32_t deviceid, uint64_t offset, uint64_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_I3C_DEVICE_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 234 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_i3c_device_write " "I3C Dev[%u] write: offset 0x%" PRIx64 " data 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , deviceid, offset, data);
#line 5612 "trace/trace-hw_misc.h"
        } else {
#line 234 "../hw/misc/trace-events"
            qemu_log("aspeed_i3c_device_write " "I3C Dev[%u] write: offset 0x%" PRIx64 " data 0x%" PRIx64 "\n", deviceid, offset, data);
#line 5616 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_aspeed_i3c_device_write(uint32_t deviceid, uint64_t offset, uint64_t data)
{
    if (true) {
        _nocheck__trace_aspeed_i3c_device_write(deviceid, offset, data);
    }
}

#define TRACE_ASPEED_SDMC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_SDMC_WRITE) || \
    false)

static inline void _nocheck__trace_aspeed_sdmc_write(uint64_t reg, uint64_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_SDMC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 237 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_sdmc_write " "reg @0x%" PRIx64 " data: 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, data);
#line 5643 "trace/trace-hw_misc.h"
        } else {
#line 237 "../hw/misc/trace-events"
            qemu_log("aspeed_sdmc_write " "reg @0x%" PRIx64 " data: 0x%" PRIx64 "\n", reg, data);
#line 5647 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_aspeed_sdmc_write(uint64_t reg, uint64_t data)
{
    if (true) {
        _nocheck__trace_aspeed_sdmc_write(reg, data);
    }
}

#define TRACE_ASPEED_SDMC_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_SDMC_READ) || \
    false)

static inline void _nocheck__trace_aspeed_sdmc_read(uint64_t reg, uint64_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_SDMC_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 238 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_sdmc_read " "reg @0x%" PRIx64 " data: 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, data);
#line 5674 "trace/trace-hw_misc.h"
        } else {
#line 238 "../hw/misc/trace-events"
            qemu_log("aspeed_sdmc_read " "reg @0x%" PRIx64 " data: 0x%" PRIx64 "\n", reg, data);
#line 5678 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_aspeed_sdmc_read(uint64_t reg, uint64_t data)
{
    if (true) {
        _nocheck__trace_aspeed_sdmc_read(reg, data);
    }
}

#define TRACE_ASPEED_PECI_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_PECI_READ) || \
    false)

static inline void _nocheck__trace_aspeed_peci_read(uint64_t offset, uint64_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_PECI_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 241 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_peci_read " "offset 0x%" PRIx64 " data 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data);
#line 5705 "trace/trace-hw_misc.h"
        } else {
#line 241 "../hw/misc/trace-events"
            qemu_log("aspeed_peci_read " "offset 0x%" PRIx64 " data 0x%" PRIx64 "\n", offset, data);
#line 5709 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_aspeed_peci_read(uint64_t offset, uint64_t data)
{
    if (true) {
        _nocheck__trace_aspeed_peci_read(offset, data);
    }
}

#define TRACE_ASPEED_PECI_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_PECI_WRITE) || \
    false)

static inline void _nocheck__trace_aspeed_peci_write(uint64_t offset, uint64_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_PECI_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 242 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_peci_write " "offset 0x%" PRIx64 " data 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data);
#line 5736 "trace/trace-hw_misc.h"
        } else {
#line 242 "../hw/misc/trace-events"
            qemu_log("aspeed_peci_write " "offset 0x%" PRIx64 " data 0x%" PRIx64 "\n", offset, data);
#line 5740 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_aspeed_peci_write(uint64_t offset, uint64_t data)
{
    if (true) {
        _nocheck__trace_aspeed_peci_write(offset, data);
    }
}

#define TRACE_ASPEED_PECI_RAISE_INTERRUPT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_PECI_RAISE_INTERRUPT) || \
    false)

static inline void _nocheck__trace_aspeed_peci_raise_interrupt(uint32_t ctrl, uint32_t status)
{
    if (trace_event_get_state(TRACE_ASPEED_PECI_RAISE_INTERRUPT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 243 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_peci_raise_interrupt " "ctrl 0x%" PRIx32 " status 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ctrl, status);
#line 5767 "trace/trace-hw_misc.h"
        } else {
#line 243 "../hw/misc/trace-events"
            qemu_log("aspeed_peci_raise_interrupt " "ctrl 0x%" PRIx32 " status 0x%" PRIx32 "\n", ctrl, status);
#line 5771 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_aspeed_peci_raise_interrupt(uint32_t ctrl, uint32_t status)
{
    if (true) {
        _nocheck__trace_aspeed_peci_raise_interrupt(ctrl, status);
    }
}

#define TRACE_BCM2835_MBOX_PROPERTY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_MBOX_PROPERTY) || \
    false)

static inline void _nocheck__trace_bcm2835_mbox_property(uint32_t tag, uint32_t bufsize, size_t resplen)
{
    if (trace_event_get_state(TRACE_BCM2835_MBOX_PROPERTY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 246 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_mbox_property " "mbox property tag:0x%08x in_sz:%u out_sz:%zu" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, bufsize, resplen);
#line 5798 "trace/trace-hw_misc.h"
        } else {
#line 246 "../hw/misc/trace-events"
            qemu_log("bcm2835_mbox_property " "mbox property tag:0x%08x in_sz:%u out_sz:%zu" "\n", tag, bufsize, resplen);
#line 5802 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_bcm2835_mbox_property(uint32_t tag, uint32_t bufsize, size_t resplen)
{
    if (true) {
        _nocheck__trace_bcm2835_mbox_property(tag, bufsize, resplen);
    }
}

#define TRACE_BCM2835_MBOX_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_MBOX_WRITE) || \
    false)

static inline void _nocheck__trace_bcm2835_mbox_write(unsigned int size, uint64_t addr, uint64_t value)
{
    if (trace_event_get_state(TRACE_BCM2835_MBOX_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 249 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_mbox_write " "mbox write sz:%u addr:0x%"PRIx64" data:0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , size, addr, value);
#line 5829 "trace/trace-hw_misc.h"
        } else {
#line 249 "../hw/misc/trace-events"
            qemu_log("bcm2835_mbox_write " "mbox write sz:%u addr:0x%"PRIx64" data:0x%"PRIx64 "\n", size, addr, value);
#line 5833 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_bcm2835_mbox_write(unsigned int size, uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_bcm2835_mbox_write(size, addr, value);
    }
}

#define TRACE_BCM2835_MBOX_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_MBOX_READ) || \
    false)

static inline void _nocheck__trace_bcm2835_mbox_read(unsigned int size, uint64_t addr, uint64_t value)
{
    if (trace_event_get_state(TRACE_BCM2835_MBOX_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 250 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_mbox_read " "mbox read sz:%u addr:0x%"PRIx64" data:0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , size, addr, value);
#line 5860 "trace/trace-hw_misc.h"
        } else {
#line 250 "../hw/misc/trace-events"
            qemu_log("bcm2835_mbox_read " "mbox read sz:%u addr:0x%"PRIx64" data:0x%"PRIx64 "\n", size, addr, value);
#line 5864 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_bcm2835_mbox_read(unsigned int size, uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_bcm2835_mbox_read(size, addr, value);
    }
}

#define TRACE_BCM2835_MBOX_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_MBOX_IRQ) || \
    false)

static inline void _nocheck__trace_bcm2835_mbox_irq(unsigned level)
{
    if (trace_event_get_state(TRACE_BCM2835_MBOX_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 251 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_mbox_irq " "mbox irq:ARM level:%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 5891 "trace/trace-hw_misc.h"
        } else {
#line 251 "../hw/misc/trace-events"
            qemu_log("bcm2835_mbox_irq " "mbox irq:ARM level:%u" "\n", level);
#line 5895 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_bcm2835_mbox_irq(unsigned level)
{
    if (true) {
        _nocheck__trace_bcm2835_mbox_irq(level);
    }
}

#define TRACE_VIA1_RTC_UPDATE_DATA_OUT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_UPDATE_DATA_OUT) || \
    false)

static inline void _nocheck__trace_via1_rtc_update_data_out(int count, int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_UPDATE_DATA_OUT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 254 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_update_data_out " "count=%d value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , count, value);
#line 5922 "trace/trace-hw_misc.h"
        } else {
#line 254 "../hw/misc/trace-events"
            qemu_log("via1_rtc_update_data_out " "count=%d value=0x%02x" "\n", count, value);
#line 5926 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_update_data_out(int count, int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_update_data_out(count, value);
    }
}

#define TRACE_VIA1_RTC_UPDATE_DATA_IN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_UPDATE_DATA_IN) || \
    false)

static inline void _nocheck__trace_via1_rtc_update_data_in(int count, int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_UPDATE_DATA_IN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 255 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_update_data_in " "count=%d value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , count, value);
#line 5953 "trace/trace-hw_misc.h"
        } else {
#line 255 "../hw/misc/trace-events"
            qemu_log("via1_rtc_update_data_in " "count=%d value=0x%02x" "\n", count, value);
#line 5957 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_update_data_in(int count, int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_update_data_in(count, value);
    }
}

#define TRACE_VIA1_RTC_INTERNAL_STATUS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_INTERNAL_STATUS) || \
    false)

static inline void _nocheck__trace_via1_rtc_internal_status(int cmd, int alt, int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_INTERNAL_STATUS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 256 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_internal_status " "cmd=0x%02x alt=0x%02x value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cmd, alt, value);
#line 5984 "trace/trace-hw_misc.h"
        } else {
#line 256 "../hw/misc/trace-events"
            qemu_log("via1_rtc_internal_status " "cmd=0x%02x alt=0x%02x value=0x%02x" "\n", cmd, alt, value);
#line 5988 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_internal_status(int cmd, int alt, int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_internal_status(cmd, alt, value);
    }
}

#define TRACE_VIA1_RTC_INTERNAL_CMD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_INTERNAL_CMD) || \
    false)

static inline void _nocheck__trace_via1_rtc_internal_cmd(int cmd)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_INTERNAL_CMD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 257 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_internal_cmd " "cmd=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cmd);
#line 6015 "trace/trace-hw_misc.h"
        } else {
#line 257 "../hw/misc/trace-events"
            qemu_log("via1_rtc_internal_cmd " "cmd=0x%02x" "\n", cmd);
#line 6019 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_internal_cmd(int cmd)
{
    if (true) {
        _nocheck__trace_via1_rtc_internal_cmd(cmd);
    }
}

#define TRACE_VIA1_RTC_CMD_INVALID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_CMD_INVALID) || \
    false)

static inline void _nocheck__trace_via1_rtc_cmd_invalid(int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_CMD_INVALID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 258 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_cmd_invalid " "value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , value);
#line 6046 "trace/trace-hw_misc.h"
        } else {
#line 258 "../hw/misc/trace-events"
            qemu_log("via1_rtc_cmd_invalid " "value=0x%02x" "\n", value);
#line 6050 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_cmd_invalid(int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_cmd_invalid(value);
    }
}

#define TRACE_VIA1_RTC_INTERNAL_TIME_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_INTERNAL_TIME) || \
    false)

static inline void _nocheck__trace_via1_rtc_internal_time(uint32_t time)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_INTERNAL_TIME) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 259 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_internal_time " "time=0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , time);
#line 6077 "trace/trace-hw_misc.h"
        } else {
#line 259 "../hw/misc/trace-events"
            qemu_log("via1_rtc_internal_time " "time=0x%08x" "\n", time);
#line 6081 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_internal_time(uint32_t time)
{
    if (true) {
        _nocheck__trace_via1_rtc_internal_time(time);
    }
}

#define TRACE_VIA1_RTC_INTERNAL_SET_CMD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_INTERNAL_SET_CMD) || \
    false)

static inline void _nocheck__trace_via1_rtc_internal_set_cmd(int cmd)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_INTERNAL_SET_CMD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 260 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_internal_set_cmd " "cmd=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cmd);
#line 6108 "trace/trace-hw_misc.h"
        } else {
#line 260 "../hw/misc/trace-events"
            qemu_log("via1_rtc_internal_set_cmd " "cmd=0x%02x" "\n", cmd);
#line 6112 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_internal_set_cmd(int cmd)
{
    if (true) {
        _nocheck__trace_via1_rtc_internal_set_cmd(cmd);
    }
}

#define TRACE_VIA1_RTC_INTERNAL_IGNORE_CMD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_INTERNAL_IGNORE_CMD) || \
    false)

static inline void _nocheck__trace_via1_rtc_internal_ignore_cmd(int cmd)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_INTERNAL_IGNORE_CMD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 261 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_internal_ignore_cmd " "cmd=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cmd);
#line 6139 "trace/trace-hw_misc.h"
        } else {
#line 261 "../hw/misc/trace-events"
            qemu_log("via1_rtc_internal_ignore_cmd " "cmd=0x%02x" "\n", cmd);
#line 6143 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_internal_ignore_cmd(int cmd)
{
    if (true) {
        _nocheck__trace_via1_rtc_internal_ignore_cmd(cmd);
    }
}

#define TRACE_VIA1_RTC_INTERNAL_SET_ALT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_INTERNAL_SET_ALT) || \
    false)

static inline void _nocheck__trace_via1_rtc_internal_set_alt(int alt, int sector, int offset)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_INTERNAL_SET_ALT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 262 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_internal_set_alt " "alt=0x%02x sector=%u offset=%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , alt, sector, offset);
#line 6170 "trace/trace-hw_misc.h"
        } else {
#line 262 "../hw/misc/trace-events"
            qemu_log("via1_rtc_internal_set_alt " "alt=0x%02x sector=%u offset=%u" "\n", alt, sector, offset);
#line 6174 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_internal_set_alt(int alt, int sector, int offset)
{
    if (true) {
        _nocheck__trace_via1_rtc_internal_set_alt(alt, sector, offset);
    }
}

#define TRACE_VIA1_RTC_CMD_SECONDS_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_CMD_SECONDS_READ) || \
    false)

static inline void _nocheck__trace_via1_rtc_cmd_seconds_read(int reg, int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_CMD_SECONDS_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 263 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_cmd_seconds_read " "reg=%d value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, value);
#line 6201 "trace/trace-hw_misc.h"
        } else {
#line 263 "../hw/misc/trace-events"
            qemu_log("via1_rtc_cmd_seconds_read " "reg=%d value=0x%02x" "\n", reg, value);
#line 6205 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_cmd_seconds_read(int reg, int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_cmd_seconds_read(reg, value);
    }
}

#define TRACE_VIA1_RTC_CMD_SECONDS_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_CMD_SECONDS_WRITE) || \
    false)

static inline void _nocheck__trace_via1_rtc_cmd_seconds_write(int reg, int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_CMD_SECONDS_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 264 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_cmd_seconds_write " "reg=%d value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, value);
#line 6232 "trace/trace-hw_misc.h"
        } else {
#line 264 "../hw/misc/trace-events"
            qemu_log("via1_rtc_cmd_seconds_write " "reg=%d value=0x%02x" "\n", reg, value);
#line 6236 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_cmd_seconds_write(int reg, int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_cmd_seconds_write(reg, value);
    }
}

#define TRACE_VIA1_RTC_CMD_TEST_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_CMD_TEST_WRITE) || \
    false)

static inline void _nocheck__trace_via1_rtc_cmd_test_write(int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_CMD_TEST_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 265 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_cmd_test_write " "value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , value);
#line 6263 "trace/trace-hw_misc.h"
        } else {
#line 265 "../hw/misc/trace-events"
            qemu_log("via1_rtc_cmd_test_write " "value=0x%02x" "\n", value);
#line 6267 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_cmd_test_write(int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_cmd_test_write(value);
    }
}

#define TRACE_VIA1_RTC_CMD_WPROTECT_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_CMD_WPROTECT_WRITE) || \
    false)

static inline void _nocheck__trace_via1_rtc_cmd_wprotect_write(int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_CMD_WPROTECT_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 266 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_cmd_wprotect_write " "value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , value);
#line 6294 "trace/trace-hw_misc.h"
        } else {
#line 266 "../hw/misc/trace-events"
            qemu_log("via1_rtc_cmd_wprotect_write " "value=0x%02x" "\n", value);
#line 6298 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_cmd_wprotect_write(int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_cmd_wprotect_write(value);
    }
}

#define TRACE_VIA1_RTC_CMD_PRAM_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_CMD_PRAM_READ) || \
    false)

static inline void _nocheck__trace_via1_rtc_cmd_pram_read(int addr, int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_CMD_PRAM_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 267 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_cmd_pram_read " "addr=%u value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 6325 "trace/trace-hw_misc.h"
        } else {
#line 267 "../hw/misc/trace-events"
            qemu_log("via1_rtc_cmd_pram_read " "addr=%u value=0x%02x" "\n", addr, value);
#line 6329 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_cmd_pram_read(int addr, int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_cmd_pram_read(addr, value);
    }
}

#define TRACE_VIA1_RTC_CMD_PRAM_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_CMD_PRAM_WRITE) || \
    false)

static inline void _nocheck__trace_via1_rtc_cmd_pram_write(int addr, int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_CMD_PRAM_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 268 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_cmd_pram_write " "addr=%u value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 6356 "trace/trace-hw_misc.h"
        } else {
#line 268 "../hw/misc/trace-events"
            qemu_log("via1_rtc_cmd_pram_write " "addr=%u value=0x%02x" "\n", addr, value);
#line 6360 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_cmd_pram_write(int addr, int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_cmd_pram_write(addr, value);
    }
}

#define TRACE_VIA1_RTC_CMD_PRAM_SECT_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_CMD_PRAM_SECT_READ) || \
    false)

static inline void _nocheck__trace_via1_rtc_cmd_pram_sect_read(int sector, int offset, int addr, int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_CMD_PRAM_SECT_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 269 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_cmd_pram_sect_read " "sector=%u offset=%u addr=0x%x value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , sector, offset, addr, value);
#line 6387 "trace/trace-hw_misc.h"
        } else {
#line 269 "../hw/misc/trace-events"
            qemu_log("via1_rtc_cmd_pram_sect_read " "sector=%u offset=%u addr=0x%x value=0x%02x" "\n", sector, offset, addr, value);
#line 6391 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_cmd_pram_sect_read(int sector, int offset, int addr, int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_cmd_pram_sect_read(sector, offset, addr, value);
    }
}

#define TRACE_VIA1_RTC_CMD_PRAM_SECT_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_CMD_PRAM_SECT_WRITE) || \
    false)

static inline void _nocheck__trace_via1_rtc_cmd_pram_sect_write(int sector, int offset, int addr, int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_CMD_PRAM_SECT_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 270 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_cmd_pram_sect_write " "sector=%u offset=%u addr=0x%x value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , sector, offset, addr, value);
#line 6418 "trace/trace-hw_misc.h"
        } else {
#line 270 "../hw/misc/trace-events"
            qemu_log("via1_rtc_cmd_pram_sect_write " "sector=%u offset=%u addr=0x%x value=0x%02x" "\n", sector, offset, addr, value);
#line 6422 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_cmd_pram_sect_write(int sector, int offset, int addr, int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_cmd_pram_sect_write(sector, offset, addr, value);
    }
}

#define TRACE_VIA1_ADB_SEND_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_ADB_SEND) || \
    false)

static inline void _nocheck__trace_via1_adb_send(const char * state, uint8_t data, const char * vadbint)
{
    if (trace_event_get_state(TRACE_VIA1_ADB_SEND) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 271 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_adb_send " "state %s data=0x%02x vADBInt=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, data, vadbint);
#line 6449 "trace/trace-hw_misc.h"
        } else {
#line 271 "../hw/misc/trace-events"
            qemu_log("via1_adb_send " "state %s data=0x%02x vADBInt=%s" "\n", state, data, vadbint);
#line 6453 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_adb_send(const char * state, uint8_t data, const char * vadbint)
{
    if (true) {
        _nocheck__trace_via1_adb_send(state, data, vadbint);
    }
}

#define TRACE_VIA1_ADB_RECEIVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_ADB_RECEIVE) || \
    false)

static inline void _nocheck__trace_via1_adb_receive(const char * state, uint8_t data, const char * vadbint, int status, int index, int size)
{
    if (trace_event_get_state(TRACE_VIA1_ADB_RECEIVE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 272 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_adb_receive " "state %s data=0x%02x vADBInt=%s status=0x%x index=%d size=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, data, vadbint, status, index, size);
#line 6480 "trace/trace-hw_misc.h"
        } else {
#line 272 "../hw/misc/trace-events"
            qemu_log("via1_adb_receive " "state %s data=0x%02x vADBInt=%s status=0x%x index=%d size=%d" "\n", state, data, vadbint, status, index, size);
#line 6484 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_adb_receive(const char * state, uint8_t data, const char * vadbint, int status, int index, int size)
{
    if (true) {
        _nocheck__trace_via1_adb_receive(state, data, vadbint, status, index, size);
    }
}

#define TRACE_VIA1_ADB_POLL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_ADB_POLL) || \
    false)

static inline void _nocheck__trace_via1_adb_poll(uint8_t data, const char * vadbint, int status, int index, int size)
{
    if (trace_event_get_state(TRACE_VIA1_ADB_POLL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 273 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_adb_poll " "data=0x%02x vADBInt=%s status=0x%x index=%d size=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , data, vadbint, status, index, size);
#line 6511 "trace/trace-hw_misc.h"
        } else {
#line 273 "../hw/misc/trace-events"
            qemu_log("via1_adb_poll " "data=0x%02x vADBInt=%s status=0x%x index=%d size=%d" "\n", data, vadbint, status, index, size);
#line 6515 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_adb_poll(uint8_t data, const char * vadbint, int status, int index, int size)
{
    if (true) {
        _nocheck__trace_via1_adb_poll(data, vadbint, status, index, size);
    }
}

#define TRACE_VIA1_AUXMODE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_AUXMODE) || \
    false)

static inline void _nocheck__trace_via1_auxmode(int mode)
{
    if (trace_event_get_state(TRACE_VIA1_AUXMODE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 274 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_auxmode " "setting auxmode to %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , mode);
#line 6542 "trace/trace-hw_misc.h"
        } else {
#line 274 "../hw/misc/trace-events"
            qemu_log("via1_auxmode " "setting auxmode to %d" "\n", mode);
#line 6546 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_auxmode(int mode)
{
    if (true) {
        _nocheck__trace_via1_auxmode(mode);
    }
}

#define TRACE_GRLIB_AHB_PNP_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_AHB_PNP_READ) || \
    false)

static inline void _nocheck__trace_grlib_ahb_pnp_read(uint64_t addr, unsigned size, uint32_t value)
{
    if (trace_event_get_state(TRACE_GRLIB_AHB_PNP_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 277 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:grlib_ahb_pnp_read " "AHB PnP read addr:0x%03"PRIx64" size:%u data:0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, value);
#line 6573 "trace/trace-hw_misc.h"
        } else {
#line 277 "../hw/misc/trace-events"
            qemu_log("grlib_ahb_pnp_read " "AHB PnP read addr:0x%03"PRIx64" size:%u data:0x%08x" "\n", addr, size, value);
#line 6577 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_grlib_ahb_pnp_read(uint64_t addr, unsigned size, uint32_t value)
{
    if (true) {
        _nocheck__trace_grlib_ahb_pnp_read(addr, size, value);
    }
}

#define TRACE_GRLIB_APB_PNP_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_APB_PNP_READ) || \
    false)

static inline void _nocheck__trace_grlib_apb_pnp_read(uint64_t addr, unsigned size, uint32_t value)
{
    if (trace_event_get_state(TRACE_GRLIB_APB_PNP_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 278 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:grlib_apb_pnp_read " "APB PnP read addr:0x%03"PRIx64" size:%u data:0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, value);
#line 6604 "trace/trace-hw_misc.h"
        } else {
#line 278 "../hw/misc/trace-events"
            qemu_log("grlib_apb_pnp_read " "APB PnP read addr:0x%03"PRIx64" size:%u data:0x%08x" "\n", addr, size, value);
#line 6608 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_grlib_apb_pnp_read(uint64_t addr, unsigned size, uint32_t value)
{
    if (true) {
        _nocheck__trace_grlib_apb_pnp_read(addr, size, value);
    }
}

#define TRACE_LED_SET_INTENSITY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LED_SET_INTENSITY) || \
    false)

static inline void _nocheck__trace_led_set_intensity(const char * color, const char * desc, uint8_t intensity_percent)
{
    if (trace_event_get_state(TRACE_LED_SET_INTENSITY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 281 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:led_set_intensity " "LED desc:'%s' color:%s intensity: %u%%" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , color, desc, intensity_percent);
#line 6635 "trace/trace-hw_misc.h"
        } else {
#line 281 "../hw/misc/trace-events"
            qemu_log("led_set_intensity " "LED desc:'%s' color:%s intensity: %u%%" "\n", color, desc, intensity_percent);
#line 6639 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_led_set_intensity(const char * color, const char * desc, uint8_t intensity_percent)
{
    if (true) {
        _nocheck__trace_led_set_intensity(color, desc, intensity_percent);
    }
}

#define TRACE_LED_CHANGE_INTENSITY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LED_CHANGE_INTENSITY) || \
    false)

static inline void _nocheck__trace_led_change_intensity(const char * color, const char * desc, uint8_t old_intensity_percent, uint8_t new_intensity_percent)
{
    if (trace_event_get_state(TRACE_LED_CHANGE_INTENSITY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 282 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:led_change_intensity " "LED desc:'%s' color:%s intensity %u%% -> %u%%" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , color, desc, old_intensity_percent, new_intensity_percent);
#line 6666 "trace/trace-hw_misc.h"
        } else {
#line 282 "../hw/misc/trace-events"
            qemu_log("led_change_intensity " "LED desc:'%s' color:%s intensity %u%% -> %u%%" "\n", color, desc, old_intensity_percent, new_intensity_percent);
#line 6670 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_led_change_intensity(const char * color, const char * desc, uint8_t old_intensity_percent, uint8_t new_intensity_percent)
{
    if (true) {
        _nocheck__trace_led_change_intensity(color, desc, old_intensity_percent, new_intensity_percent);
    }
}

#define TRACE_PCA955X_GPIO_STATUS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PCA955X_GPIO_STATUS) || \
    false)

static inline void _nocheck__trace_pca955x_gpio_status(const char * description, const char * buf)
{
    if (trace_event_get_state(TRACE_PCA955X_GPIO_STATUS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 285 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:pca955x_gpio_status " "%s GPIOs 0-15 [%s]" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , description, buf);
#line 6697 "trace/trace-hw_misc.h"
        } else {
#line 285 "../hw/misc/trace-events"
            qemu_log("pca955x_gpio_status " "%s GPIOs 0-15 [%s]" "\n", description, buf);
#line 6701 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_pca955x_gpio_status(const char * description, const char * buf)
{
    if (true) {
        _nocheck__trace_pca955x_gpio_status(description, buf);
    }
}

#define TRACE_PCA955X_GPIO_CHANGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PCA955X_GPIO_CHANGE) || \
    false)

static inline void _nocheck__trace_pca955x_gpio_change(const char * description, unsigned id, unsigned prev_state, unsigned current_state)
{
    if (trace_event_get_state(TRACE_PCA955X_GPIO_CHANGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 286 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:pca955x_gpio_change " "%s GPIO id:%u status: %u -> %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , description, id, prev_state, current_state);
#line 6728 "trace/trace-hw_misc.h"
        } else {
#line 286 "../hw/misc/trace-events"
            qemu_log("pca955x_gpio_change " "%s GPIO id:%u status: %u -> %u" "\n", description, id, prev_state, current_state);
#line 6732 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_pca955x_gpio_change(const char * description, unsigned id, unsigned prev_state, unsigned current_state)
{
    if (true) {
        _nocheck__trace_pca955x_gpio_change(description, id, prev_state, current_state);
    }
}

#define TRACE_BCM2835_CPRMAN_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_CPRMAN_READ) || \
    false)

static inline void _nocheck__trace_bcm2835_cprman_read(uint64_t offset, uint64_t value)
{
    if (trace_event_get_state(TRACE_BCM2835_CPRMAN_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 289 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_cprman_read " "offset:0x%" PRIx64 " value:0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value);
#line 6759 "trace/trace-hw_misc.h"
        } else {
#line 289 "../hw/misc/trace-events"
            qemu_log("bcm2835_cprman_read " "offset:0x%" PRIx64 " value:0x%" PRIx64 "\n", offset, value);
#line 6763 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_bcm2835_cprman_read(uint64_t offset, uint64_t value)
{
    if (true) {
        _nocheck__trace_bcm2835_cprman_read(offset, value);
    }
}

#define TRACE_BCM2835_CPRMAN_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_CPRMAN_WRITE) || \
    false)

static inline void _nocheck__trace_bcm2835_cprman_write(uint64_t offset, uint64_t value)
{
    if (trace_event_get_state(TRACE_BCM2835_CPRMAN_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 290 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_cprman_write " "offset:0x%" PRIx64 " value:0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value);
#line 6790 "trace/trace-hw_misc.h"
        } else {
#line 290 "../hw/misc/trace-events"
            qemu_log("bcm2835_cprman_write " "offset:0x%" PRIx64 " value:0x%" PRIx64 "\n", offset, value);
#line 6794 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_bcm2835_cprman_write(uint64_t offset, uint64_t value)
{
    if (true) {
        _nocheck__trace_bcm2835_cprman_write(offset, value);
    }
}

#define TRACE_BCM2835_CPRMAN_WRITE_INVALID_MAGIC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_CPRMAN_WRITE_INVALID_MAGIC) || \
    false)

static inline void _nocheck__trace_bcm2835_cprman_write_invalid_magic(uint64_t offset, uint64_t value)
{
    if (trace_event_get_state(TRACE_BCM2835_CPRMAN_WRITE_INVALID_MAGIC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 291 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_cprman_write_invalid_magic " "offset:0x%" PRIx64 " value:0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value);
#line 6821 "trace/trace-hw_misc.h"
        } else {
#line 291 "../hw/misc/trace-events"
            qemu_log("bcm2835_cprman_write_invalid_magic " "offset:0x%" PRIx64 " value:0x%" PRIx64 "\n", offset, value);
#line 6825 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_bcm2835_cprman_write_invalid_magic(uint64_t offset, uint64_t value)
{
    if (true) {
        _nocheck__trace_bcm2835_cprman_write_invalid_magic(offset, value);
    }
}

#define TRACE_VIRT_CTRL_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRT_CTRL_READ) || \
    false)

static inline void _nocheck__trace_virt_ctrl_read(void * dev, unsigned int addr, unsigned int size, uint64_t value)
{
    if (trace_event_get_state(TRACE_VIRT_CTRL_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 294 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:virt_ctrl_read " "ctrl: %p reg: 0x%02x size: %d value: 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev, addr, size, value);
#line 6852 "trace/trace-hw_misc.h"
        } else {
#line 294 "../hw/misc/trace-events"
            qemu_log("virt_ctrl_read " "ctrl: %p reg: 0x%02x size: %d value: 0x%"PRIx64 "\n", dev, addr, size, value);
#line 6856 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_virt_ctrl_read(void * dev, unsigned int addr, unsigned int size, uint64_t value)
{
    if (true) {
        _nocheck__trace_virt_ctrl_read(dev, addr, size, value);
    }
}

#define TRACE_VIRT_CTRL_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRT_CTRL_WRITE) || \
    false)

static inline void _nocheck__trace_virt_ctrl_write(void * dev, unsigned int addr, unsigned int size, uint64_t value)
{
    if (trace_event_get_state(TRACE_VIRT_CTRL_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 295 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:virt_ctrl_write " "ctrl: %p reg: 0x%02x size: %d value: 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev, addr, size, value);
#line 6883 "trace/trace-hw_misc.h"
        } else {
#line 295 "../hw/misc/trace-events"
            qemu_log("virt_ctrl_write " "ctrl: %p reg: 0x%02x size: %d value: 0x%"PRIx64 "\n", dev, addr, size, value);
#line 6887 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_virt_ctrl_write(void * dev, unsigned int addr, unsigned int size, uint64_t value)
{
    if (true) {
        _nocheck__trace_virt_ctrl_write(dev, addr, size, value);
    }
}

#define TRACE_VIRT_CTRL_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRT_CTRL_RESET) || \
    false)

static inline void _nocheck__trace_virt_ctrl_reset(void * dev)
{
    if (trace_event_get_state(TRACE_VIRT_CTRL_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 296 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:virt_ctrl_reset " "ctrl: %p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev);
#line 6914 "trace/trace-hw_misc.h"
        } else {
#line 296 "../hw/misc/trace-events"
            qemu_log("virt_ctrl_reset " "ctrl: %p" "\n", dev);
#line 6918 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_virt_ctrl_reset(void * dev)
{
    if (true) {
        _nocheck__trace_virt_ctrl_reset(dev);
    }
}

#define TRACE_VIRT_CTRL_REALIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRT_CTRL_REALIZE) || \
    false)

static inline void _nocheck__trace_virt_ctrl_realize(void * dev)
{
    if (trace_event_get_state(TRACE_VIRT_CTRL_REALIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 297 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:virt_ctrl_realize " "ctrl: %p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev);
#line 6945 "trace/trace-hw_misc.h"
        } else {
#line 297 "../hw/misc/trace-events"
            qemu_log("virt_ctrl_realize " "ctrl: %p" "\n", dev);
#line 6949 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_virt_ctrl_realize(void * dev)
{
    if (true) {
        _nocheck__trace_virt_ctrl_realize(dev);
    }
}

#define TRACE_VIRT_CTRL_INSTANCE_INIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRT_CTRL_INSTANCE_INIT) || \
    false)

static inline void _nocheck__trace_virt_ctrl_instance_init(void * dev)
{
    if (trace_event_get_state(TRACE_VIRT_CTRL_INSTANCE_INIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 298 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:virt_ctrl_instance_init " "ctrl: %p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev);
#line 6976 "trace/trace-hw_misc.h"
        } else {
#line 298 "../hw/misc/trace-events"
            qemu_log("virt_ctrl_instance_init " "ctrl: %p" "\n", dev);
#line 6980 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_virt_ctrl_instance_init(void * dev)
{
    if (true) {
        _nocheck__trace_virt_ctrl_instance_init(dev);
    }
}

#define TRACE_LASI_CHIP_MEM_VALID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LASI_CHIP_MEM_VALID) || \
    false)

static inline void _nocheck__trace_lasi_chip_mem_valid(uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_LASI_CHIP_MEM_VALID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 301 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:lasi_chip_mem_valid " "access to addr 0x%"PRIx64" is %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 7007 "trace/trace-hw_misc.h"
        } else {
#line 301 "../hw/misc/trace-events"
            qemu_log("lasi_chip_mem_valid " "access to addr 0x%"PRIx64" is %d" "\n", addr, val);
#line 7011 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_lasi_chip_mem_valid(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_lasi_chip_mem_valid(addr, val);
    }
}

#define TRACE_LASI_CHIP_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LASI_CHIP_READ) || \
    false)

static inline void _nocheck__trace_lasi_chip_read(uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_LASI_CHIP_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 302 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:lasi_chip_read " "addr 0x%"PRIx64" val 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 7038 "trace/trace-hw_misc.h"
        } else {
#line 302 "../hw/misc/trace-events"
            qemu_log("lasi_chip_read " "addr 0x%"PRIx64" val 0x%08x" "\n", addr, val);
#line 7042 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_lasi_chip_read(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_lasi_chip_read(addr, val);
    }
}

#define TRACE_LASI_CHIP_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LASI_CHIP_WRITE) || \
    false)

static inline void _nocheck__trace_lasi_chip_write(uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_LASI_CHIP_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 303 "../hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:lasi_chip_write " "addr 0x%"PRIx64" val 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 7069 "trace/trace-hw_misc.h"
        } else {
#line 303 "../hw/misc/trace-events"
            qemu_log("lasi_chip_write " "addr 0x%"PRIx64" val 0x%08x" "\n", addr, val);
#line 7073 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_lasi_chip_write(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_lasi_chip_write(addr, val);
    }
}
#endif /* TRACE_HW_MISC_GENERATED_TRACERS_H */
