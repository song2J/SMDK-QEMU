/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_UFS_GENERATED_TRACERS_H
#define TRACE_HW_UFS_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_UFS_IRQ_RAISE_EVENT;
extern TraceEvent _TRACE_UFS_IRQ_LOWER_EVENT;
extern TraceEvent _TRACE_UFS_MMIO_READ_EVENT;
extern TraceEvent _TRACE_UFS_MMIO_WRITE_EVENT;
extern TraceEvent _TRACE_UFS_PROCESS_DB_EVENT;
extern TraceEvent _TRACE_UFS_PROCESS_REQ_EVENT;
extern TraceEvent _TRACE_UFS_COMPLETE_REQ_EVENT;
extern TraceEvent _TRACE_UFS_SENDBACK_REQ_EVENT;
extern TraceEvent _TRACE_UFS_EXEC_NOP_CMD_EVENT;
extern TraceEvent _TRACE_UFS_EXEC_SCSI_CMD_EVENT;
extern TraceEvent _TRACE_UFS_EXEC_QUERY_CMD_EVENT;
extern TraceEvent _TRACE_UFS_PROCESS_UICCMD_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_CHECK_CONDITION_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_READ_COMPLETE_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_READ_DATA_COUNT_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_READ_DATA_INVALID_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_WRITE_COMPLETE_NOIO_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_WRITE_DATA_INVALID_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_EMULATE_VPD_PAGE_00_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_EMULATE_VPD_PAGE_80_NOT_SUPPORTED_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_EMULATE_VPD_PAGE_80_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_EMULATE_VPD_PAGE_87_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_EMULATE_MODE_SENSE_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_EMULATE_READ_DATA_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_EMULATE_WRITE_DATA_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_EMULATE_COMMAND_START_STOP_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_EMULATE_COMMAND_FORMAT_UNIT_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_EMULATE_COMMAND_SEND_DIAGNOSTIC_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_EMULATE_COMMAND_SAI_16_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_EMULATE_COMMAND_SAI_UNSUPPORTED_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_EMULATE_COMMAND_MODE_SELECT_10_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_EMULATE_COMMAND_VERIFY_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_EMULATE_COMMAND_UNKNOWN_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_DMA_COMMAND_READ_EVENT;
extern TraceEvent _TRACE_UFS_SCSI_DMA_COMMAND_WRITE_EVENT;
extern TraceEvent _TRACE_UFS_ERR_DMA_READ_UTRD_EVENT;
extern TraceEvent _TRACE_UFS_ERR_DMA_READ_REQ_UPIU_EVENT;
extern TraceEvent _TRACE_UFS_ERR_DMA_READ_PRDT_EVENT;
extern TraceEvent _TRACE_UFS_ERR_DMA_WRITE_UTRD_EVENT;
extern TraceEvent _TRACE_UFS_ERR_DMA_WRITE_RSP_UPIU_EVENT;
extern TraceEvent _TRACE_UFS_ERR_UTRL_SLOT_ERROR_EVENT;
extern TraceEvent _TRACE_UFS_ERR_UTRL_SLOT_BUSY_EVENT;
extern TraceEvent _TRACE_UFS_ERR_UNSUPPORT_REGISTER_OFFSET_EVENT;
extern TraceEvent _TRACE_UFS_ERR_INVALID_REGISTER_OFFSET_EVENT;
extern TraceEvent _TRACE_UFS_ERR_SCSI_CMD_INVALID_LUN_EVENT;
extern TraceEvent _TRACE_UFS_ERR_QUERY_FLAG_NOT_READABLE_EVENT;
extern TraceEvent _TRACE_UFS_ERR_QUERY_FLAG_NOT_WRITABLE_EVENT;
extern TraceEvent _TRACE_UFS_ERR_QUERY_ATTR_NOT_READABLE_EVENT;
extern TraceEvent _TRACE_UFS_ERR_QUERY_ATTR_NOT_WRITABLE_EVENT;
extern TraceEvent _TRACE_UFS_ERR_QUERY_INVALID_OPCODE_EVENT;
extern TraceEvent _TRACE_UFS_ERR_QUERY_INVALID_IDN_EVENT;
extern TraceEvent _TRACE_UFS_ERR_QUERY_INVALID_INDEX_EVENT;
extern TraceEvent _TRACE_UFS_ERR_INVALID_TRANS_CODE_EVENT;
extern uint16_t _TRACE_UFS_IRQ_RAISE_DSTATE;
extern uint16_t _TRACE_UFS_IRQ_LOWER_DSTATE;
extern uint16_t _TRACE_UFS_MMIO_READ_DSTATE;
extern uint16_t _TRACE_UFS_MMIO_WRITE_DSTATE;
extern uint16_t _TRACE_UFS_PROCESS_DB_DSTATE;
extern uint16_t _TRACE_UFS_PROCESS_REQ_DSTATE;
extern uint16_t _TRACE_UFS_COMPLETE_REQ_DSTATE;
extern uint16_t _TRACE_UFS_SENDBACK_REQ_DSTATE;
extern uint16_t _TRACE_UFS_EXEC_NOP_CMD_DSTATE;
extern uint16_t _TRACE_UFS_EXEC_SCSI_CMD_DSTATE;
extern uint16_t _TRACE_UFS_EXEC_QUERY_CMD_DSTATE;
extern uint16_t _TRACE_UFS_PROCESS_UICCMD_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_CHECK_CONDITION_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_READ_COMPLETE_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_READ_DATA_COUNT_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_READ_DATA_INVALID_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_WRITE_COMPLETE_NOIO_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_WRITE_DATA_INVALID_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_EMULATE_VPD_PAGE_00_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_EMULATE_VPD_PAGE_80_NOT_SUPPORTED_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_EMULATE_VPD_PAGE_80_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_EMULATE_VPD_PAGE_87_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_EMULATE_MODE_SENSE_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_EMULATE_READ_DATA_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_EMULATE_WRITE_DATA_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_EMULATE_COMMAND_START_STOP_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_EMULATE_COMMAND_FORMAT_UNIT_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_EMULATE_COMMAND_SEND_DIAGNOSTIC_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_EMULATE_COMMAND_SAI_16_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_EMULATE_COMMAND_SAI_UNSUPPORTED_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_EMULATE_COMMAND_MODE_SELECT_10_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_EMULATE_COMMAND_VERIFY_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_EMULATE_COMMAND_UNKNOWN_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_DMA_COMMAND_READ_DSTATE;
extern uint16_t _TRACE_UFS_SCSI_DMA_COMMAND_WRITE_DSTATE;
extern uint16_t _TRACE_UFS_ERR_DMA_READ_UTRD_DSTATE;
extern uint16_t _TRACE_UFS_ERR_DMA_READ_REQ_UPIU_DSTATE;
extern uint16_t _TRACE_UFS_ERR_DMA_READ_PRDT_DSTATE;
extern uint16_t _TRACE_UFS_ERR_DMA_WRITE_UTRD_DSTATE;
extern uint16_t _TRACE_UFS_ERR_DMA_WRITE_RSP_UPIU_DSTATE;
extern uint16_t _TRACE_UFS_ERR_UTRL_SLOT_ERROR_DSTATE;
extern uint16_t _TRACE_UFS_ERR_UTRL_SLOT_BUSY_DSTATE;
extern uint16_t _TRACE_UFS_ERR_UNSUPPORT_REGISTER_OFFSET_DSTATE;
extern uint16_t _TRACE_UFS_ERR_INVALID_REGISTER_OFFSET_DSTATE;
extern uint16_t _TRACE_UFS_ERR_SCSI_CMD_INVALID_LUN_DSTATE;
extern uint16_t _TRACE_UFS_ERR_QUERY_FLAG_NOT_READABLE_DSTATE;
extern uint16_t _TRACE_UFS_ERR_QUERY_FLAG_NOT_WRITABLE_DSTATE;
extern uint16_t _TRACE_UFS_ERR_QUERY_ATTR_NOT_READABLE_DSTATE;
extern uint16_t _TRACE_UFS_ERR_QUERY_ATTR_NOT_WRITABLE_DSTATE;
extern uint16_t _TRACE_UFS_ERR_QUERY_INVALID_OPCODE_DSTATE;
extern uint16_t _TRACE_UFS_ERR_QUERY_INVALID_IDN_DSTATE;
extern uint16_t _TRACE_UFS_ERR_QUERY_INVALID_INDEX_DSTATE;
extern uint16_t _TRACE_UFS_ERR_INVALID_TRANS_CODE_DSTATE;
#define TRACE_UFS_IRQ_RAISE_ENABLED 1
#define TRACE_UFS_IRQ_LOWER_ENABLED 1
#define TRACE_UFS_MMIO_READ_ENABLED 1
#define TRACE_UFS_MMIO_WRITE_ENABLED 1
#define TRACE_UFS_PROCESS_DB_ENABLED 1
#define TRACE_UFS_PROCESS_REQ_ENABLED 1
#define TRACE_UFS_COMPLETE_REQ_ENABLED 1
#define TRACE_UFS_SENDBACK_REQ_ENABLED 1
#define TRACE_UFS_EXEC_NOP_CMD_ENABLED 1
#define TRACE_UFS_EXEC_SCSI_CMD_ENABLED 1
#define TRACE_UFS_EXEC_QUERY_CMD_ENABLED 1
#define TRACE_UFS_PROCESS_UICCMD_ENABLED 1
#define TRACE_UFS_SCSI_CHECK_CONDITION_ENABLED 1
#define TRACE_UFS_SCSI_READ_COMPLETE_ENABLED 1
#define TRACE_UFS_SCSI_READ_DATA_COUNT_ENABLED 1
#define TRACE_UFS_SCSI_READ_DATA_INVALID_ENABLED 1
#define TRACE_UFS_SCSI_WRITE_COMPLETE_NOIO_ENABLED 1
#define TRACE_UFS_SCSI_WRITE_DATA_INVALID_ENABLED 1
#define TRACE_UFS_SCSI_EMULATE_VPD_PAGE_00_ENABLED 1
#define TRACE_UFS_SCSI_EMULATE_VPD_PAGE_80_NOT_SUPPORTED_ENABLED 1
#define TRACE_UFS_SCSI_EMULATE_VPD_PAGE_80_ENABLED 1
#define TRACE_UFS_SCSI_EMULATE_VPD_PAGE_87_ENABLED 1
#define TRACE_UFS_SCSI_EMULATE_MODE_SENSE_ENABLED 1
#define TRACE_UFS_SCSI_EMULATE_READ_DATA_ENABLED 1
#define TRACE_UFS_SCSI_EMULATE_WRITE_DATA_ENABLED 1
#define TRACE_UFS_SCSI_EMULATE_COMMAND_START_STOP_ENABLED 1
#define TRACE_UFS_SCSI_EMULATE_COMMAND_FORMAT_UNIT_ENABLED 1
#define TRACE_UFS_SCSI_EMULATE_COMMAND_SEND_DIAGNOSTIC_ENABLED 1
#define TRACE_UFS_SCSI_EMULATE_COMMAND_SAI_16_ENABLED 1
#define TRACE_UFS_SCSI_EMULATE_COMMAND_SAI_UNSUPPORTED_ENABLED 1
#define TRACE_UFS_SCSI_EMULATE_COMMAND_MODE_SELECT_10_ENABLED 1
#define TRACE_UFS_SCSI_EMULATE_COMMAND_VERIFY_ENABLED 1
#define TRACE_UFS_SCSI_EMULATE_COMMAND_UNKNOWN_ENABLED 1
#define TRACE_UFS_SCSI_DMA_COMMAND_READ_ENABLED 1
#define TRACE_UFS_SCSI_DMA_COMMAND_WRITE_ENABLED 1
#define TRACE_UFS_ERR_DMA_READ_UTRD_ENABLED 1
#define TRACE_UFS_ERR_DMA_READ_REQ_UPIU_ENABLED 1
#define TRACE_UFS_ERR_DMA_READ_PRDT_ENABLED 1
#define TRACE_UFS_ERR_DMA_WRITE_UTRD_ENABLED 1
#define TRACE_UFS_ERR_DMA_WRITE_RSP_UPIU_ENABLED 1
#define TRACE_UFS_ERR_UTRL_SLOT_ERROR_ENABLED 1
#define TRACE_UFS_ERR_UTRL_SLOT_BUSY_ENABLED 1
#define TRACE_UFS_ERR_UNSUPPORT_REGISTER_OFFSET_ENABLED 1
#define TRACE_UFS_ERR_INVALID_REGISTER_OFFSET_ENABLED 1
#define TRACE_UFS_ERR_SCSI_CMD_INVALID_LUN_ENABLED 1
#define TRACE_UFS_ERR_QUERY_FLAG_NOT_READABLE_ENABLED 1
#define TRACE_UFS_ERR_QUERY_FLAG_NOT_WRITABLE_ENABLED 1
#define TRACE_UFS_ERR_QUERY_ATTR_NOT_READABLE_ENABLED 1
#define TRACE_UFS_ERR_QUERY_ATTR_NOT_WRITABLE_ENABLED 1
#define TRACE_UFS_ERR_QUERY_INVALID_OPCODE_ENABLED 1
#define TRACE_UFS_ERR_QUERY_INVALID_IDN_ENABLED 1
#define TRACE_UFS_ERR_QUERY_INVALID_INDEX_ENABLED 1
#define TRACE_UFS_ERR_INVALID_TRANS_CODE_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_UFS_IRQ_RAISE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_IRQ_RAISE) || \
    false)

static inline void _nocheck__trace_ufs_irq_raise(void)
{
    if (trace_event_get_state(TRACE_UFS_IRQ_RAISE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 2 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_irq_raise " "INTx" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 187 "trace/trace-hw_ufs.h"
        } else {
#line 2 "../hw/ufs/trace-events"
            qemu_log("ufs_irq_raise " "INTx" "\n");
#line 191 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_irq_raise(void)
{
    if (true) {
        _nocheck__trace_ufs_irq_raise();
    }
}

#define TRACE_UFS_IRQ_LOWER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_IRQ_LOWER) || \
    false)

static inline void _nocheck__trace_ufs_irq_lower(void)
{
    if (trace_event_get_state(TRACE_UFS_IRQ_LOWER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 3 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_irq_lower " "INTx" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 218 "trace/trace-hw_ufs.h"
        } else {
#line 3 "../hw/ufs/trace-events"
            qemu_log("ufs_irq_lower " "INTx" "\n");
#line 222 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_irq_lower(void)
{
    if (true) {
        _nocheck__trace_ufs_irq_lower();
    }
}

#define TRACE_UFS_MMIO_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_MMIO_READ) || \
    false)

static inline void _nocheck__trace_ufs_mmio_read(uint64_t addr, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_UFS_MMIO_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_mmio_read " "addr 0x%"PRIx64" data 0x%"PRIx64" size %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, data, size);
#line 249 "trace/trace-hw_ufs.h"
        } else {
#line 4 "../hw/ufs/trace-events"
            qemu_log("ufs_mmio_read " "addr 0x%"PRIx64" data 0x%"PRIx64" size %d" "\n", addr, data, size);
#line 253 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_mmio_read(uint64_t addr, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_ufs_mmio_read(addr, data, size);
    }
}

#define TRACE_UFS_MMIO_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_MMIO_WRITE) || \
    false)

static inline void _nocheck__trace_ufs_mmio_write(uint64_t addr, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_UFS_MMIO_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_mmio_write " "addr 0x%"PRIx64" data 0x%"PRIx64" size %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, data, size);
#line 280 "trace/trace-hw_ufs.h"
        } else {
#line 5 "../hw/ufs/trace-events"
            qemu_log("ufs_mmio_write " "addr 0x%"PRIx64" data 0x%"PRIx64" size %d" "\n", addr, data, size);
#line 284 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_mmio_write(uint64_t addr, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_ufs_mmio_write(addr, data, size);
    }
}

#define TRACE_UFS_PROCESS_DB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_PROCESS_DB) || \
    false)

static inline void _nocheck__trace_ufs_process_db(uint32_t slot)
{
    if (trace_event_get_state(TRACE_UFS_PROCESS_DB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_process_db " "UTRLDBR slot %"PRIu32"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot);
#line 311 "trace/trace-hw_ufs.h"
        } else {
#line 6 "../hw/ufs/trace-events"
            qemu_log("ufs_process_db " "UTRLDBR slot %"PRIu32"" "\n", slot);
#line 315 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_process_db(uint32_t slot)
{
    if (true) {
        _nocheck__trace_ufs_process_db(slot);
    }
}

#define TRACE_UFS_PROCESS_REQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_PROCESS_REQ) || \
    false)

static inline void _nocheck__trace_ufs_process_req(uint32_t slot)
{
    if (trace_event_get_state(TRACE_UFS_PROCESS_REQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_process_req " "UTRLDBR slot %"PRIu32"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot);
#line 342 "trace/trace-hw_ufs.h"
        } else {
#line 7 "../hw/ufs/trace-events"
            qemu_log("ufs_process_req " "UTRLDBR slot %"PRIu32"" "\n", slot);
#line 346 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_process_req(uint32_t slot)
{
    if (true) {
        _nocheck__trace_ufs_process_req(slot);
    }
}

#define TRACE_UFS_COMPLETE_REQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_COMPLETE_REQ) || \
    false)

static inline void _nocheck__trace_ufs_complete_req(uint32_t slot)
{
    if (trace_event_get_state(TRACE_UFS_COMPLETE_REQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_complete_req " "UTRLDBR slot %"PRIu32"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot);
#line 373 "trace/trace-hw_ufs.h"
        } else {
#line 8 "../hw/ufs/trace-events"
            qemu_log("ufs_complete_req " "UTRLDBR slot %"PRIu32"" "\n", slot);
#line 377 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_complete_req(uint32_t slot)
{
    if (true) {
        _nocheck__trace_ufs_complete_req(slot);
    }
}

#define TRACE_UFS_SENDBACK_REQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SENDBACK_REQ) || \
    false)

static inline void _nocheck__trace_ufs_sendback_req(uint32_t slot)
{
    if (trace_event_get_state(TRACE_UFS_SENDBACK_REQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_sendback_req " "UTRLDBR slot %"PRIu32"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot);
#line 404 "trace/trace-hw_ufs.h"
        } else {
#line 9 "../hw/ufs/trace-events"
            qemu_log("ufs_sendback_req " "UTRLDBR slot %"PRIu32"" "\n", slot);
#line 408 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_sendback_req(uint32_t slot)
{
    if (true) {
        _nocheck__trace_ufs_sendback_req(slot);
    }
}

#define TRACE_UFS_EXEC_NOP_CMD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_EXEC_NOP_CMD) || \
    false)

static inline void _nocheck__trace_ufs_exec_nop_cmd(uint32_t slot)
{
    if (trace_event_get_state(TRACE_UFS_EXEC_NOP_CMD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_exec_nop_cmd " "UTRLDBR slot %"PRIu32"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot);
#line 435 "trace/trace-hw_ufs.h"
        } else {
#line 10 "../hw/ufs/trace-events"
            qemu_log("ufs_exec_nop_cmd " "UTRLDBR slot %"PRIu32"" "\n", slot);
#line 439 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_exec_nop_cmd(uint32_t slot)
{
    if (true) {
        _nocheck__trace_ufs_exec_nop_cmd(slot);
    }
}

#define TRACE_UFS_EXEC_SCSI_CMD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_EXEC_SCSI_CMD) || \
    false)

static inline void _nocheck__trace_ufs_exec_scsi_cmd(uint32_t slot, uint8_t lun, uint8_t opcode)
{
    if (trace_event_get_state(TRACE_UFS_EXEC_SCSI_CMD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_exec_scsi_cmd " "slot %"PRIu32", lun 0x%"PRIx8", opcode 0x%"PRIx8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot, lun, opcode);
#line 466 "trace/trace-hw_ufs.h"
        } else {
#line 11 "../hw/ufs/trace-events"
            qemu_log("ufs_exec_scsi_cmd " "slot %"PRIu32", lun 0x%"PRIx8", opcode 0x%"PRIx8"" "\n", slot, lun, opcode);
#line 470 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_exec_scsi_cmd(uint32_t slot, uint8_t lun, uint8_t opcode)
{
    if (true) {
        _nocheck__trace_ufs_exec_scsi_cmd(slot, lun, opcode);
    }
}

#define TRACE_UFS_EXEC_QUERY_CMD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_EXEC_QUERY_CMD) || \
    false)

static inline void _nocheck__trace_ufs_exec_query_cmd(uint32_t slot, uint8_t opcode)
{
    if (trace_event_get_state(TRACE_UFS_EXEC_QUERY_CMD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_exec_query_cmd " "slot %"PRIu32", opcode 0x%"PRIx8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot, opcode);
#line 497 "trace/trace-hw_ufs.h"
        } else {
#line 12 "../hw/ufs/trace-events"
            qemu_log("ufs_exec_query_cmd " "slot %"PRIu32", opcode 0x%"PRIx8"" "\n", slot, opcode);
#line 501 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_exec_query_cmd(uint32_t slot, uint8_t opcode)
{
    if (true) {
        _nocheck__trace_ufs_exec_query_cmd(slot, opcode);
    }
}

#define TRACE_UFS_PROCESS_UICCMD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_PROCESS_UICCMD) || \
    false)

static inline void _nocheck__trace_ufs_process_uiccmd(uint32_t uiccmd, uint32_t ucmdarg1, uint32_t ucmdarg2, uint32_t ucmdarg3)
{
    if (trace_event_get_state(TRACE_UFS_PROCESS_UICCMD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_process_uiccmd " "uiccmd 0x%"PRIx32", ucmdarg1 0x%"PRIx32", ucmdarg2 0x%"PRIx32", ucmdarg3 0x%"PRIx32"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , uiccmd, ucmdarg1, ucmdarg2, ucmdarg3);
#line 528 "trace/trace-hw_ufs.h"
        } else {
#line 13 "../hw/ufs/trace-events"
            qemu_log("ufs_process_uiccmd " "uiccmd 0x%"PRIx32", ucmdarg1 0x%"PRIx32", ucmdarg2 0x%"PRIx32", ucmdarg3 0x%"PRIx32"" "\n", uiccmd, ucmdarg1, ucmdarg2, ucmdarg3);
#line 532 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_process_uiccmd(uint32_t uiccmd, uint32_t ucmdarg1, uint32_t ucmdarg2, uint32_t ucmdarg3)
{
    if (true) {
        _nocheck__trace_ufs_process_uiccmd(uiccmd, ucmdarg1, ucmdarg2, ucmdarg3);
    }
}

#define TRACE_UFS_SCSI_CHECK_CONDITION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_CHECK_CONDITION) || \
    false)

static inline void _nocheck__trace_ufs_scsi_check_condition(uint32_t tag, uint8_t key, uint8_t asc, uint8_t ascq)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_CHECK_CONDITION) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_check_condition " "Command complete tag=0x%x sense=%d/%d/%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, key, asc, ascq);
#line 559 "trace/trace-hw_ufs.h"
        } else {
#line 16 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_check_condition " "Command complete tag=0x%x sense=%d/%d/%d" "\n", tag, key, asc, ascq);
#line 563 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_check_condition(uint32_t tag, uint8_t key, uint8_t asc, uint8_t ascq)
{
    if (true) {
        _nocheck__trace_ufs_scsi_check_condition(tag, key, asc, ascq);
    }
}

#define TRACE_UFS_SCSI_READ_COMPLETE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_READ_COMPLETE) || \
    false)

static inline void _nocheck__trace_ufs_scsi_read_complete(uint32_t tag, size_t size)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_READ_COMPLETE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 17 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_read_complete " "Data ready tag=0x%x len=%zd" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, size);
#line 590 "trace/trace-hw_ufs.h"
        } else {
#line 17 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_read_complete " "Data ready tag=0x%x len=%zd" "\n", tag, size);
#line 594 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_read_complete(uint32_t tag, size_t size)
{
    if (true) {
        _nocheck__trace_ufs_scsi_read_complete(tag, size);
    }
}

#define TRACE_UFS_SCSI_READ_DATA_COUNT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_READ_DATA_COUNT) || \
    false)

static inline void _nocheck__trace_ufs_scsi_read_data_count(uint32_t sector_count)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_READ_DATA_COUNT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 18 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_read_data_count " "Read sector_count=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , sector_count);
#line 621 "trace/trace-hw_ufs.h"
        } else {
#line 18 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_read_data_count " "Read sector_count=%d" "\n", sector_count);
#line 625 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_read_data_count(uint32_t sector_count)
{
    if (true) {
        _nocheck__trace_ufs_scsi_read_data_count(sector_count);
    }
}

#define TRACE_UFS_SCSI_READ_DATA_INVALID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_READ_DATA_INVALID) || \
    false)

static inline void _nocheck__trace_ufs_scsi_read_data_invalid(void)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_READ_DATA_INVALID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_read_data_invalid " "Data transfer direction invalid" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 652 "trace/trace-hw_ufs.h"
        } else {
#line 19 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_read_data_invalid " "Data transfer direction invalid" "\n");
#line 656 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_read_data_invalid(void)
{
    if (true) {
        _nocheck__trace_ufs_scsi_read_data_invalid();
    }
}

#define TRACE_UFS_SCSI_WRITE_COMPLETE_NOIO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_WRITE_COMPLETE_NOIO) || \
    false)

static inline void _nocheck__trace_ufs_scsi_write_complete_noio(uint32_t tag, size_t size)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_WRITE_COMPLETE_NOIO) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 20 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_write_complete_noio " "Write complete tag=0x%x more=%zd" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, size);
#line 683 "trace/trace-hw_ufs.h"
        } else {
#line 20 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_write_complete_noio " "Write complete tag=0x%x more=%zd" "\n", tag, size);
#line 687 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_write_complete_noio(uint32_t tag, size_t size)
{
    if (true) {
        _nocheck__trace_ufs_scsi_write_complete_noio(tag, size);
    }
}

#define TRACE_UFS_SCSI_WRITE_DATA_INVALID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_WRITE_DATA_INVALID) || \
    false)

static inline void _nocheck__trace_ufs_scsi_write_data_invalid(void)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_WRITE_DATA_INVALID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 21 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_write_data_invalid " "Data transfer direction invalid" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 714 "trace/trace-hw_ufs.h"
        } else {
#line 21 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_write_data_invalid " "Data transfer direction invalid" "\n");
#line 718 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_write_data_invalid(void)
{
    if (true) {
        _nocheck__trace_ufs_scsi_write_data_invalid();
    }
}

#define TRACE_UFS_SCSI_EMULATE_VPD_PAGE_00_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_EMULATE_VPD_PAGE_00) || \
    false)

static inline void _nocheck__trace_ufs_scsi_emulate_vpd_page_00(size_t xfer)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_EMULATE_VPD_PAGE_00) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_emulate_vpd_page_00 " "Inquiry EVPD[Supported pages] buffer size %zd" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , xfer);
#line 745 "trace/trace-hw_ufs.h"
        } else {
#line 22 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_emulate_vpd_page_00 " "Inquiry EVPD[Supported pages] buffer size %zd" "\n", xfer);
#line 749 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_emulate_vpd_page_00(size_t xfer)
{
    if (true) {
        _nocheck__trace_ufs_scsi_emulate_vpd_page_00(xfer);
    }
}

#define TRACE_UFS_SCSI_EMULATE_VPD_PAGE_80_NOT_SUPPORTED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_EMULATE_VPD_PAGE_80_NOT_SUPPORTED) || \
    false)

static inline void _nocheck__trace_ufs_scsi_emulate_vpd_page_80_not_supported(void)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_EMULATE_VPD_PAGE_80_NOT_SUPPORTED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 23 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_emulate_vpd_page_80_not_supported " "Inquiry EVPD[Serial number] not supported" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 776 "trace/trace-hw_ufs.h"
        } else {
#line 23 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_emulate_vpd_page_80_not_supported " "Inquiry EVPD[Serial number] not supported" "\n");
#line 780 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_emulate_vpd_page_80_not_supported(void)
{
    if (true) {
        _nocheck__trace_ufs_scsi_emulate_vpd_page_80_not_supported();
    }
}

#define TRACE_UFS_SCSI_EMULATE_VPD_PAGE_80_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_EMULATE_VPD_PAGE_80) || \
    false)

static inline void _nocheck__trace_ufs_scsi_emulate_vpd_page_80(size_t xfer)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_EMULATE_VPD_PAGE_80) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 24 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_emulate_vpd_page_80 " "Inquiry EVPD[Serial number] buffer size %zd" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , xfer);
#line 807 "trace/trace-hw_ufs.h"
        } else {
#line 24 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_emulate_vpd_page_80 " "Inquiry EVPD[Serial number] buffer size %zd" "\n", xfer);
#line 811 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_emulate_vpd_page_80(size_t xfer)
{
    if (true) {
        _nocheck__trace_ufs_scsi_emulate_vpd_page_80(xfer);
    }
}

#define TRACE_UFS_SCSI_EMULATE_VPD_PAGE_87_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_EMULATE_VPD_PAGE_87) || \
    false)

static inline void _nocheck__trace_ufs_scsi_emulate_vpd_page_87(size_t xfer)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_EMULATE_VPD_PAGE_87) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 25 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_emulate_vpd_page_87 " "Inquiry EVPD[Mode Page Policy] buffer size %zd" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , xfer);
#line 838 "trace/trace-hw_ufs.h"
        } else {
#line 25 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_emulate_vpd_page_87 " "Inquiry EVPD[Mode Page Policy] buffer size %zd" "\n", xfer);
#line 842 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_emulate_vpd_page_87(size_t xfer)
{
    if (true) {
        _nocheck__trace_ufs_scsi_emulate_vpd_page_87(xfer);
    }
}

#define TRACE_UFS_SCSI_EMULATE_MODE_SENSE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_EMULATE_MODE_SENSE) || \
    false)

static inline void _nocheck__trace_ufs_scsi_emulate_mode_sense(int cmd, int page, size_t xfer, int control)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_EMULATE_MODE_SENSE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 26 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_emulate_mode_sense " "Mode Sense(%d) (page %d, xfer %zd, page_control %d)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cmd, page, xfer, control);
#line 869 "trace/trace-hw_ufs.h"
        } else {
#line 26 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_emulate_mode_sense " "Mode Sense(%d) (page %d, xfer %zd, page_control %d)" "\n", cmd, page, xfer, control);
#line 873 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_emulate_mode_sense(int cmd, int page, size_t xfer, int control)
{
    if (true) {
        _nocheck__trace_ufs_scsi_emulate_mode_sense(cmd, page, xfer, control);
    }
}

#define TRACE_UFS_SCSI_EMULATE_READ_DATA_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_EMULATE_READ_DATA) || \
    false)

static inline void _nocheck__trace_ufs_scsi_emulate_read_data(int buflen)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_EMULATE_READ_DATA) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 27 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_emulate_read_data " "Read buf_len=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , buflen);
#line 900 "trace/trace-hw_ufs.h"
        } else {
#line 27 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_emulate_read_data " "Read buf_len=%d" "\n", buflen);
#line 904 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_emulate_read_data(int buflen)
{
    if (true) {
        _nocheck__trace_ufs_scsi_emulate_read_data(buflen);
    }
}

#define TRACE_UFS_SCSI_EMULATE_WRITE_DATA_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_EMULATE_WRITE_DATA) || \
    false)

static inline void _nocheck__trace_ufs_scsi_emulate_write_data(int buflen)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_EMULATE_WRITE_DATA) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 28 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_emulate_write_data " "Write buf_len=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , buflen);
#line 931 "trace/trace-hw_ufs.h"
        } else {
#line 28 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_emulate_write_data " "Write buf_len=%d" "\n", buflen);
#line 935 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_emulate_write_data(int buflen)
{
    if (true) {
        _nocheck__trace_ufs_scsi_emulate_write_data(buflen);
    }
}

#define TRACE_UFS_SCSI_EMULATE_COMMAND_START_STOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_EMULATE_COMMAND_START_STOP) || \
    false)

static inline void _nocheck__trace_ufs_scsi_emulate_command_START_STOP(void)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_EMULATE_COMMAND_START_STOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 29 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_emulate_command_START_STOP " "START STOP UNIT" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 962 "trace/trace-hw_ufs.h"
        } else {
#line 29 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_emulate_command_START_STOP " "START STOP UNIT" "\n");
#line 966 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_emulate_command_START_STOP(void)
{
    if (true) {
        _nocheck__trace_ufs_scsi_emulate_command_START_STOP();
    }
}

#define TRACE_UFS_SCSI_EMULATE_COMMAND_FORMAT_UNIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_EMULATE_COMMAND_FORMAT_UNIT) || \
    false)

static inline void _nocheck__trace_ufs_scsi_emulate_command_FORMAT_UNIT(void)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_EMULATE_COMMAND_FORMAT_UNIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 30 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_emulate_command_FORMAT_UNIT " "FORMAT UNIT" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 993 "trace/trace-hw_ufs.h"
        } else {
#line 30 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_emulate_command_FORMAT_UNIT " "FORMAT UNIT" "\n");
#line 997 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_emulate_command_FORMAT_UNIT(void)
{
    if (true) {
        _nocheck__trace_ufs_scsi_emulate_command_FORMAT_UNIT();
    }
}

#define TRACE_UFS_SCSI_EMULATE_COMMAND_SEND_DIAGNOSTIC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_EMULATE_COMMAND_SEND_DIAGNOSTIC) || \
    false)

static inline void _nocheck__trace_ufs_scsi_emulate_command_SEND_DIAGNOSTIC(void)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_EMULATE_COMMAND_SEND_DIAGNOSTIC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 31 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_emulate_command_SEND_DIAGNOSTIC " "SEND DIAGNOSTIC" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1024 "trace/trace-hw_ufs.h"
        } else {
#line 31 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_emulate_command_SEND_DIAGNOSTIC " "SEND DIAGNOSTIC" "\n");
#line 1028 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_emulate_command_SEND_DIAGNOSTIC(void)
{
    if (true) {
        _nocheck__trace_ufs_scsi_emulate_command_SEND_DIAGNOSTIC();
    }
}

#define TRACE_UFS_SCSI_EMULATE_COMMAND_SAI_16_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_EMULATE_COMMAND_SAI_16) || \
    false)

static inline void _nocheck__trace_ufs_scsi_emulate_command_SAI_16(void)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_EMULATE_COMMAND_SAI_16) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 32 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_emulate_command_SAI_16 " "SAI READ CAPACITY(16)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1055 "trace/trace-hw_ufs.h"
        } else {
#line 32 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_emulate_command_SAI_16 " "SAI READ CAPACITY(16)" "\n");
#line 1059 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_emulate_command_SAI_16(void)
{
    if (true) {
        _nocheck__trace_ufs_scsi_emulate_command_SAI_16();
    }
}

#define TRACE_UFS_SCSI_EMULATE_COMMAND_SAI_UNSUPPORTED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_EMULATE_COMMAND_SAI_UNSUPPORTED) || \
    false)

static inline void _nocheck__trace_ufs_scsi_emulate_command_SAI_unsupported(void)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_EMULATE_COMMAND_SAI_UNSUPPORTED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 33 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_emulate_command_SAI_unsupported " "Unsupported Service Action In" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1086 "trace/trace-hw_ufs.h"
        } else {
#line 33 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_emulate_command_SAI_unsupported " "Unsupported Service Action In" "\n");
#line 1090 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_emulate_command_SAI_unsupported(void)
{
    if (true) {
        _nocheck__trace_ufs_scsi_emulate_command_SAI_unsupported();
    }
}

#define TRACE_UFS_SCSI_EMULATE_COMMAND_MODE_SELECT_10_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_EMULATE_COMMAND_MODE_SELECT_10) || \
    false)

static inline void _nocheck__trace_ufs_scsi_emulate_command_MODE_SELECT_10(size_t xfer)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_EMULATE_COMMAND_MODE_SELECT_10) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 34 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_emulate_command_MODE_SELECT_10 " "Mode Select(10) (len %zd)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , xfer);
#line 1117 "trace/trace-hw_ufs.h"
        } else {
#line 34 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_emulate_command_MODE_SELECT_10 " "Mode Select(10) (len %zd)" "\n", xfer);
#line 1121 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_emulate_command_MODE_SELECT_10(size_t xfer)
{
    if (true) {
        _nocheck__trace_ufs_scsi_emulate_command_MODE_SELECT_10(xfer);
    }
}

#define TRACE_UFS_SCSI_EMULATE_COMMAND_VERIFY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_EMULATE_COMMAND_VERIFY) || \
    false)

static inline void _nocheck__trace_ufs_scsi_emulate_command_VERIFY(int bytchk)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_EMULATE_COMMAND_VERIFY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 35 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_emulate_command_VERIFY " "Verify (bytchk %d)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , bytchk);
#line 1148 "trace/trace-hw_ufs.h"
        } else {
#line 35 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_emulate_command_VERIFY " "Verify (bytchk %d)" "\n", bytchk);
#line 1152 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_emulate_command_VERIFY(int bytchk)
{
    if (true) {
        _nocheck__trace_ufs_scsi_emulate_command_VERIFY(bytchk);
    }
}

#define TRACE_UFS_SCSI_EMULATE_COMMAND_UNKNOWN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_EMULATE_COMMAND_UNKNOWN) || \
    false)

static inline void _nocheck__trace_ufs_scsi_emulate_command_UNKNOWN(int cmd, const char * name)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_EMULATE_COMMAND_UNKNOWN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 36 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_emulate_command_UNKNOWN " "Unknown SCSI command (0x%2.2x=%s)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cmd, name);
#line 1179 "trace/trace-hw_ufs.h"
        } else {
#line 36 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_emulate_command_UNKNOWN " "Unknown SCSI command (0x%2.2x=%s)" "\n", cmd, name);
#line 1183 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_emulate_command_UNKNOWN(int cmd, const char * name)
{
    if (true) {
        _nocheck__trace_ufs_scsi_emulate_command_UNKNOWN(cmd, name);
    }
}

#define TRACE_UFS_SCSI_DMA_COMMAND_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_DMA_COMMAND_READ) || \
    false)

static inline void _nocheck__trace_ufs_scsi_dma_command_READ(uint64_t lba, uint32_t len)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_DMA_COMMAND_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 37 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_dma_command_READ " "Read (block %" PRIu64 ", count %u)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , lba, len);
#line 1210 "trace/trace-hw_ufs.h"
        } else {
#line 37 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_dma_command_READ " "Read (block %" PRIu64 ", count %u)" "\n", lba, len);
#line 1214 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_dma_command_READ(uint64_t lba, uint32_t len)
{
    if (true) {
        _nocheck__trace_ufs_scsi_dma_command_READ(lba, len);
    }
}

#define TRACE_UFS_SCSI_DMA_COMMAND_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_SCSI_DMA_COMMAND_WRITE) || \
    false)

static inline void _nocheck__trace_ufs_scsi_dma_command_WRITE(uint64_t lba, int len)
{
    if (trace_event_get_state(TRACE_UFS_SCSI_DMA_COMMAND_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 38 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_scsi_dma_command_WRITE " "Write (block %" PRIu64 ", count %u)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , lba, len);
#line 1241 "trace/trace-hw_ufs.h"
        } else {
#line 38 "../hw/ufs/trace-events"
            qemu_log("ufs_scsi_dma_command_WRITE " "Write (block %" PRIu64 ", count %u)" "\n", lba, len);
#line 1245 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_scsi_dma_command_WRITE(uint64_t lba, int len)
{
    if (true) {
        _nocheck__trace_ufs_scsi_dma_command_WRITE(lba, len);
    }
}

#define TRACE_UFS_ERR_DMA_READ_UTRD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_DMA_READ_UTRD) || \
    false)

static inline void _nocheck__trace_ufs_err_dma_read_utrd(uint32_t slot, uint64_t addr)
{
    if (trace_event_get_state(TRACE_UFS_ERR_DMA_READ_UTRD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 41 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_dma_read_utrd " "failed to read utrd. UTRLDBR slot %"PRIu32", UTRD dma addr %"PRIu64"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot, addr);
#line 1272 "trace/trace-hw_ufs.h"
        } else {
#line 41 "../hw/ufs/trace-events"
            qemu_log("ufs_err_dma_read_utrd " "failed to read utrd. UTRLDBR slot %"PRIu32", UTRD dma addr %"PRIu64"" "\n", slot, addr);
#line 1276 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_dma_read_utrd(uint32_t slot, uint64_t addr)
{
    if (true) {
        _nocheck__trace_ufs_err_dma_read_utrd(slot, addr);
    }
}

#define TRACE_UFS_ERR_DMA_READ_REQ_UPIU_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_DMA_READ_REQ_UPIU) || \
    false)

static inline void _nocheck__trace_ufs_err_dma_read_req_upiu(uint32_t slot, uint64_t addr)
{
    if (trace_event_get_state(TRACE_UFS_ERR_DMA_READ_REQ_UPIU) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 42 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_dma_read_req_upiu " "failed to read req upiu. UTRLDBR slot %"PRIu32", request upiu addr %"PRIu64"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot, addr);
#line 1303 "trace/trace-hw_ufs.h"
        } else {
#line 42 "../hw/ufs/trace-events"
            qemu_log("ufs_err_dma_read_req_upiu " "failed to read req upiu. UTRLDBR slot %"PRIu32", request upiu addr %"PRIu64"" "\n", slot, addr);
#line 1307 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_dma_read_req_upiu(uint32_t slot, uint64_t addr)
{
    if (true) {
        _nocheck__trace_ufs_err_dma_read_req_upiu(slot, addr);
    }
}

#define TRACE_UFS_ERR_DMA_READ_PRDT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_DMA_READ_PRDT) || \
    false)

static inline void _nocheck__trace_ufs_err_dma_read_prdt(uint32_t slot, uint64_t addr)
{
    if (trace_event_get_state(TRACE_UFS_ERR_DMA_READ_PRDT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 43 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_dma_read_prdt " "failed to read prdt. UTRLDBR slot %"PRIu32", prdt addr %"PRIu64"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot, addr);
#line 1334 "trace/trace-hw_ufs.h"
        } else {
#line 43 "../hw/ufs/trace-events"
            qemu_log("ufs_err_dma_read_prdt " "failed to read prdt. UTRLDBR slot %"PRIu32", prdt addr %"PRIu64"" "\n", slot, addr);
#line 1338 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_dma_read_prdt(uint32_t slot, uint64_t addr)
{
    if (true) {
        _nocheck__trace_ufs_err_dma_read_prdt(slot, addr);
    }
}

#define TRACE_UFS_ERR_DMA_WRITE_UTRD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_DMA_WRITE_UTRD) || \
    false)

static inline void _nocheck__trace_ufs_err_dma_write_utrd(uint32_t slot, uint64_t addr)
{
    if (trace_event_get_state(TRACE_UFS_ERR_DMA_WRITE_UTRD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 44 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_dma_write_utrd " "failed to write utrd. UTRLDBR slot %"PRIu32", UTRD dma addr %"PRIu64"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot, addr);
#line 1365 "trace/trace-hw_ufs.h"
        } else {
#line 44 "../hw/ufs/trace-events"
            qemu_log("ufs_err_dma_write_utrd " "failed to write utrd. UTRLDBR slot %"PRIu32", UTRD dma addr %"PRIu64"" "\n", slot, addr);
#line 1369 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_dma_write_utrd(uint32_t slot, uint64_t addr)
{
    if (true) {
        _nocheck__trace_ufs_err_dma_write_utrd(slot, addr);
    }
}

#define TRACE_UFS_ERR_DMA_WRITE_RSP_UPIU_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_DMA_WRITE_RSP_UPIU) || \
    false)

static inline void _nocheck__trace_ufs_err_dma_write_rsp_upiu(uint32_t slot, uint64_t addr)
{
    if (trace_event_get_state(TRACE_UFS_ERR_DMA_WRITE_RSP_UPIU) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 45 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_dma_write_rsp_upiu " "failed to write rsp upiu. UTRLDBR slot %"PRIu32", response upiu addr %"PRIu64"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot, addr);
#line 1396 "trace/trace-hw_ufs.h"
        } else {
#line 45 "../hw/ufs/trace-events"
            qemu_log("ufs_err_dma_write_rsp_upiu " "failed to write rsp upiu. UTRLDBR slot %"PRIu32", response upiu addr %"PRIu64"" "\n", slot, addr);
#line 1400 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_dma_write_rsp_upiu(uint32_t slot, uint64_t addr)
{
    if (true) {
        _nocheck__trace_ufs_err_dma_write_rsp_upiu(slot, addr);
    }
}

#define TRACE_UFS_ERR_UTRL_SLOT_ERROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_UTRL_SLOT_ERROR) || \
    false)

static inline void _nocheck__trace_ufs_err_utrl_slot_error(uint32_t slot)
{
    if (trace_event_get_state(TRACE_UFS_ERR_UTRL_SLOT_ERROR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 46 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_utrl_slot_error " "UTRLDBR slot %"PRIu32" is in error" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot);
#line 1427 "trace/trace-hw_ufs.h"
        } else {
#line 46 "../hw/ufs/trace-events"
            qemu_log("ufs_err_utrl_slot_error " "UTRLDBR slot %"PRIu32" is in error" "\n", slot);
#line 1431 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_utrl_slot_error(uint32_t slot)
{
    if (true) {
        _nocheck__trace_ufs_err_utrl_slot_error(slot);
    }
}

#define TRACE_UFS_ERR_UTRL_SLOT_BUSY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_UTRL_SLOT_BUSY) || \
    false)

static inline void _nocheck__trace_ufs_err_utrl_slot_busy(uint32_t slot)
{
    if (trace_event_get_state(TRACE_UFS_ERR_UTRL_SLOT_BUSY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 47 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_utrl_slot_busy " "UTRLDBR slot %"PRIu32" is busy" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot);
#line 1458 "trace/trace-hw_ufs.h"
        } else {
#line 47 "../hw/ufs/trace-events"
            qemu_log("ufs_err_utrl_slot_busy " "UTRLDBR slot %"PRIu32" is busy" "\n", slot);
#line 1462 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_utrl_slot_busy(uint32_t slot)
{
    if (true) {
        _nocheck__trace_ufs_err_utrl_slot_busy(slot);
    }
}

#define TRACE_UFS_ERR_UNSUPPORT_REGISTER_OFFSET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_UNSUPPORT_REGISTER_OFFSET) || \
    false)

static inline void _nocheck__trace_ufs_err_unsupport_register_offset(uint32_t offset)
{
    if (trace_event_get_state(TRACE_UFS_ERR_UNSUPPORT_REGISTER_OFFSET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 48 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_unsupport_register_offset " "Register offset 0x%"PRIx32" is not yet supported" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset);
#line 1489 "trace/trace-hw_ufs.h"
        } else {
#line 48 "../hw/ufs/trace-events"
            qemu_log("ufs_err_unsupport_register_offset " "Register offset 0x%"PRIx32" is not yet supported" "\n", offset);
#line 1493 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_unsupport_register_offset(uint32_t offset)
{
    if (true) {
        _nocheck__trace_ufs_err_unsupport_register_offset(offset);
    }
}

#define TRACE_UFS_ERR_INVALID_REGISTER_OFFSET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_INVALID_REGISTER_OFFSET) || \
    false)

static inline void _nocheck__trace_ufs_err_invalid_register_offset(uint32_t offset)
{
    if (trace_event_get_state(TRACE_UFS_ERR_INVALID_REGISTER_OFFSET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 49 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_invalid_register_offset " "Register offset 0x%"PRIx32" is invalid" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset);
#line 1520 "trace/trace-hw_ufs.h"
        } else {
#line 49 "../hw/ufs/trace-events"
            qemu_log("ufs_err_invalid_register_offset " "Register offset 0x%"PRIx32" is invalid" "\n", offset);
#line 1524 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_invalid_register_offset(uint32_t offset)
{
    if (true) {
        _nocheck__trace_ufs_err_invalid_register_offset(offset);
    }
}

#define TRACE_UFS_ERR_SCSI_CMD_INVALID_LUN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_SCSI_CMD_INVALID_LUN) || \
    false)

static inline void _nocheck__trace_ufs_err_scsi_cmd_invalid_lun(uint8_t lun)
{
    if (trace_event_get_state(TRACE_UFS_ERR_SCSI_CMD_INVALID_LUN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 50 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_scsi_cmd_invalid_lun " "scsi command has invalid lun: 0x%"PRIx8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , lun);
#line 1551 "trace/trace-hw_ufs.h"
        } else {
#line 50 "../hw/ufs/trace-events"
            qemu_log("ufs_err_scsi_cmd_invalid_lun " "scsi command has invalid lun: 0x%"PRIx8"" "\n", lun);
#line 1555 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_scsi_cmd_invalid_lun(uint8_t lun)
{
    if (true) {
        _nocheck__trace_ufs_err_scsi_cmd_invalid_lun(lun);
    }
}

#define TRACE_UFS_ERR_QUERY_FLAG_NOT_READABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_QUERY_FLAG_NOT_READABLE) || \
    false)

static inline void _nocheck__trace_ufs_err_query_flag_not_readable(uint8_t idn)
{
    if (trace_event_get_state(TRACE_UFS_ERR_QUERY_FLAG_NOT_READABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 51 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_query_flag_not_readable " "query flag idn 0x%"PRIx8" is denied to read" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , idn);
#line 1582 "trace/trace-hw_ufs.h"
        } else {
#line 51 "../hw/ufs/trace-events"
            qemu_log("ufs_err_query_flag_not_readable " "query flag idn 0x%"PRIx8" is denied to read" "\n", idn);
#line 1586 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_query_flag_not_readable(uint8_t idn)
{
    if (true) {
        _nocheck__trace_ufs_err_query_flag_not_readable(idn);
    }
}

#define TRACE_UFS_ERR_QUERY_FLAG_NOT_WRITABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_QUERY_FLAG_NOT_WRITABLE) || \
    false)

static inline void _nocheck__trace_ufs_err_query_flag_not_writable(uint8_t idn)
{
    if (trace_event_get_state(TRACE_UFS_ERR_QUERY_FLAG_NOT_WRITABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 52 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_query_flag_not_writable " "query flag idn 0x%"PRIx8" is denied to write" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , idn);
#line 1613 "trace/trace-hw_ufs.h"
        } else {
#line 52 "../hw/ufs/trace-events"
            qemu_log("ufs_err_query_flag_not_writable " "query flag idn 0x%"PRIx8" is denied to write" "\n", idn);
#line 1617 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_query_flag_not_writable(uint8_t idn)
{
    if (true) {
        _nocheck__trace_ufs_err_query_flag_not_writable(idn);
    }
}

#define TRACE_UFS_ERR_QUERY_ATTR_NOT_READABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_QUERY_ATTR_NOT_READABLE) || \
    false)

static inline void _nocheck__trace_ufs_err_query_attr_not_readable(uint8_t idn)
{
    if (trace_event_get_state(TRACE_UFS_ERR_QUERY_ATTR_NOT_READABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 53 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_query_attr_not_readable " "query attribute idn 0x%"PRIx8" is denied to read" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , idn);
#line 1644 "trace/trace-hw_ufs.h"
        } else {
#line 53 "../hw/ufs/trace-events"
            qemu_log("ufs_err_query_attr_not_readable " "query attribute idn 0x%"PRIx8" is denied to read" "\n", idn);
#line 1648 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_query_attr_not_readable(uint8_t idn)
{
    if (true) {
        _nocheck__trace_ufs_err_query_attr_not_readable(idn);
    }
}

#define TRACE_UFS_ERR_QUERY_ATTR_NOT_WRITABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_QUERY_ATTR_NOT_WRITABLE) || \
    false)

static inline void _nocheck__trace_ufs_err_query_attr_not_writable(uint8_t idn)
{
    if (trace_event_get_state(TRACE_UFS_ERR_QUERY_ATTR_NOT_WRITABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 54 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_query_attr_not_writable " "query attribute idn 0x%"PRIx8" is denied to write" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , idn);
#line 1675 "trace/trace-hw_ufs.h"
        } else {
#line 54 "../hw/ufs/trace-events"
            qemu_log("ufs_err_query_attr_not_writable " "query attribute idn 0x%"PRIx8" is denied to write" "\n", idn);
#line 1679 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_query_attr_not_writable(uint8_t idn)
{
    if (true) {
        _nocheck__trace_ufs_err_query_attr_not_writable(idn);
    }
}

#define TRACE_UFS_ERR_QUERY_INVALID_OPCODE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_QUERY_INVALID_OPCODE) || \
    false)

static inline void _nocheck__trace_ufs_err_query_invalid_opcode(uint8_t opcode)
{
    if (trace_event_get_state(TRACE_UFS_ERR_QUERY_INVALID_OPCODE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 55 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_query_invalid_opcode " "query request has invalid opcode. opcode: 0x%"PRIx8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , opcode);
#line 1706 "trace/trace-hw_ufs.h"
        } else {
#line 55 "../hw/ufs/trace-events"
            qemu_log("ufs_err_query_invalid_opcode " "query request has invalid opcode. opcode: 0x%"PRIx8"" "\n", opcode);
#line 1710 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_query_invalid_opcode(uint8_t opcode)
{
    if (true) {
        _nocheck__trace_ufs_err_query_invalid_opcode(opcode);
    }
}

#define TRACE_UFS_ERR_QUERY_INVALID_IDN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_QUERY_INVALID_IDN) || \
    false)

static inline void _nocheck__trace_ufs_err_query_invalid_idn(uint8_t opcode, uint8_t idn)
{
    if (trace_event_get_state(TRACE_UFS_ERR_QUERY_INVALID_IDN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 56 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_query_invalid_idn " "query request has invalid idn. opcode: 0x%"PRIx8", idn 0x%"PRIx8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , opcode, idn);
#line 1737 "trace/trace-hw_ufs.h"
        } else {
#line 56 "../hw/ufs/trace-events"
            qemu_log("ufs_err_query_invalid_idn " "query request has invalid idn. opcode: 0x%"PRIx8", idn 0x%"PRIx8"" "\n", opcode, idn);
#line 1741 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_query_invalid_idn(uint8_t opcode, uint8_t idn)
{
    if (true) {
        _nocheck__trace_ufs_err_query_invalid_idn(opcode, idn);
    }
}

#define TRACE_UFS_ERR_QUERY_INVALID_INDEX_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_QUERY_INVALID_INDEX) || \
    false)

static inline void _nocheck__trace_ufs_err_query_invalid_index(uint8_t opcode, uint8_t index)
{
    if (trace_event_get_state(TRACE_UFS_ERR_QUERY_INVALID_INDEX) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 57 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_query_invalid_index " "query request has invalid index. opcode: 0x%"PRIx8", index 0x%"PRIx8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , opcode, index);
#line 1768 "trace/trace-hw_ufs.h"
        } else {
#line 57 "../hw/ufs/trace-events"
            qemu_log("ufs_err_query_invalid_index " "query request has invalid index. opcode: 0x%"PRIx8", index 0x%"PRIx8"" "\n", opcode, index);
#line 1772 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_query_invalid_index(uint8_t opcode, uint8_t index)
{
    if (true) {
        _nocheck__trace_ufs_err_query_invalid_index(opcode, index);
    }
}

#define TRACE_UFS_ERR_INVALID_TRANS_CODE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UFS_ERR_INVALID_TRANS_CODE) || \
    false)

static inline void _nocheck__trace_ufs_err_invalid_trans_code(uint32_t slot, uint8_t trans_code)
{
    if (trace_event_get_state(TRACE_UFS_ERR_INVALID_TRANS_CODE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 58 "../hw/ufs/trace-events"
            qemu_log("%d@%zu.%06zu:ufs_err_invalid_trans_code " "request upiu has invalid transaction code. slot: %"PRIu32", trans_code: 0x%"PRIx8"" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , slot, trans_code);
#line 1799 "trace/trace-hw_ufs.h"
        } else {
#line 58 "../hw/ufs/trace-events"
            qemu_log("ufs_err_invalid_trans_code " "request upiu has invalid transaction code. slot: %"PRIu32", trans_code: 0x%"PRIx8"" "\n", slot, trans_code);
#line 1803 "trace/trace-hw_ufs.h"
        }
    }
}

static inline void trace_ufs_err_invalid_trans_code(uint32_t slot, uint8_t trans_code)
{
    if (true) {
        _nocheck__trace_ufs_err_invalid_trans_code(slot, trans_code);
    }
}
#endif /* TRACE_HW_UFS_GENERATED_TRACERS_H */
