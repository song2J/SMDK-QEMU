/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_AUDIO_GENERATED_TRACERS_H
#define TRACE_HW_AUDIO_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_CS4231_MEM_READL_DREG_EVENT;
extern TraceEvent _TRACE_CS4231_MEM_READL_REG_EVENT;
extern TraceEvent _TRACE_CS4231_MEM_WRITEL_REG_EVENT;
extern TraceEvent _TRACE_CS4231_MEM_WRITEL_DREG_EVENT;
extern TraceEvent _TRACE_HDA_AUDIO_RUNNING_EVENT;
extern TraceEvent _TRACE_HDA_AUDIO_FORMAT_EVENT;
extern TraceEvent _TRACE_HDA_AUDIO_ADJUST_EVENT;
extern TraceEvent _TRACE_HDA_AUDIO_OVERRUN_EVENT;
extern TraceEvent _TRACE_VIA_AC97_CODEC_WRITE_EVENT;
extern TraceEvent _TRACE_VIA_AC97_SGD_FETCH_EVENT;
extern TraceEvent _TRACE_VIA_AC97_SGD_READ_EVENT;
extern TraceEvent _TRACE_VIA_AC97_SGD_WRITE_EVENT;
extern uint16_t _TRACE_CS4231_MEM_READL_DREG_DSTATE;
extern uint16_t _TRACE_CS4231_MEM_READL_REG_DSTATE;
extern uint16_t _TRACE_CS4231_MEM_WRITEL_REG_DSTATE;
extern uint16_t _TRACE_CS4231_MEM_WRITEL_DREG_DSTATE;
extern uint16_t _TRACE_HDA_AUDIO_RUNNING_DSTATE;
extern uint16_t _TRACE_HDA_AUDIO_FORMAT_DSTATE;
extern uint16_t _TRACE_HDA_AUDIO_ADJUST_DSTATE;
extern uint16_t _TRACE_HDA_AUDIO_OVERRUN_DSTATE;
extern uint16_t _TRACE_VIA_AC97_CODEC_WRITE_DSTATE;
extern uint16_t _TRACE_VIA_AC97_SGD_FETCH_DSTATE;
extern uint16_t _TRACE_VIA_AC97_SGD_READ_DSTATE;
extern uint16_t _TRACE_VIA_AC97_SGD_WRITE_DSTATE;
#define TRACE_CS4231_MEM_READL_DREG_ENABLED 1
#define TRACE_CS4231_MEM_READL_REG_ENABLED 1
#define TRACE_CS4231_MEM_WRITEL_REG_ENABLED 1
#define TRACE_CS4231_MEM_WRITEL_DREG_ENABLED 1
#define TRACE_HDA_AUDIO_RUNNING_ENABLED 1
#define TRACE_HDA_AUDIO_FORMAT_ENABLED 1
#define TRACE_HDA_AUDIO_ADJUST_ENABLED 1
#define TRACE_HDA_AUDIO_OVERRUN_ENABLED 1
#define TRACE_VIA_AC97_CODEC_WRITE_ENABLED 1
#define TRACE_VIA_AC97_SGD_FETCH_ENABLED 1
#define TRACE_VIA_AC97_SGD_READ_ENABLED 1
#define TRACE_VIA_AC97_SGD_WRITE_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_CS4231_MEM_READL_DREG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CS4231_MEM_READL_DREG) || \
    false)

static inline void _nocheck__trace_cs4231_mem_readl_dreg(uint32_t reg, uint32_t ret)
{
    if (trace_event_get_state(TRACE_CS4231_MEM_READL_DREG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:cs4231_mem_readl_dreg " "read dreg %d: 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, ret);
#line 64 "trace/trace-hw_audio.h"
        } else {
#line 4 "../hw/audio/trace-events"
            qemu_log("cs4231_mem_readl_dreg " "read dreg %d: 0x%02x" "\n", reg, ret);
#line 68 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_cs4231_mem_readl_dreg(uint32_t reg, uint32_t ret)
{
    if (true) {
        _nocheck__trace_cs4231_mem_readl_dreg(reg, ret);
    }
}

#define TRACE_CS4231_MEM_READL_REG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CS4231_MEM_READL_REG) || \
    false)

static inline void _nocheck__trace_cs4231_mem_readl_reg(uint32_t reg, uint32_t ret)
{
    if (trace_event_get_state(TRACE_CS4231_MEM_READL_REG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:cs4231_mem_readl_reg " "read reg %d: 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, ret);
#line 95 "trace/trace-hw_audio.h"
        } else {
#line 5 "../hw/audio/trace-events"
            qemu_log("cs4231_mem_readl_reg " "read reg %d: 0x%08x" "\n", reg, ret);
#line 99 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_cs4231_mem_readl_reg(uint32_t reg, uint32_t ret)
{
    if (true) {
        _nocheck__trace_cs4231_mem_readl_reg(reg, ret);
    }
}

#define TRACE_CS4231_MEM_WRITEL_REG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CS4231_MEM_WRITEL_REG) || \
    false)

static inline void _nocheck__trace_cs4231_mem_writel_reg(uint32_t reg, uint32_t old, uint32_t val)
{
    if (trace_event_get_state(TRACE_CS4231_MEM_WRITEL_REG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:cs4231_mem_writel_reg " "write reg %d: 0x%08x -> 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, old, val);
#line 126 "trace/trace-hw_audio.h"
        } else {
#line 6 "../hw/audio/trace-events"
            qemu_log("cs4231_mem_writel_reg " "write reg %d: 0x%08x -> 0x%08x" "\n", reg, old, val);
#line 130 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_cs4231_mem_writel_reg(uint32_t reg, uint32_t old, uint32_t val)
{
    if (true) {
        _nocheck__trace_cs4231_mem_writel_reg(reg, old, val);
    }
}

#define TRACE_CS4231_MEM_WRITEL_DREG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CS4231_MEM_WRITEL_DREG) || \
    false)

static inline void _nocheck__trace_cs4231_mem_writel_dreg(uint32_t reg, uint32_t old, uint32_t val)
{
    if (trace_event_get_state(TRACE_CS4231_MEM_WRITEL_DREG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:cs4231_mem_writel_dreg " "write dreg %d: 0x%02x -> 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, old, val);
#line 157 "trace/trace-hw_audio.h"
        } else {
#line 7 "../hw/audio/trace-events"
            qemu_log("cs4231_mem_writel_dreg " "write dreg %d: 0x%02x -> 0x%02x" "\n", reg, old, val);
#line 161 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_cs4231_mem_writel_dreg(uint32_t reg, uint32_t old, uint32_t val)
{
    if (true) {
        _nocheck__trace_cs4231_mem_writel_dreg(reg, old, val);
    }
}

#define TRACE_HDA_AUDIO_RUNNING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_HDA_AUDIO_RUNNING) || \
    false)

static inline void _nocheck__trace_hda_audio_running(const char * stream, int nr, bool running)
{
    if (trace_event_get_state(TRACE_HDA_AUDIO_RUNNING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:hda_audio_running " "st %s, nr %d, run %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , stream, nr, running);
#line 188 "trace/trace-hw_audio.h"
        } else {
#line 10 "../hw/audio/trace-events"
            qemu_log("hda_audio_running " "st %s, nr %d, run %d" "\n", stream, nr, running);
#line 192 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_hda_audio_running(const char * stream, int nr, bool running)
{
    if (true) {
        _nocheck__trace_hda_audio_running(stream, nr, running);
    }
}

#define TRACE_HDA_AUDIO_FORMAT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_HDA_AUDIO_FORMAT) || \
    false)

static inline void _nocheck__trace_hda_audio_format(const char * stream, int chan, const char * fmt, int freq)
{
    if (trace_event_get_state(TRACE_HDA_AUDIO_FORMAT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:hda_audio_format " "st %s, %d x %s @ %d Hz" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , stream, chan, fmt, freq);
#line 219 "trace/trace-hw_audio.h"
        } else {
#line 11 "../hw/audio/trace-events"
            qemu_log("hda_audio_format " "st %s, %d x %s @ %d Hz" "\n", stream, chan, fmt, freq);
#line 223 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_hda_audio_format(const char * stream, int chan, const char * fmt, int freq)
{
    if (true) {
        _nocheck__trace_hda_audio_format(stream, chan, fmt, freq);
    }
}

#define TRACE_HDA_AUDIO_ADJUST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_HDA_AUDIO_ADJUST) || \
    false)

static inline void _nocheck__trace_hda_audio_adjust(const char * stream, int pos)
{
    if (trace_event_get_state(TRACE_HDA_AUDIO_ADJUST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:hda_audio_adjust " "st %s, pos %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , stream, pos);
#line 250 "trace/trace-hw_audio.h"
        } else {
#line 12 "../hw/audio/trace-events"
            qemu_log("hda_audio_adjust " "st %s, pos %d" "\n", stream, pos);
#line 254 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_hda_audio_adjust(const char * stream, int pos)
{
    if (true) {
        _nocheck__trace_hda_audio_adjust(stream, pos);
    }
}

#define TRACE_HDA_AUDIO_OVERRUN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_HDA_AUDIO_OVERRUN) || \
    false)

static inline void _nocheck__trace_hda_audio_overrun(const char * stream)
{
    if (trace_event_get_state(TRACE_HDA_AUDIO_OVERRUN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:hda_audio_overrun " "st %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , stream);
#line 281 "trace/trace-hw_audio.h"
        } else {
#line 13 "../hw/audio/trace-events"
            qemu_log("hda_audio_overrun " "st %s" "\n", stream);
#line 285 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_hda_audio_overrun(const char * stream)
{
    if (true) {
        _nocheck__trace_hda_audio_overrun(stream);
    }
}

#define TRACE_VIA_AC97_CODEC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA_AC97_CODEC_WRITE) || \
    false)

static inline void _nocheck__trace_via_ac97_codec_write(uint8_t addr, uint16_t val)
{
    if (trace_event_get_state(TRACE_VIA_AC97_CODEC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:via_ac97_codec_write " "0x%x <- 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 312 "trace/trace-hw_audio.h"
        } else {
#line 16 "../hw/audio/trace-events"
            qemu_log("via_ac97_codec_write " "0x%x <- 0x%x" "\n", addr, val);
#line 316 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_via_ac97_codec_write(uint8_t addr, uint16_t val)
{
    if (true) {
        _nocheck__trace_via_ac97_codec_write(addr, val);
    }
}

#define TRACE_VIA_AC97_SGD_FETCH_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA_AC97_SGD_FETCH) || \
    false)

static inline void _nocheck__trace_via_ac97_sgd_fetch(uint32_t curr, uint32_t addr, char stop, char eol, char flag, uint32_t len)
{
    if (trace_event_get_state(TRACE_VIA_AC97_SGD_FETCH) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 17 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:via_ac97_sgd_fetch " "curr=0x%x addr=0x%x %c%c%c len=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , curr, addr, stop, eol, flag, len);
#line 343 "trace/trace-hw_audio.h"
        } else {
#line 17 "../hw/audio/trace-events"
            qemu_log("via_ac97_sgd_fetch " "curr=0x%x addr=0x%x %c%c%c len=%d" "\n", curr, addr, stop, eol, flag, len);
#line 347 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_via_ac97_sgd_fetch(uint32_t curr, uint32_t addr, char stop, char eol, char flag, uint32_t len)
{
    if (true) {
        _nocheck__trace_via_ac97_sgd_fetch(curr, addr, stop, eol, flag, len);
    }
}

#define TRACE_VIA_AC97_SGD_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA_AC97_SGD_READ) || \
    false)

static inline void _nocheck__trace_via_ac97_sgd_read(uint64_t addr, unsigned size, uint64_t val)
{
    if (trace_event_get_state(TRACE_VIA_AC97_SGD_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 18 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:via_ac97_sgd_read " "0x%"PRIx64" %d -> 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, val);
#line 374 "trace/trace-hw_audio.h"
        } else {
#line 18 "../hw/audio/trace-events"
            qemu_log("via_ac97_sgd_read " "0x%"PRIx64" %d -> 0x%"PRIx64 "\n", addr, size, val);
#line 378 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_via_ac97_sgd_read(uint64_t addr, unsigned size, uint64_t val)
{
    if (true) {
        _nocheck__trace_via_ac97_sgd_read(addr, size, val);
    }
}

#define TRACE_VIA_AC97_SGD_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA_AC97_SGD_WRITE) || \
    false)

static inline void _nocheck__trace_via_ac97_sgd_write(uint64_t addr, unsigned size, uint64_t val)
{
    if (trace_event_get_state(TRACE_VIA_AC97_SGD_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "../hw/audio/trace-events"
            qemu_log("%d@%zu.%06zu:via_ac97_sgd_write " "0x%"PRIx64" %d <- 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, val);
#line 405 "trace/trace-hw_audio.h"
        } else {
#line 19 "../hw/audio/trace-events"
            qemu_log("via_ac97_sgd_write " "0x%"PRIx64" %d <- 0x%"PRIx64 "\n", addr, size, val);
#line 409 "trace/trace-hw_audio.h"
        }
    }
}

static inline void trace_via_ac97_sgd_write(uint64_t addr, unsigned size, uint64_t val)
{
    if (true) {
        _nocheck__trace_via_ac97_sgd_write(addr, size, val);
    }
}
#endif /* TRACE_HW_AUDIO_GENERATED_TRACERS_H */
